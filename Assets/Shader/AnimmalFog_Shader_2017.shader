Shader "Animmal/Fog_Shader_2017" {
	Properties {
		_Depth ("Depth", Float) = 0
		_Opacity ("Opacity", Range(0, 1)) = 0
		_Color ("Color ", Vector) = (0.1470588,1,0.634,0)
		[HideInInspector] __dirty ("", Float) = 1
		[Header(Forward Rendering Options)] [ToggleOff] _SpecularHighlights ("Specular Highlights", Float) = 1
		[ToggleOff] _GlossyReflections ("Reflections", Float) = 1
	}
	SubShader {
		Tags { "FORCENOSHADOWCASTING" = "true" "IGNOREPROJECTOR" = "true" "IsEmissive" = "true" "QUEUE" = "Transparent+0" "RenderType" = "Transparent" }
		Pass {
			Name "FORWARD"
			Tags { "FORCENOSHADOWCASTING" = "true" "IGNOREPROJECTOR" = "true" "IsEmissive" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Transparent+0" "RenderType" = "Transparent" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 65340
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat16_4.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					int u_xlati0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat16_4.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture2D(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture2D(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture2D(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					int u_xlati0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat16_4.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					int u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					vec3 u_xlat5;
					int u_xlati5;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati5 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati5 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat5.x = inversesqrt(u_xlat5.x);
					    u_xlat5.xyz = u_xlat5.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat5.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat5.y * u_xlat5.y;
					    u_xlat16_3 = u_xlat5.x * u_xlat5.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat5.yzzx * u_xlat5.xyzz;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					int u_xlati0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat16_4.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.www;
					    u_xlat16_4.xyz = vec3(u_xlat15) * u_xlat16_4.xyz;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					int u_xlati6;
					float u_xlat19;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati6 = int(u_xlati0 << 3);
					    u_xlati0 = u_xlati0 * 7;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati6 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat6.x = inversesqrt(u_xlat6.x);
					    u_xlat6.xyz = u_xlat6.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat6.xyz;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat6.y * u_xlat6.y;
					    u_xlat16_4.x = u_xlat6.x * u_xlat6.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat6.yzzx * u_xlat6.xyzz;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0 / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0 / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat6.yyyy * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat6.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat6.zzzz + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					int u_xlati1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlati1 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati1 = u_xlati1 * 7;
					    u_xlat16_2.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati1 / 7].unity_SHCArray.www;
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat16_2.xyz;
					    u_xlat16_2.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = int(u_xlati0 << 3);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					bool u_xlatb5;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5.x = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat5.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = 0.0;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec2 u_xlat5;
					int u_xlati5;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5 = u_xlati5 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb10 = 0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat10 = (u_xlatb10) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat10 + unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					int u_xlati5;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5 = u_xlati5 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb10 = 0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat10 = (u_xlatb10) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat10 + unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					int u_xlati5;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5 = u_xlati5 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb10 = 0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat10 = (u_xlatb10) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat10 + unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					ivec2 u_xlati5;
					mediump float u_xlat16_10;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_16;
					float u_xlat19;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_16 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_16)) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_16 = u_xlat16_2.w + -1.0;
					    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;
					    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat19 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
					#else
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat15) * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_16 = (-u_xlat19) + 1.0;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_16 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_16 = u_xlat0.x * 3.53466082;
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					ivec2 u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					ivec2 u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					ivec2 u_xlati5;
					mediump float u_xlat16_10;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_16;
					float u_xlat19;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_16 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_16)) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_16 = u_xlat16_2.w + -1.0;
					    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;
					    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat19 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
					#else
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat15) * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_16 = (-u_xlat19) + 1.0;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_16 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_16 = u_xlat0.x * 3.53466082;
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat16_1.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					ivec2 u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					ivec2 u_xlati5;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
					#else
					    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * u_xlat5.xxx + u_xlat16_3.xyz;
					    SV_Target0.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat5.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_2 * u_xlat16_0;
					    u_xlat16_2 = u_xlat16_0 * -2.98023224e-08 + 0.220916301;
					    SV_Target0.xyz = unity_IndirectSpecColor.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					int u_xlati3;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2 = (-u_xlat0.x) + 1.0;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * u_xlat16_2;
					    u_xlat16_2 = u_xlat16_2 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2) + _Color.xyz;
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture2D(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture2D(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    vs_TEXCOORD0.xyz = u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat1.y * u_xlat1.y;
					    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat1.yzzx * u_xlat1.xyzz;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat10_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat10_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture2D(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying mediump vec3 vs_TEXCOORD3;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.w = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb5 = 0.0<unity_LODFade.x;
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat5 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat10_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD1.w;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat8;
					mediump float u_xlat16_10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = u_xlat0.xyz;
					    u_xlat21 = u_xlat1.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat21 * 0.5;
					    u_xlat3.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.zzzz + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.yzzx * u_xlat2.xyzz;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat6;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb5 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb5 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat5 = (u_xlatb5) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat5 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD1.w;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					int u_xlati5;
					vec2 u_xlat8;
					float u_xlat10;
					mediump float u_xlat16_10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_17;
					float u_xlat18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5 = u_xlati5 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb10 = 0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat10 = (u_xlatb10) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat10 + unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_2.x = u_xlat16_1.w + -1.0;
					    u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;
					    u_xlat16_2.xyz = u_xlat16_1.xyz * u_xlat16_2.xxx;
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat18 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat3.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat15) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_17 = (-u_xlat18) + 1.0;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_17;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_17 * u_xlat16_10;
					    u_xlat16_17 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_2.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_17 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = vec3(u_xlat16_17) * u_xlat16_4.xyz + u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat3.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat8.xy = vs_TEXCOORD2.xy / u_xlat3.xx;
					    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
					    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
					    u_xlat8.x = float(1.0) / u_xlat8.x;
					    u_xlat3.x = (-u_xlat3.x) + u_xlat8.x;
					    u_xlat8.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat3.x = u_xlat8.x * abs(u_xlat3.x);
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat0.w = min(u_xlat3.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					int u_xlati5;
					vec2 u_xlat6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5 = u_xlati5 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb10 = 0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat10 = (u_xlatb10) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat10 + unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					int u_xlati5;
					vec2 u_xlat6;
					float u_xlat10;
					bool u_xlatb10;
					float u_xlat15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5 = u_xlati5 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb10 = !!(0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb10 = 0.0<unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat10 = (u_xlatb10) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat10 + unity_Builtins0Array[u_xlati5 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat16_2.x = dot((-u_xlat1.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_2.xxx) + (-u_xlat1.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_2.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat15) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat1.xxx + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat6.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					ivec2 u_xlati5;
					vec2 u_xlat9;
					mediump float u_xlat16_10;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_16;
					float u_xlat19;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_16 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_16)) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_16 = u_xlat16_2.w + -1.0;
					    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;
					    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat19 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
					#else
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat15) * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_16 = (-u_xlat19) + 1.0;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_16 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_16 = u_xlat0.x * 3.53466082;
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat4.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat9.xy = vs_TEXCOORD2.xy / u_xlat4.xx;
					    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
					    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
					    u_xlat9.x = float(1.0) / u_xlat9.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat9.x;
					    u_xlat9.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat4.x = u_xlat9.x * abs(u_xlat4.x);
					    u_xlat4.x = max(u_xlat4.x, 0.0);
					    u_xlat0.w = min(u_xlat4.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec2 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat7.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
					    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat7.x = float(1.0) / u_xlat7.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat7.x;
					    u_xlat7.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat7.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat16_3 = u_xlat0.z * u_xlat0.z;
					    u_xlat16_3 = u_xlat0.x * u_xlat0.x + (-u_xlat16_3);
					    u_xlat16_1 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_4.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_1);
					    u_xlat16_4.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_1);
					    u_xlat16_4.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_1);
					    vs_TEXCOORD3.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec2 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat7.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
					    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat7.x = float(1.0) / u_xlat7.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat7.x;
					    u_xlat7.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat7.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					mediump vec4 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					ivec2 u_xlati5;
					vec2 u_xlat9;
					mediump float u_xlat16_10;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_16;
					float u_xlat19;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat16_16 = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;
					    u_xlat16_2.xyz = vs_TEXCOORD0.xyz * (-vec3(u_xlat16_16)) + (-u_xlat0.xyz);
					    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, 6.0);
					    u_xlat16_16 = u_xlat16_2.w + -1.0;
					    u_xlat16_16 = unity_SpecCube0_HDR.w * u_xlat16_16 + 1.0;
					    u_xlat16_16 = u_xlat16_16 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(u_xlat16_16);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat4.xyz);
					    u_xlat19 = u_xlat15;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat19 = min(max(u_xlat19, 0.0), 1.0);
					#else
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					#endif
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat0.xyz = u_xlat4.xyz * (-vec3(u_xlat15)) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat16_1.xyz = vec3(u_xlat15) * u_xlat16_1.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_16 = (-u_xlat19) + 1.0;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_16;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_10 = u_xlat16_16 * u_xlat16_10;
					    u_xlat16_16 = u_xlat16_10 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_16 = u_xlat0.x * 3.53466082;
					    u_xlat16_1.xyz = vec3(u_xlat16_16) * u_xlat16_1.xyz + u_xlat16_3.xyz;
					    u_xlat16_1.xyz = u_xlat16_1.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_1.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat4.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat9.xy = vs_TEXCOORD2.xy / u_xlat4.xx;
					    u_xlat9.x = texture(_CameraDepthTexture, u_xlat9.xy).x;
					    u_xlat9.x = _ZBufferParams.z * u_xlat9.x + _ZBufferParams.w;
					    u_xlat9.x = float(1.0) / u_xlat9.x;
					    u_xlat4.x = (-u_xlat4.x) + u_xlat9.x;
					    u_xlat9.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat4.x = u_xlat9.x * abs(u_xlat4.x);
					    u_xlat4.x = max(u_xlat4.x, 0.0);
					    u_xlat0.w = min(u_xlat4.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec2 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat7.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
					    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat7.x = float(1.0) / u_xlat7.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat7.x;
					    u_xlat7.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat7.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out mediump vec3 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					ivec2 u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					mediump vec3 u_xlat16_4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_5;
					float u_xlat19;
					void main()
					{
					    u_xlati0.x = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0.xy = u_xlati0.xx * ivec2(9, 7);
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    u_xlat1.xyz = unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;
					    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;
					    gl_Position = u_xlat2;
					    u_xlat3.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0.x / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xzw = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD0.xyz = u_xlat0.xzw;
					    vs_TEXCOORD4 = u_xlat2.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = u_xlat1.xyz;
					    u_xlat19 = u_xlat2.y * _ProjectionParams.x;
					    u_xlat3.w = u_xlat19 * 0.5;
					    u_xlat3.xz = u_xlat2.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat2.zw;
					    vs_TEXCOORD2.xy = u_xlat3.zz + u_xlat3.xw;
					    u_xlat16_4.x = u_xlat0.z * u_xlat0.z;
					    u_xlat16_4.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_4.x);
					    u_xlat16_2 = u_xlat0.zwwx * u_xlat0.xzww;
					    u_xlat16_5.x = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBrArray, u_xlat16_2);
					    u_xlat16_5.y = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBgArray, u_xlat16_2);
					    u_xlat16_5.z = dot(unity_Builtins2Array[u_xlati0.y / 7].unity_SHBbArray, u_xlat16_2);
					    u_xlat16_4.xyz = unity_Builtins2Array[u_xlati0.y / 7].unity_SHCArray.xyz * u_xlat16_4.xxx + u_xlat16_5.xyz;
					    u_xlat2 = (-u_xlat1.yyyy) + unity_4LightPosY0;
					    u_xlat3 = u_xlat0.zzzz * u_xlat2;
					    u_xlat2 = u_xlat2 * u_xlat2;
					    u_xlat5 = (-u_xlat1.xxxx) + unity_4LightPosX0;
					    u_xlat1 = (-u_xlat1.zzzz) + unity_4LightPosZ0;
					    u_xlat3 = u_xlat5 * u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat1 * u_xlat0.wwww + u_xlat3;
					    u_xlat2 = u_xlat5 * u_xlat5 + u_xlat2;
					    u_xlat1 = u_xlat1 * u_xlat1 + u_xlat2;
					    u_xlat1 = max(u_xlat1, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat2 = inversesqrt(u_xlat1);
					    u_xlat1 = u_xlat1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat1 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat2;
					    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat1 * u_xlat0;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    vs_TEXCOORD3.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	int unity_BaseInstanceID;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					struct unity_Builtins2Array_Type {
						mediump vec4 unity_SHArArray;
						mediump vec4 unity_SHAgArray;
						mediump vec4 unity_SHAbArray;
						mediump vec4 unity_SHBrArray;
						mediump vec4 unity_SHBgArray;
						mediump vec4 unity_SHBbArray;
						mediump vec4 unity_SHCArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(1) uniform UnityInstancing_PerDraw2 {
					#endif
						UNITY_UNIFORM unity_Builtins2Array_Type unity_Builtins2Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					float u_xlat5;
					ivec2 u_xlati5;
					vec2 u_xlat7;
					float u_xlat15;
					bool u_xlatb15;
					mediump float u_xlat16_18;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati5.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati5.xy = u_xlati5.xx * ivec2(9, 7);
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb15 = !!(0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb15 = 0.0<unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat15 + unity_Builtins0Array[u_xlati5.x / 9].unity_LODFadeArray.x;
					    u_xlat16_1.xyz = _LightColor0.xyz * unity_Builtins2Array[u_xlati5.y / 7].unity_SHCArray.www;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat15 = max(u_xlat15, 0.00100000005);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;
					    u_xlat15 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat15 = max(u_xlat15, 0.319999993);
					    u_xlat15 = u_xlat15 * 2.50002503;
					    u_xlat15 = float(1.0) / u_xlat15;
					    u_xlat15 = u_xlat15 + -9.99999975e-05;
					    u_xlat15 = u_xlat15 * 0.220916301;
					    u_xlat2.xyz = u_xlat16_1.xyz * vec3(u_xlat15);
					    u_xlat16_1.x = dot((-u_xlat0.xyz), vs_TEXCOORD0.xyz);
					    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_1.x;
					    u_xlat16_1.xyz = vs_TEXCOORD0.xyz * (-u_xlat16_1.xxx) + (-u_xlat0.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_1.xyz, 6.0);
					    u_xlat16_3.x = u_xlat16_1.w + -1.0;
					    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;
					    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xxx;
					    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat15 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat4.xyz = vec3(u_xlat15) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat5 = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
					#else
					    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
					#endif
					    u_xlat16_18 = (-u_xlat0.x) + 1.0;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;
					    u_xlat16_18 = u_xlat16_18 * -2.98023224e-08 + 0.220916301;
					    u_xlat16_3.xyz = vec3(u_xlat16_18) * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat2.xyz * vec3(u_xlat5) + u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_3.xyz + (-unity_FogColor.xyz);
					    u_xlat15 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
					#else
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat7.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
					    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
					    u_xlat7.x = float(1.0) / u_xlat7.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat7.x;
					    u_xlat7.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat7.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_0.x = u_xlat16_2.x * u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_0.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_2.xyz = unity_IndirectSpecColor.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	int unity_BaseInstanceID;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD6;
					flat out highp uint vs_SV_InstanceID0;
					vec4 u_xlat0;
					int u_xlati0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
					    u_xlati0 = u_xlati0 * 9;
					    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
					    vs_TEXCOORD1.xyz = unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 9].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    vs_TEXCOORD0.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
					    u_xlat0.w = u_xlat0.x * 0.5;
					    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat0.zz + u_xlat0.xw;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_SV_InstanceID0 = uint(gl_InstanceID);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
						#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 unity_IndirectSpecColor;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	int unity_BaseInstanceID;
					uniform 	vec4 _Color;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					struct unity_Builtins0Array_Type {
						vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
						vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
						vec2 unity_LODFadeArray;
					};
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					UNITY_BINDING(0) uniform UnityInstancing_PerDraw0 {
					#endif
						UNITY_UNIFORM unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					};
					#endif
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					flat in highp uint vs_SV_InstanceID0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					int u_xlati3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0.x = texture(unity_DitherMask, u_xlat0.xy).w;
					    u_xlati3 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
					    u_xlati3 = u_xlati3 * 9;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb6 = !!(0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x);
					#else
					    u_xlatb6 = 0.0<unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#endif
					    u_xlat6 = (u_xlatb6) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0.x) * u_xlat6 + unity_Builtins0Array[u_xlati3 / 9].unity_LODFadeArray.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = (-u_xlat0.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat16_2.x * -2.98023224e-08 + 0.220916301;
					    u_xlat16_5.xyz = unity_IndirectSpecColor.xyz * vec3(0.720000029, 0.720000029, 0.720000029);
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx + _Color.xyz;
					    u_xlat16_0.xyz = u_xlat16_2.xyz + (-unity_FogColor.xyz);
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat16_0.xyz + unity_FogColor.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LIGHTPROBE_SH" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "INSTANCING_ON" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			Tags { "FORCENOSHADOWCASTING" = "true" "IGNOREPROJECTOR" = "true" "IsEmissive" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Transparent+0" "RenderType" = "Transparent" }
			Blend SrcAlpha One, SrcAlpha One
			ColorMask RGB -1
			ZWrite Off
			GpuProgramID 103714
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xz = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xz).w;
					    u_xlatb8 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat1 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat0.xz = u_xlat1.xy / u_xlat1.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb8 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb8 = 0.0<u_xlat1.z;
					#endif
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat12 * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat8 * u_xlat0.x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw).w;
					    u_xlat8 = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat0.x = u_xlat0.x * u_xlat8;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2 = u_xlat0.x * 3.53466082;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2 = u_xlat0.x * 3.53466082;
					    u_xlat0.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					float u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / vec2(u_xlat0);
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0 = (-u_xlat0) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0 = u_xlat1.x * abs(u_xlat0);
					    u_xlat0 = max(u_xlat0, 0.0);
					    u_xlat0 = min(u_xlat0, _Opacity);
					    SV_Target0.w = u_xlat0;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xz = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xz).w;
					    u_xlatb8 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat1 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat0.xz = u_xlat1.xy / u_xlat1.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb8 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb8 = 0.0<u_xlat1.z;
					#endif
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat12 * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat8 * u_xlat0.x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw).w;
					    u_xlat8 = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat0.x = u_xlat0.x * u_xlat8;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2.x = u_xlat0.x * 3.53466082;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					vec2 u_xlat1;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					bool u_xlatb4;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					bool u_xlatb4;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec2 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec2 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb2 = 0.0<unity_LODFade.x;
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat2 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb2 = 0.0<unity_LODFade.x;
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat2 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    SV_Target0.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb2 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat2 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb2 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat2 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec2 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec2 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					bool u_xlatb4;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xz = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xz).w;
					    u_xlatb8 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					bool u_xlatb4;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat1 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat0.xz = u_xlat1.xy / u_xlat1.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb8 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb8 = 0.0<u_xlat1.z;
					#endif
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat12 * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec2 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec2 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					bool u_xlatb4;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat8 * u_xlat0.x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump float u_xlat16_3;
					vec2 u_xlat4;
					bool u_xlatb4;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
					#else
					    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3 = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw).w;
					    u_xlat8 = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat0.x = u_xlat0.x * u_xlat8;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz;
					    SV_Target0.xyz = u_xlat16_7.xyz * vec3(u_xlat16_3);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat4.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec2 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec2 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2 = u_xlat0.x * 3.53466082;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump float u_xlat16_2;
					vec2 u_xlat3;
					bool u_xlatb3;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2 = u_xlat0.x * 3.53466082;
					    u_xlat0.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_2);
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat3.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec2 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec2 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, _Opacity);
					    SV_Target0.w = u_xlat0.x;
					    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture2D(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4.x = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat4.x = texture(_LightTexture0, u_xlat4.xx).x;
					    u_xlat16_2.xyz = u_xlat4.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb2 = 0.0<unity_LODFade.x;
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat2 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb2 = 0.0<unity_LODFade.x;
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat2 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture2D(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					float u_xlat9;
					mediump float u_xlat16_11;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat9) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_11 = u_xlat0.x * 3.53466082;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_11);
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb2 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat2 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec4 u_xlat1;
					float u_xlat7;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat7 = inversesqrt(u_xlat7);
					    vs_TEXCOORD0.xyz = vec3(u_xlat7) * u_xlat1.xyz;
					    vs_TEXCOORD4 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
					    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat0.zw;
					    vs_TEXCOORD2.xy = u_xlat1.zz + u_xlat1.xw;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					float u_xlat2;
					bool u_xlatb2;
					vec2 u_xlat3;
					float u_xlat6;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb2 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb2 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat2 = (u_xlatb2) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat2 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6) + _WorldSpaceLightPos0.xyz;
					    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat6 = max(u_xlat6, 0.00100000005);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat6 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat6 = inversesqrt(u_xlat6);
					    u_xlat1.xyz = vec3(u_xlat6) * vs_TEXCOORD0.xyz;
					    u_xlat6 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat6) * u_xlat0.xyz;
					    u_xlat6 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
					#else
					    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat6);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat3.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat3.x = texture(_CameraDepthTexture, u_xlat3.xy).x;
					    u_xlat3.x = _ZBufferParams.z * u_xlat3.x + _ZBufferParams.w;
					    u_xlat3.x = float(1.0) / u_xlat3.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat3.x;
					    u_xlat3.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat3.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xz = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xz).w;
					    u_xlatb8 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<vs_TEXCOORD3.z;
					    u_xlat16_1.x = (u_xlatb4) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture2D(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					bool u_xlatb8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat1 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat0.xz = u_xlat1.xy / u_xlat1.ww;
					    u_xlat0.xz = u_xlat0.xz + vec2(0.5, 0.5);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb8 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb8 = 0.0<u_xlat1.z;
					#endif
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat16_7.x = (u_xlatb8) ? 1.0 : 0.0;
					    u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat12 * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD3 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D _LightTextureB0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0 = vs_TEXCOORD1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD1.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat12 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat12 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.x = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat0.x = u_xlat8 * u_xlat0.x;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb4 = 0.0<unity_LODFade.x;
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat4 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat4 = dot(vs_TEXCOORD3.xyz, vs_TEXCOORD3.xyz);
					    u_xlat4 = texture2D(_LightTextureB0, vec2(u_xlat4)).x;
					    u_xlat8 = textureCube(_LightTexture0, vs_TEXCOORD3.xyz).w;
					    u_xlat4 = u_xlat8 * u_xlat4;
					    u_xlat16_2.xyz = vec3(u_xlat4) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_7;
					float u_xlat8;
					float u_xlat12;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat12 = u_xlat12 + u_xlat12;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat12)) + u_xlat0.xyz;
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat4 = dot(u_xlat1.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
					#else
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.x = u_xlat0.x * u_xlat0.x;
					    u_xlat1.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat16_3.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xzw = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xzw;
					    u_xlat0.xzw = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xzw;
					    u_xlat0.xzw = u_xlat0.xzw + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1.x = dot(u_xlat0.xzw, u_xlat0.xzw);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xzw).w;
					    u_xlat8 = texture(_LightTextureB0, u_xlat1.xx).x;
					    u_xlat0.x = u_xlat0.x * u_xlat8;
					    u_xlat16_7.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_7.xyz = vec3(u_xlat4) * u_xlat16_7.xyz;
					    u_xlat16_3.xyz = u_xlat16_7.xyz * u_xlat16_3.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(3) uniform highp samplerCube _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp float vs_TEXCOORD4;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					float u_xlat4;
					bool u_xlatb4;
					vec2 u_xlat6;
					float u_xlat12;
					float u_xlat14;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb4 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb4 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat4 = (u_xlatb4) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat4 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD1.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD1.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat4 = texture(_LightTextureB0, vec2(u_xlat12)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat4;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat14 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat14 = inversesqrt(u_xlat14);
					    u_xlat2.xyz = vec3(u_xlat14) * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = max(u_xlat12, 0.00100000005);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat0.xyz = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat12 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * vs_TEXCOORD0.xyz;
					    u_xlat12 = dot(u_xlat3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat12 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
					#else
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat6.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
					    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
					    u_xlat6.x = float(1.0) / u_xlat6.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat6.x;
					    u_xlat6.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat6.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D unity_NHxRoughness;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2.x = u_xlat0.x * 3.53466082;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture2D(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					uniform highp sampler2D _LightTexture0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec2 vs_TEXCOORD3;
					varying highp float vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb3 = 0.0<unity_LODFade.x;
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat3 + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3 = texture2D(_LightTexture0, vs_TEXCOORD3.xy).w;
					    u_xlat16_1.xyz = vec3(u_xlat3) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture2D(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat4;
					mediump vec3 u_xlat16_5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3 = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3 + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat9 = u_xlat9 + u_xlat9;
					    u_xlat0.xyz = u_xlat1.xyz * (-vec3(u_xlat9)) + u_xlat0.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat16_2.x = u_xlat0.x * 3.53466082;
					    u_xlat0.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_5.xyz = vec3(u_xlat9) * u_xlat16_5.xyz;
					    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xxx;
					    u_xlat0.x = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat1.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat4.xy = vs_TEXCOORD2.xy / u_xlat1.xx;
					    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
					    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
					    u_xlat4.x = float(1.0) / u_xlat4.x;
					    u_xlat1.x = (-u_xlat1.x) + u_xlat4.x;
					    u_xlat4.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat1.x = u_xlat4.x * abs(u_xlat1.x);
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat0.w = min(u_xlat1.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec2 vs_TEXCOORD3;
					out highp float vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat0.xx + u_xlat1.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat0.zz + u_xlat0.xy;
					    vs_TEXCOORD3.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat0.ww + u_xlat0.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _ZBufferParams;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LODFade;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					UNITY_LOCATION(2) uniform highp sampler2D _LightTexture0;
					in highp vec3 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp float vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec2 u_xlat3;
					bool u_xlatb3;
					vec2 u_xlat5;
					float u_xlat9;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb3 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb3 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat3.x = (u_xlatb3) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat3.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + _WorldSpaceLightPos0.xyz;
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = max(u_xlat9, 0.00100000005);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = max(u_xlat0.x, 0.319999993);
					    u_xlat0.x = u_xlat0.x * 2.50002503;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = u_xlat0.x * 0.220916301;
					    u_xlat3.xy = vs_TEXCOORD1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD1.xx + u_xlat3.xy;
					    u_xlat3.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD1.zz + u_xlat3.xy;
					    u_xlat3.xy = u_xlat3.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat3.x = texture(_LightTexture0, u_xlat3.xy).w;
					    u_xlat16_1.xyz = u_xlat3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
					    u_xlat9 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat2.xyz = vec3(u_xlat9) * vs_TEXCOORD0.xyz;
					    u_xlat9 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat9 = vs_TEXCOORD4;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
					#else
					    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9);
					    u_xlat2.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat5.xy = vs_TEXCOORD2.xy / u_xlat2.xx;
					    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
					    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
					    u_xlat5.x = float(1.0) / u_xlat5.x;
					    u_xlat2.x = (-u_xlat2.x) + u_xlat5.x;
					    u_xlat5.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat2.x = u_xlat5.x * abs(u_xlat2.x);
					    u_xlat2.x = max(u_xlat2.x, 0.0);
					    u_xlat0.w = min(u_xlat2.x, _Opacity);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					attribute highp vec4 in_POSITION0;
					attribute highp vec3 in_NORMAL0;
					varying highp vec3 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD4;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					uniform highp sampler2D _CameraDepthTexture;
					uniform lowp sampler2D unity_DitherMask;
					varying highp vec4 vs_TEXCOORD2;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp float u_xlat10_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat10_0 = texture2D(unity_DitherMask, u_xlat0.xy).w;
					    u_xlatb1 = 0.0<unity_LODFade.x;
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat10_0) * u_xlat1.x + unity_LODFade.x;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture2D(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ProjectionParams;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					in highp vec4 in_POSITION0;
					in highp vec3 in_NORMAL0;
					out highp vec3 vs_TEXCOORD0;
					out highp float vs_TEXCOORD4;
					out highp vec3 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat11;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat11 = inversesqrt(u_xlat11);
					    vs_TEXCOORD0.xyz = vec3(u_xlat11) * u_xlat2.xyz;
					    vs_TEXCOORD4 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.y = u_xlat1.y * _ProjectionParams.x;
					    u_xlat2.xzw = u_xlat1.xwy * vec3(0.5, 0.5, 0.5);
					    vs_TEXCOORD2.zw = u_xlat1.zw;
					    vs_TEXCOORD2.xy = u_xlat2.zz + u_xlat2.xw;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD3.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _ZBufferParams;
					uniform 	vec4 unity_LODFade;
					uniform 	float _Depth;
					uniform 	float _Opacity;
					UNITY_LOCATION(0) uniform highp sampler2D _CameraDepthTexture;
					UNITY_LOCATION(1) uniform mediump sampler2D unity_DitherMask;
					in highp vec4 vs_TEXCOORD2;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec2 u_xlat1;
					bool u_xlatb1;
					void main()
					{
					vec4 hlslcc_FragCoord = vec4(gl_FragCoord.xyz, 1.0/gl_FragCoord.w);
					    u_xlat0.xy = hlslcc_FragCoord.xy * vec2(0.25, 0.25);
					    u_xlat16_0 = texture(unity_DitherMask, u_xlat0.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<unity_LODFade.x);
					#else
					    u_xlatb1 = 0.0<unity_LODFade.x;
					#endif
					    u_xlat1.x = (u_xlatb1) ? 1.0 : -1.0;
					    u_xlat0.x = (-u_xlat16_0) * u_xlat1.x + unity_LODFade.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb0 = !!(u_xlat0.x<0.0);
					#else
					    u_xlatb0 = u_xlat0.x<0.0;
					#endif
					    if(u_xlatb0){discard;}
					    u_xlat0.x = vs_TEXCOORD2.w + 9.99999996e-12;
					    u_xlat1.xy = vs_TEXCOORD2.xy / u_xlat0.xx;
					    u_xlat1.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
					    u_xlat1.x = _ZBufferParams.z * u_xlat1.x + _ZBufferParams.w;
					    u_xlat1.x = float(1.0) / u_xlat1.x;
					    u_xlat0.x = (-u_xlat0.x) + u_xlat1.x;
					    u_xlat1.x = _Depth * 0.300000012 + 0.100000001;
					    u_xlat0.x = u_xlat1.x * abs(u_xlat0.x);
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.w = min(u_xlat0.x, _Opacity);
					    u_xlat0.x = float(0.0);
					    u_xlat0.y = float(0.0);
					    u_xlat0.z = float(0.0);
					    SV_Target0 = u_xlat0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "POINT" "_GLOSSYREFLECTIONS_OFF" "_SPECULARHIGHLIGHTS_OFF" }
					"!!GLES3"
				}
			}
		}
	}
	CustomEditor "ASEMaterialInspector"
}