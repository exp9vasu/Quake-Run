Shader "ASESampleShaders/Double Layer Custom Surface" {
	Properties {
		[HideInInspector] __dirty ("", Float) = 1
		_BaseColor1 ("Base Color 1", Vector) = (1,0.9310344,0,0)
		_BaseColor2 ("Base Color 2", Vector) = (1,0.9310344,0,0)
		_BaseMetallic ("Base Metallic", Range(0, 1)) = 0
		_BaseSmoothness ("Base Smoothness", Range(0, 1)) = 0
		_BaseOcclusion ("Base Occlusion", Range(0, 1)) = 0
		_FlakesRGBcolorvariationAmask ("Flakes (RGB = color variation, A = mask)", 2D) = "white" {}
		_FlakeColorVariationAmount ("Flake Color Variation Amount", Range(0, 1)) = 0
		_FlakesColor1 ("Flakes Color 1", Vector) = (1,0.9310344,0,0)
		_FlakesColor2 ("Flakes Color 2", Vector) = (1,0.9310344,0,0)
		_FlakesMetallic ("Flakes Metallic", Range(0, 1)) = 0
		_FlakesSmoothness ("Flakes Smoothness", Range(0, 1)) = 0
		_FlakesNormal ("Flakes Normal", 2D) = "bump" {}
		_FlakesBump ("Flakes Bump", Range(0, 1)) = 0
		_CoatNormal ("Coat Normal", 2D) = "bump" {}
		_CoatBump ("Coat Bump", Range(0, 1)) = 0
		_CoatAmount ("Coat Amount", Range(0, 1)) = 0
		_CoatSmoothness ("Coat Smoothness", Range(0, 1)) = 0
		[HideInInspector] _texcoord ("", 2D) = "white" {}
	}
	SubShader {
		Tags { "IsEmissive" = "true" "QUEUE" = "Geometry+0" "RenderType" = "Opaque" }
		Pass {
			Name "FORWARD"
			Tags { "IsEmissive" = "true" "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "Geometry+0" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 12370
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_9;
					lowp vec3 u_xlat10_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat10_4.xyz = texture2D(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat10_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat10_3.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_3.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + 1.0;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_3.w * u_xlat27 + _BaseSmoothness;
					    u_xlat16_33 = u_xlat16_33 + u_xlat27;
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat3.x = u_xlat29;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat12.xyz = u_xlat16_10.xyz * (-vec3(u_xlat29)) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_33 = (-u_xlat3.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_7.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_8.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_8.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_33 = (-u_xlat27) + 1.0;
					    u_xlat4.z = (-u_xlat27) + 1.0;
					    u_xlat27 = texture2D(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat27);
					    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;
					    u_xlat16_32 = (-u_xlat16_33) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_33;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_0.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(u_xlat16_32);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat9.xxx * u_xlat16_8.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat9.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_9.xyz = texture2D(_CoatNormal, u_xlat9.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_9.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat9.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat9.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(u_xlat16_32);
					    u_xlat16_9.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
					    u_xlat16_9.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat1.x;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_9.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_9.x = dot(u_xlat16_9.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat16_9.xxx * _LightColor0.xyz;
					    u_xlat9.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat1.x = u_xlat9.x * u_xlat9.x;
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_32 = _CoatSmoothness + 1.0;
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					    u_xlat16_32 = u_xlat16_32 + -1.0;
					    u_xlat16_32 = u_xlat16_9.x * u_xlat16_32 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat9.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat9.x = u_xlat9.x * 16.0;
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat10_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat10_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + 1.0;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseSmoothness;
					    u_xlat16_33 = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat3.x = u_xlat29;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat12.xyz = u_xlat16_10.xyz * (-vec3(u_xlat29)) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_33 = (-u_xlat3.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_7.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_8.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_8.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_33 = (-u_xlat27) + 1.0;
					    u_xlat4.z = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat27);
					    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;
					    u_xlat16_32 = (-u_xlat16_33) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_33;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_0.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat9.xxx * u_xlat16_8.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat9.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_9.xyz = texture(_CoatNormal, u_xlat9.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat9.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_32);
					    u_xlat16_9.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
					    u_xlat16_9.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_9.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_9.x = dot(u_xlat16_9.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
					#else
					    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_9.xxx * _LightColor0.xyz;
					    u_xlat9.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat1.x = u_xlat9.x * u_xlat9.x;
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_32 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_32 = u_xlat16_32 + -1.0;
					    u_xlat16_32 = u_xlat16_9.x * u_xlat16_32 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat9.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat9.x = u_xlat9.x * 16.0;
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_4.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat10_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_3.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_3.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_35) + 1.0;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat10_3.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_35 = u_xlat16_36 + u_xlat0.x;
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_35);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz;
					    u_xlat11.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat21.x = u_xlat11.x;
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat11.x = u_xlat11.x + u_xlat11.x;
					    u_xlat4.xyz = u_xlat16_10.xyz * (-u_xlat11.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat21.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_35 = (-u_xlat0.x) + 1.0;
					    u_xlat4.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_36;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_3.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_3.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat10_0.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_9.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;
					    u_xlat16_3.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_3);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_3);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_3);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_1.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_35 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_10.xyz = texture2D(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat10_1.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(u_xlat16_35);
					    u_xlat16_10.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_35 = _CoatSmoothness + 1.0;
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_35 + -1.0;
					    u_xlat16_35 = u_xlat16_10.x * u_xlat16_35 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_6.xyz = u_xlat10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat10_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat10_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_3.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_35) + 1.0;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_3.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_35 = u_xlat16_36 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_35);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz;
					    u_xlat11.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat21.x = u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat11.x + u_xlat11.x;
					    u_xlat4.xyz = u_xlat16_10.xyz * (-u_xlat11.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat21.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_35 = (-u_xlat0.x) + 1.0;
					    u_xlat4.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_36;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_3.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_3.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_0.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_9.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;
					    u_xlat16_3.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_3);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_3);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_3);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_1.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_35 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_1.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);
					    u_xlat16_10.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_35 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_35 + -1.0;
					    u_xlat16_35 = u_xlat16_10.x * u_xlat16_35 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_6.xyz = u_xlat10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat16 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					bool u_xlatb20;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat10_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat11.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11.x = u_xlat10_4.w * u_xlat11.x + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat11.x;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_21 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_9.xyz;
					    u_xlat21.x = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat21.x;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat21.x = u_xlat21.x + u_xlat21.x;
					    u_xlat5.xyz = u_xlat16_4.xyz * (-u_xlat21.xxx) + u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat32 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat4.x = u_xlat32 * u_xlat32;
					    u_xlat16_6.x = (-u_xlat31) + 1.0;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat31 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_9.xyz * (-vec3(u_xlat31)) + (-u_xlat2.xyz);
					    u_xlat16_37 = (-u_xlat11.x) + 1.0;
					    u_xlat4.z = (-u_xlat11.x) + 1.0;
					    u_xlat11.x = texture2D(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat11.x = u_xlat11.x * 16.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat11.xxx;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_4.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat20 = (-u_xlat10.x) + u_xlat30;
					    u_xlat10.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb20 = vs_TEXCOORD6.z<u_xlat20;
					    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
					    u_xlat20 = max(u_xlat20, _LightShadowData.x);
					    u_xlat16_36 = (-u_xlat20) + 1.0;
					    u_xlat16_36 = u_xlat10.x * u_xlat16_36 + u_xlat20;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = vec3(u_xlat16_21) * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_10.xyz = texture2D(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat16 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat10_6.xyz = texture2D(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat10_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat10_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat10_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb12 = vs_TEXCOORD6.z<u_xlat12.x;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = max(u_xlat12.x, _LightShadowData.x);
					    u_xlat16_40 = (-u_xlat12.x) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_40 + u_xlat12.x;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_12.xyz = texture2D(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat10_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat16 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat10_6.xyz = texture2D(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat10_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat10_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat10_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb12 = vs_TEXCOORD6.z<u_xlat12.x;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = max(u_xlat12.x, _LightShadowData.x);
					    u_xlat16_40 = (-u_xlat12.x) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_40 + u_xlat12.x;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_12.xyz = texture2D(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat10_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat11.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_21 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_9.xyz;
					    u_xlat21.x = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat21.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x + u_xlat21.x;
					    u_xlat5.xyz = u_xlat16_4.xyz * (-u_xlat21.xxx) + u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat4.x = u_xlat32 * u_xlat32;
					    u_xlat16_6.x = (-u_xlat31) + 1.0;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat31 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_9.xyz * (-vec3(u_xlat31)) + (-u_xlat2.xyz);
					    u_xlat16_37 = (-u_xlat11.x) + 1.0;
					    u_xlat4.z = (-u_xlat11.x) + 1.0;
					    u_xlat11.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat11.x = u_xlat11.x * 16.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat11.xxx;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_4.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat20 = (-u_xlat10.x) + u_xlat30;
					    u_xlat10.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyw = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyw;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.w);
					    u_xlat16_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_20 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat10.x * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = vec3(u_xlat16_21) * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
					    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
					    u_xlat16_1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat10_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_8.xyz = u_xlat0.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat10_4.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_36 = u_xlat16_37 + u_xlat0.x;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_10.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_11.xyz = u_xlat16_10.xxx * u_xlat16_4.xyz;
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat16_11.xyz);
					    u_xlat20 = u_xlat10.x;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat5.xyz = u_xlat16_11.xyz * (-u_xlat10.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat11.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat5.x = u_xlat11.x * u_xlat11.x;
					    u_xlat16_6.x = (-u_xlat20) + 1.0;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_6.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat0.x) + 1.0;
					    u_xlat5.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat11.xyz = u_xlat16_4.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat11.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_5.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_5.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat20 = (-u_xlat0.x) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat20 = u_xlat20 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_9.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_1.xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat30 = (-u_xlat20) + u_xlat30;
					    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat20;
					    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat30 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb30 = vs_TEXCOORD6.z<u_xlat30;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = max(u_xlat30, _LightShadowData.x);
					    u_xlat16_36 = (-u_xlat30) + 1.0;
					    u_xlat16_36 = u_xlat20 * u_xlat16_36 + u_xlat30;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_10.xyz = texture2D(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
					    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
					    u_xlat16_1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat20;
					float u_xlat21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat1.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat1.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat30 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_6 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat10_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat13.xyz;
					    u_xlat1.xyz = u_xlat10_6.www * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat16_8.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat16_32);
					    u_xlat16_32 = (-u_xlat16_32) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat1.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat1.x = u_xlat10_6.w * u_xlat1.x + _BaseSmoothness;
					    u_xlat11.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat21 = u_xlat30 * u_xlat21;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat16_37 = u_xlat11.x * u_xlat31;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat11.x = u_xlat34 * u_xlat11.x + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat21;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat11.xyz = u_xlat16_2.xyz * u_xlat11.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat11.xyz = u_xlat11.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_32 = u_xlat16_32 + u_xlat1.x;
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_32);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat1.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat1.xxx) + (-u_xlat4.xyz);
					    u_xlat16_32 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_13.xyz = texture2D(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat31 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat31)) + (-u_xlat4.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat31 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat31 * u_xlat31;
					    u_xlat16_32 = u_xlat31 * u_xlat13.x;
					    u_xlat31 = u_xlat31 * u_xlat31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_32 = (-u_xlat16_32) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);
					    u_xlat16_31 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_31 = inversesqrt(u_xlat16_31);
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz;
					    u_xlat31 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16_32 = (-u_xlat31) + 1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					vec3 u_xlat4;
					mediump float u_xlat16_5;
					mediump vec3 u_xlat16_6;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.wxy;
					    u_xlat4.xyz = u_xlat3.ywx * u_xlat2.yzx + (-u_xlat4.xyz);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
					    vs_TEXCOORD1.y = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat4.y;
					    vs_TEXCOORD3.y = u_xlat4.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_5 = u_xlat3.y * u_xlat3.y;
					    u_xlat16_5 = u_xlat3.x * u_xlat3.x + (-u_xlat16_5);
					    u_xlat16_1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_5) + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat20;
					float u_xlat21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat1.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat1.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat30 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_6 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat10_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat13.xyz;
					    u_xlat1.xyz = u_xlat10_6.www * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat16_8.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat16_32);
					    u_xlat16_32 = (-u_xlat16_32) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat1.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat1.x = u_xlat10_6.w * u_xlat1.x + _BaseSmoothness;
					    u_xlat11.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat21 = u_xlat30 * u_xlat21;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat16_37 = u_xlat11.x * u_xlat31;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat11.x = u_xlat34 * u_xlat11.x + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat21;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat11.xyz = u_xlat16_2.xyz * u_xlat11.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat11.xyz = u_xlat11.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_32 = u_xlat16_32 + u_xlat1.x;
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_32);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat1.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat1.xxx) + (-u_xlat4.xyz);
					    u_xlat16_32 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_13.xyz = texture2D(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat31 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat31)) + (-u_xlat4.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat31 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat31 * u_xlat31;
					    u_xlat16_32 = u_xlat31 * u_xlat13.x;
					    u_xlat31 = u_xlat31 * u_xlat31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_32 = (-u_xlat16_32) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);
					    u_xlat16_31 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_31 = inversesqrt(u_xlat16_31);
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz;
					    u_xlat31 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16_32 = (-u_xlat31) + 1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_8.xyz = u_xlat0.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_4.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_36 = u_xlat16_37 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_10.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_11.xyz = u_xlat16_10.xxx * u_xlat16_4.xyz;
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat16_11.xyz);
					    u_xlat20 = u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat5.xyz = u_xlat16_11.xyz * (-u_xlat10.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat5.x = u_xlat11.x * u_xlat11.x;
					    u_xlat16_6.x = (-u_xlat20) + 1.0;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_6.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat0.x) + 1.0;
					    u_xlat5.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat11.xyz = u_xlat16_4.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_5.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat20 = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat20 = u_xlat20 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_9.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_1.xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat30 = (-u_xlat20) + u_xlat30;
					    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat20;
					    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_30 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat20 * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_9;
					lowp vec3 u_xlat10_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat10_4.xyz = texture2D(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat10_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat10_3.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_3.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + 1.0;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_3.w * u_xlat27 + _BaseSmoothness;
					    u_xlat16_33 = u_xlat16_33 + u_xlat27;
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat3.x = u_xlat29;
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat12.xyz = u_xlat16_10.xyz * (-vec3(u_xlat29)) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_33 = (-u_xlat3.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_7.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_8.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_8.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_33 = (-u_xlat27) + 1.0;
					    u_xlat4.z = (-u_xlat27) + 1.0;
					    u_xlat27 = texture2D(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat27);
					    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;
					    u_xlat16_32 = (-u_xlat16_33) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_33;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_0.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(u_xlat16_32);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat9.xxx * u_xlat16_8.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat9.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_9.xyz = texture2D(_CoatNormal, u_xlat9.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_9.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat9.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat9.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(u_xlat16_32);
					    u_xlat16_9.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
					    u_xlat16_9.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat1.x;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_9.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_9.x = dot(u_xlat16_9.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat16_9.xxx * _LightColor0.xyz;
					    u_xlat9.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat1.x = u_xlat9.x * u_xlat9.x;
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_32 = _CoatSmoothness + 1.0;
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					    u_xlat16_32 = u_xlat16_32 + -1.0;
					    u_xlat16_32 = u_xlat16_9.x * u_xlat16_32 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat9.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat9.x = u_xlat9.x * 16.0;
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat10_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat10_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat10_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + 1.0;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseSmoothness;
					    u_xlat16_33 = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat3.x = u_xlat29;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat12.xyz = u_xlat16_10.xyz * (-vec3(u_xlat29)) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_33 = (-u_xlat3.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_7.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_8.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_8.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_33 = (-u_xlat27) + 1.0;
					    u_xlat4.z = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat27);
					    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;
					    u_xlat16_32 = (-u_xlat16_33) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_33;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_0.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat9.xxx * u_xlat16_8.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat9.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_9.xyz = texture(_CoatNormal, u_xlat9.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat9.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_32);
					    u_xlat16_9.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
					    u_xlat16_9.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_9.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_9.x = dot(u_xlat16_9.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
					#else
					    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_9.xxx * _LightColor0.xyz;
					    u_xlat9.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat1.x = u_xlat9.x * u_xlat9.x;
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_32 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_32 = u_xlat16_32 + -1.0;
					    u_xlat16_32 = u_xlat16_9.x * u_xlat16_32 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat9.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat9.x = u_xlat9.x * 16.0;
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					lowp vec3 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_4.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat10_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_3.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_3.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_35) + 1.0;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat10_3.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_35 = u_xlat16_36 + u_xlat0.x;
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_35);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz;
					    u_xlat11.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat21.x = u_xlat11.x;
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					    u_xlat11.x = u_xlat11.x + u_xlat11.x;
					    u_xlat4.xyz = u_xlat16_10.xyz * (-u_xlat11.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat21.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_35 = (-u_xlat0.x) + 1.0;
					    u_xlat4.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_36;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_3.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_3.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat10_0.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_9.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;
					    u_xlat16_3.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_3);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_3);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_3);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_1.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_35 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_10.xyz = texture2D(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat10_1.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(u_xlat16_35);
					    u_xlat16_10.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_35 = _CoatSmoothness + 1.0;
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat16_35 = u_xlat16_35 + -1.0;
					    u_xlat16_35 = u_xlat16_10.x * u_xlat16_35 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_6.xyz = u_xlat10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat10_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat10_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_3.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_35) + 1.0;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_3.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_35 = u_xlat16_36 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_35);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz;
					    u_xlat11.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat21.x = u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat11.x + u_xlat11.x;
					    u_xlat4.xyz = u_xlat16_10.xyz * (-u_xlat11.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat21.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_35 = (-u_xlat0.x) + 1.0;
					    u_xlat4.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_36;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_3.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_3.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_0.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_9.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;
					    u_xlat16_3.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_3);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_3);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_3);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_1.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_35 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_1.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);
					    u_xlat16_10.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_35 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_35 + -1.0;
					    u_xlat16_35 = u_xlat16_10.x * u_xlat16_35 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_6.xyz = u_xlat10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat16 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					bool u_xlatb20;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat10_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat11.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11.x = u_xlat10_4.w * u_xlat11.x + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat11.x;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_21 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_9.xyz;
					    u_xlat21.x = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat21.x;
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat21.x = u_xlat21.x + u_xlat21.x;
					    u_xlat5.xyz = u_xlat16_4.xyz * (-u_xlat21.xxx) + u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat32 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat4.x = u_xlat32 * u_xlat32;
					    u_xlat16_6.x = (-u_xlat31) + 1.0;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat31 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_9.xyz * (-vec3(u_xlat31)) + (-u_xlat2.xyz);
					    u_xlat16_37 = (-u_xlat11.x) + 1.0;
					    u_xlat4.z = (-u_xlat11.x) + 1.0;
					    u_xlat11.x = texture2D(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat11.x = u_xlat11.x * 16.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat11.xxx;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_4.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat20 = (-u_xlat10.x) + u_xlat30;
					    u_xlat10.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					    u_xlat20 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb20 = vs_TEXCOORD6.z<u_xlat20;
					    u_xlat20 = u_xlatb20 ? 1.0 : float(0.0);
					    u_xlat20 = max(u_xlat20, _LightShadowData.x);
					    u_xlat16_36 = (-u_xlat20) + 1.0;
					    u_xlat16_36 = u_xlat10.x * u_xlat16_36 + u_xlat20;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = vec3(u_xlat16_21) * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_10.xyz = texture2D(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat16 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat10_6.xyz = texture2D(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat10_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat10_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat10_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb12 = vs_TEXCOORD6.z<u_xlat12.x;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = max(u_xlat12.x, _LightShadowData.x);
					    u_xlat16_40 = (-u_xlat12.x) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_40 + u_xlat12.x;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_12.xyz = texture2D(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat10_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					float u_xlat16;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat16 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					vec3 u_xlat6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					lowp vec3 u_xlat10_12;
					bool u_xlatb12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat10_6.xyz = texture2D(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat10_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat10_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat10_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat10_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat12.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb12 = vs_TEXCOORD6.z<u_xlat12.x;
					    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
					    u_xlat12.x = max(u_xlat12.x, _LightShadowData.x);
					    u_xlat16_40 = (-u_xlat12.x) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_40 + u_xlat12.x;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_12.xyz = texture2D(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat10_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat10_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat11.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_21 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_9.xyz;
					    u_xlat21.x = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat21.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x + u_xlat21.x;
					    u_xlat5.xyz = u_xlat16_4.xyz * (-u_xlat21.xxx) + u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat4.x = u_xlat32 * u_xlat32;
					    u_xlat16_6.x = (-u_xlat31) + 1.0;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat31 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_9.xyz * (-vec3(u_xlat31)) + (-u_xlat2.xyz);
					    u_xlat16_37 = (-u_xlat11.x) + 1.0;
					    u_xlat4.z = (-u_xlat11.x) + 1.0;
					    u_xlat11.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat11.x = u_xlat11.x * 16.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat11.xxx;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_4.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat20 = (-u_xlat10.x) + u_xlat30;
					    u_xlat10.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyw = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyw;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.w);
					    u_xlat16_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_20 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat10.x * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = vec3(u_xlat16_21) * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat25 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2 = vec4(u_xlat26) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat4 + u_xlat3;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					vec3 u_xlat5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					lowp vec3 u_xlat10_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					bool u_xlatb30;
					float u_xlat31;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat10_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat10_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat10_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_8.xyz = u_xlat0.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat10_4.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_36 = u_xlat16_37 + u_xlat0.x;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_10.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_11.xyz = u_xlat16_10.xxx * u_xlat16_4.xyz;
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat16_11.xyz);
					    u_xlat20 = u_xlat10.x;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat5.xyz = u_xlat16_11.xyz * (-u_xlat10.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat11.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat5.x = u_xlat11.x * u_xlat11.x;
					    u_xlat16_6.x = (-u_xlat20) + 1.0;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_6.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat0.x) + 1.0;
					    u_xlat5.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat11.xyz = u_xlat16_4.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat11.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_5.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat10_5.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat20 = (-u_xlat0.x) + 1.0;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat20 = u_xlat20 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_9.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_1.xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat30 = (-u_xlat20) + u_xlat30;
					    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat20;
					    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					    u_xlat30 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb30 = vs_TEXCOORD6.z<u_xlat30;
					    u_xlat30 = u_xlatb30 ? 1.0 : float(0.0);
					    u_xlat30 = max(u_xlat30, _LightShadowData.x);
					    u_xlat16_36 = (-u_xlat30) + 1.0;
					    u_xlat16_36 = u_xlat20 * u_xlat16_36 + u_xlat30;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_10.xyz = texture2D(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat10_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat25 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2 = vec4(u_xlat26) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat4 + u_xlat3;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat20;
					float u_xlat21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat1.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat1.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat30 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_6 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat10_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat13.xyz;
					    u_xlat1.xyz = u_xlat10_6.www * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat16_8.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat16_32);
					    u_xlat16_32 = (-u_xlat16_32) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat1.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat1.x = u_xlat10_6.w * u_xlat1.x + _BaseSmoothness;
					    u_xlat11.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat21 = u_xlat30 * u_xlat21;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat16_37 = u_xlat11.x * u_xlat31;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat11.x = u_xlat34 * u_xlat11.x + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat21;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat11.xyz = u_xlat16_2.xyz * u_xlat11.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat11.xyz = u_xlat11.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_32 = u_xlat16_32 + u_xlat1.x;
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_32);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat1.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat1.xxx) + (-u_xlat4.xyz);
					    u_xlat16_32 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_13.xyz = texture2D(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat31 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat31)) + (-u_xlat4.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat31 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat31 * u_xlat31;
					    u_xlat16_32 = u_xlat31 * u_xlat13.x;
					    u_xlat31 = u_xlat31 * u_xlat31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_32 = (-u_xlat16_32) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);
					    u_xlat16_31 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_31 = inversesqrt(u_xlat16_31);
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz;
					    u_xlat31 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16_32 = (-u_xlat31) + 1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					float u_xlat26;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat25 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat26 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat26 = inversesqrt(u_xlat26);
					    u_xlat2 = vec4(u_xlat26) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat25) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat4.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat4.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat4.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat4.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat4.yyyy) + unity_4LightPosY0;
					    u_xlat4 = (-u_xlat4.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat4 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat4 * u_xlat4 + u_xlat3;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					lowp vec4 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					lowp vec4 u_xlat10_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					lowp vec3 u_xlat10_13;
					float u_xlat20;
					float u_xlat21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat1.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat1.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat30 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat1.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat1.xyz = u_xlat3.yyy * u_xlat1.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_6 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat10_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat1.xyz) + u_xlat13.xyz;
					    u_xlat1.xyz = u_xlat10_6.www * u_xlat13.xyz + u_xlat1.xyz;
					    u_xlat16_8.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat16_32);
					    u_xlat16_32 = (-u_xlat16_32) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat1.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat1.x = u_xlat10_6.w * u_xlat1.x + _BaseSmoothness;
					    u_xlat11.x = (-u_xlat1.x) + 1.0;
					    u_xlat21 = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat21 = u_xlat30 * u_xlat21;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat16_37 = u_xlat11.x * u_xlat31;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat11.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat11.x = u_xlat34 * u_xlat11.x + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat21;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat11.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat11.xyz = u_xlat16_2.xyz * u_xlat11.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat11.xyz = u_xlat11.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_32 = u_xlat16_32 + u_xlat1.x;
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					    u_xlat16_7.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_32);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat1.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat1.xxx) + (-u_xlat4.xyz);
					    u_xlat16_32 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat1.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat11.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_7.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_13.xyz = texture2D(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat31 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat31)) + (-u_xlat4.xyz);
					    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat13.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat10_5.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(u_xlat16_32);
					    u_xlat31 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat31 * u_xlat31;
					    u_xlat16_32 = u_xlat31 * u_xlat13.x;
					    u_xlat31 = u_xlat31 * u_xlat31 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_32 = (-u_xlat16_32) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32);
					    u_xlat16_31 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_31 = inversesqrt(u_xlat16_31);
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz;
					    u_xlat31 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat16_32 = (-u_xlat31) + 1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat1.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat1.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_8.xyz = u_xlat0.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_4.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_36 = u_xlat16_37 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_10.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_11.xyz = u_xlat16_10.xxx * u_xlat16_4.xyz;
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat16_11.xyz);
					    u_xlat20 = u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat5.xyz = u_xlat16_11.xyz * (-u_xlat10.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat5.x = u_xlat11.x * u_xlat11.x;
					    u_xlat16_6.x = (-u_xlat20) + 1.0;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_6.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat0.x) + 1.0;
					    u_xlat5.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat11.xyz = u_xlat16_4.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_5.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat20 = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat20 = u_xlat20 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_9.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_1.xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat30 = (-u_xlat20) + u_xlat30;
					    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat20;
					    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_30 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat20 * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.z * u_xlat2.y;
					    u_xlat0.x = u_xlat1.y * u_xlat2.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_12;
					mediump float u_xlat16_13;
					vec3 u_xlat14;
					mediump float u_xlat16_14;
					mediump vec3 u_xlat16_20;
					float u_xlat39;
					mediump float u_xlat16_39;
					float u_xlat40;
					float u_xlat42;
					mediump float u_xlat16_45;
					mediump float u_xlat16_46;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_39 = inversesqrt(u_xlat16_39);
					    u_xlat16_5.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat8.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
					    u_xlat40 = u_xlat39;
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat9.xyz = u_xlat16_5.xyz * (-vec3(u_xlat39)) + u_xlat8.xyz;
					    u_xlat16_39 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					    u_xlat16_6.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
					    u_xlat39 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat5.x = u_xlat39 * u_xlat39;
					    u_xlat16_45 = (-u_xlat40) + 1.0;
					    u_xlat16_39 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_39 = u_xlat16_45 * u_xlat16_39;
					    u_xlat16_39 = u_xlat16_45 * u_xlat16_39;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat9.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat9.xyz = u_xlat1.yyy * u_xlat9.xyz + _FlakesColor1.xyz;
					    u_xlat10.xyz = u_xlat10_2.xyz + (-u_xlat9.xyz);
					    u_xlat9.xyz = vec3(_FlakeColorVariationAmount) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat10.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat10.xyz + _BaseColor1.xyz;
					    u_xlat9.xyz = (-u_xlat14.xyz) + u_xlat9.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat9.xyz + u_xlat14.xyz;
					    u_xlat16_11.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat42 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseMetallic;
					    u_xlat16_11.xyz = vec3(u_xlat42) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_45 = (-u_xlat42) * 0.779083729 + 0.779083729;
					    u_xlat16_46 = (-u_xlat16_45) + 1.0;
					    u_xlat42 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseSmoothness;
					    u_xlat16_46 = u_xlat16_46 + u_xlat42;
					    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_11.xyz) + vec3(u_xlat16_46);
					    u_xlat16_12.xyz = vec3(u_xlat16_39) * u_xlat16_12.xyz + u_xlat16_11.xyz;
					    u_xlat39 = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-vec3(u_xlat39)) + (-u_xlat8.xyz);
					    u_xlat16_7.x = (-u_xlat42) + 1.0;
					    u_xlat5.z = (-u_xlat42) + 1.0;
					    u_xlat39 = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat39 = u_xlat39 * 16.0;
					    u_xlat16_20.xyz = u_xlat16_11.xyz * vec3(u_xlat39);
					    u_xlat16_20.xyz = u_xlat14.xyz * vec3(u_xlat16_45) + u_xlat16_20.xyz;
					    u_xlat16_45 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x;
					    u_xlat16_45 = u_xlat16_45 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat9.xyz, u_xlat16_45);
					    u_xlat16_45 = u_xlat10_2.w + -1.0;
					    u_xlat16_45 = unity_SpecCube0_HDR.w * u_xlat16_45 + 1.0;
					    u_xlat16_45 = u_xlat16_45 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_45);
					    u_xlat39 = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat1.x * u_xlat39 + 0.0500000007;
					    u_xlat1.x = (-u_xlat39) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat39 = u_xlat39 * _CoatAmount;
					    u_xlat16_14 = (-vs_COLOR0.x) + 1.0;
					    u_xlat14.x = _BaseOcclusion * u_xlat16_14 + vs_COLOR0.x;
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat14.x;
					    u_xlat16_11.xyz = u_xlat1.xxx * u_xlat16_11.xyz;
					    u_xlat16_11.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz;
					    u_xlat16_6.xyz = u_xlat16_20.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
					    u_xlat16_11.y = dot(u_xlat4.xyz, u_xlat16_7.xyz);
					    u_xlat16_11.z = dot(u_xlat0.xyz, u_xlat16_7.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_45 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_45) * 0.699999988 + 1.70000005;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x;
					    u_xlat16_45 = u_xlat16_45 * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_45);
					    u_xlat16_45 = u_xlat10_1.w + -1.0;
					    u_xlat16_45 = unity_SpecCube0_HDR.w * u_xlat16_45 + 1.0;
					    u_xlat16_45 = u_xlat16_45 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(u_xlat16_45);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat16_0.xyz);
					    u_xlat14.x = u_xlat1.x;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_0.xyz * (-u_xlat1.xxx) + u_xlat8.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_11.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = (-u_xlat14.x) + 1.0;
					    u_xlat16_13 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_13 = u_xlat16_45 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_45 * u_xlat16_13;
					    u_xlat16_45 = _CoatSmoothness + 1.0;
					    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
					    u_xlat16_45 = u_xlat16_45 + -1.0;
					    u_xlat16_45 = u_xlat16_13 * u_xlat16_45 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_45) * u_xlat16_7.xyz;
					    u_xlat0.z = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_11.xyz + u_xlat16_7.xyz;
					    u_xlat16_0.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat16_0.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.z * u_xlat2.y;
					    u_xlat0.x = u_xlat1.y * u_xlat2.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat18;
					mediump vec3 u_xlat16_19;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat39;
					mediump float u_xlat16_39;
					float u_xlat42;
					float u_xlat43;
					mediump float u_xlat16_43;
					float u_xlat44;
					mediump float u_xlat16_45;
					mediump float u_xlat16_46;
					float u_xlat47;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_39 = inversesqrt(u_xlat16_39);
					    u_xlat16_5.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat10.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat10.xyz + _FlakesColor1.xyz;
					    u_xlat11.xyz = u_xlat10_2.xyz + (-u_xlat10.xyz);
					    u_xlat10.xyz = vec3(_FlakeColorVariationAmount) * u_xlat11.xyz + u_xlat10.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat10.xyz = (-u_xlat14.xyz) + u_xlat10.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat10.xyz + u_xlat14.xyz;
					    u_xlat16_19.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat39 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseMetallic;
					    u_xlat16_19.xyz = vec3(u_xlat39) * u_xlat16_19.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_46 = (-u_xlat39) * 0.779083729 + 0.779083729;
					    u_xlat16_12.x = (-u_xlat16_46) + 1.0;
					    u_xlat39 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseSmoothness;
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat39;
					    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_19.xyz) + u_xlat16_12.xxx;
					    u_xlat16_12.xyz = u_xlat16_6.xxx * u_xlat16_12.xyz + u_xlat16_19.xyz;
					    u_xlat42 = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-vec3(u_xlat42)) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat42 = u_xlat1.x * u_xlat1.x;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat1.x = u_xlat1.x * u_xlat42 + 0.0500000007;
					    u_xlat42 = (-u_xlat1.x) + 1.0;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_43 = (-vs_COLOR0.x) + 1.0;
					    u_xlat43 = _BaseOcclusion * u_xlat16_43 + vs_COLOR0.x;
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat1.x = u_xlat1.x * u_xlat43;
					    u_xlat16_7.xyz = vec3(u_xlat42) * u_xlat16_7.xyz;
					    u_xlat42 = u_xlat39 * u_xlat39;
					    u_xlat16_6.x = u_xlat39 * u_xlat42;
					    u_xlat39 = u_xlat39 * u_xlat39 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_12.xyz * u_xlat16_7.xyz;
					    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat43 = max(u_xlat43, 0.00100000005);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
					    u_xlat43 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat43 = max(u_xlat43, 0.319999993);
					    u_xlat39 = u_xlat39 * u_xlat43;
					    u_xlat44 = u_xlat42 * u_xlat42 + -1.0;
					    u_xlat47 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat18.x = u_xlat47 * u_xlat47;
					    u_xlat18.x = u_xlat18.x * u_xlat44 + 1.00001001;
					    u_xlat39 = u_xlat39 * u_xlat18.x;
					    u_xlat39 = u_xlat42 / u_xlat39;
					    u_xlat39 = u_xlat39 + -9.99999975e-05;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = min(u_xlat39, 100.0);
					    u_xlat18.xyz = u_xlat16_19.xyz * vec3(u_xlat39);
					    u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_46) + u_xlat18.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * _LightColor0.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_0.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat43;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_39 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat3.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat14.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.z * u_xlat2.y;
					    u_xlat0.x = u_xlat1.y * u_xlat2.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat18;
					mediump vec3 u_xlat16_19;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat39;
					mediump float u_xlat16_39;
					float u_xlat42;
					float u_xlat43;
					mediump float u_xlat16_43;
					float u_xlat44;
					mediump float u_xlat16_45;
					mediump float u_xlat16_46;
					float u_xlat47;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_39 = inversesqrt(u_xlat16_39);
					    u_xlat16_5.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat10.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat10.xyz + _FlakesColor1.xyz;
					    u_xlat11.xyz = u_xlat10_2.xyz + (-u_xlat10.xyz);
					    u_xlat10.xyz = vec3(_FlakeColorVariationAmount) * u_xlat11.xyz + u_xlat10.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat10.xyz = (-u_xlat14.xyz) + u_xlat10.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat10.xyz + u_xlat14.xyz;
					    u_xlat16_19.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat39 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseMetallic;
					    u_xlat16_19.xyz = vec3(u_xlat39) * u_xlat16_19.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_46 = (-u_xlat39) * 0.779083729 + 0.779083729;
					    u_xlat16_12.x = (-u_xlat16_46) + 1.0;
					    u_xlat39 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseSmoothness;
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat39;
					    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_19.xyz) + u_xlat16_12.xxx;
					    u_xlat16_12.xyz = u_xlat16_6.xxx * u_xlat16_12.xyz + u_xlat16_19.xyz;
					    u_xlat42 = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-vec3(u_xlat42)) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat42 = u_xlat1.x * u_xlat1.x;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat1.x = u_xlat1.x * u_xlat42 + 0.0500000007;
					    u_xlat42 = (-u_xlat1.x) + 1.0;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_43 = (-vs_COLOR0.x) + 1.0;
					    u_xlat43 = _BaseOcclusion * u_xlat16_43 + vs_COLOR0.x;
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat1.x = u_xlat1.x * u_xlat43;
					    u_xlat16_7.xyz = vec3(u_xlat42) * u_xlat16_7.xyz;
					    u_xlat42 = u_xlat39 * u_xlat39;
					    u_xlat16_6.x = u_xlat39 * u_xlat42;
					    u_xlat39 = u_xlat39 * u_xlat39 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_12.xyz * u_xlat16_7.xyz;
					    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat43 = max(u_xlat43, 0.00100000005);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
					    u_xlat43 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat43 = max(u_xlat43, 0.319999993);
					    u_xlat39 = u_xlat39 * u_xlat43;
					    u_xlat44 = u_xlat42 * u_xlat42 + -1.0;
					    u_xlat47 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat18.x = u_xlat47 * u_xlat47;
					    u_xlat18.x = u_xlat18.x * u_xlat44 + 1.00001001;
					    u_xlat39 = u_xlat39 * u_xlat18.x;
					    u_xlat39 = u_xlat42 / u_xlat39;
					    u_xlat39 = u_xlat39 + -9.99999975e-05;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = min(u_xlat39, 100.0);
					    u_xlat18.xyz = u_xlat16_19.xyz * vec3(u_xlat39);
					    u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_46) + u_xlat18.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * _LightColor0.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_0.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat43;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_39 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat3.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat14.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + 1.0;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseSmoothness;
					    u_xlat16_33 = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat3.x = u_xlat29;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat12.xyz = u_xlat16_10.xyz * (-vec3(u_xlat29)) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_33 = (-u_xlat3.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_7.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_8.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_8.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_33 = (-u_xlat27) + 1.0;
					    u_xlat4.z = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat27);
					    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;
					    u_xlat16_32 = (-u_xlat16_33) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_33;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_0.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat9.xxx * u_xlat16_8.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat9.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_9.xyz = texture(_CoatNormal, u_xlat9.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat9.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_32);
					    u_xlat16_9.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
					    u_xlat16_9.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_9.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_9.x = dot(u_xlat16_9.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
					#else
					    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_9.xxx * _LightColor0.xyz;
					    u_xlat9.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat1.x = u_xlat9.x * u_xlat9.x;
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_32 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_32 = u_xlat16_32 + -1.0;
					    u_xlat16_32 = u_xlat16_9.x * u_xlat16_32 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat9.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat9.x = u_xlat9.x * 16.0;
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.x = u_xlat1.y * u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat1.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_3 = u_xlat2.x * u_xlat2.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					lowp vec4 u_xlat10_9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_13;
					vec3 u_xlat14;
					mediump vec3 u_xlat16_14;
					lowp vec3 u_xlat10_14;
					float u_xlat15;
					mediump vec3 u_xlat16_17;
					vec2 u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat42;
					mediump float u_xlat16_44;
					mediump float u_xlat16_45;
					void main()
					{
					    u_xlat0.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat14.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat14.xy);
					    u_xlat10_14.xyz = texture2D(_FlakesNormal, u_xlat14.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.x = u_xlat10_1.w * u_xlat0.x + _BaseMetallic;
					    u_xlat16_44 = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat16_3.x = (-u_xlat16_44) + 1.0;
					    u_xlat14.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat14.x = u_xlat10_1.w * u_xlat14.x + _BaseSmoothness;
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat14.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.x = vs_TEXCOORD1.w;
					    u_xlat5.y = vs_TEXCOORD2.w;
					    u_xlat5.z = vs_TEXCOORD3.w;
					    u_xlat5.xyz = (-u_xlat5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * u_xlat5.xyz;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat28.x = dot(u_xlat6.xyz, u_xlat5.xyz);
					    u_xlat28.xy = (-u_xlat28.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = u_xlat28.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat28.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat16_17.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat1.xyz;
					    u_xlat16_17.xyz = u_xlat0.xxx * u_xlat16_17.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_8.xyz = (-u_xlat16_17.xyz) + u_xlat16_3.xxx;
					    u_xlat1.y = vs_TEXCOORD3.x;
					    u_xlat1.z = vs_TEXCOORD1.x;
					    u_xlat1.x = vs_TEXCOORD2.x;
					    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat6.zxy;
					    u_xlat16_9.xyz = u_xlat6.yzx * u_xlat1.yzx + (-u_xlat16_9.xyz);
					    u_xlat1.xyz = u_xlat16_9.xzy * vs_TEXCOORD2.yyy;
					    u_xlat4.y = u_xlat1.x;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat4.xz = vs_TEXCOORD1.xz;
					    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_2.xyz);
					    u_xlat10.y = u_xlat1.z;
					    u_xlat10.xz = vs_TEXCOORD2.xz;
					    u_xlat16_6.y = dot(u_xlat10.xyz, u_xlat16_2.xyz);
					    u_xlat1.xz = vs_TEXCOORD3.xz;
					    u_xlat16_6.z = dot(u_xlat1.xyz, u_xlat16_2.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_11.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_11.xyz);
					    u_xlat42 = u_xlat0.x;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat12.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + u_xlat5.xyz;
					    u_xlat16_0 = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_44 = (-u_xlat42) + 1.0;
					    u_xlat16_0 = u_xlat16_44 * u_xlat16_44;
					    u_xlat16_0 = u_xlat16_44 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_44 * u_xlat16_0;
					    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_17.xyz;
					    u_xlat16_44 = (-u_xlat14.x) + 1.0;
					    u_xlat11.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat11.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_17.xyz + u_xlat16_7.xyz;
					    u_xlat16_45 = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_45;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat0.x = dot((-u_xlat5.xyz), u_xlat16_6.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyw = u_xlat16_6.xyz * (-u_xlat0.xxx) + (-u_xlat5.xyz);
					    u_xlat10_9 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyw, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_9.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_13.xyz = u_xlat10_9.xyz * vec3(u_xlat16_44);
					    u_xlat0.x = u_xlat28.x * u_xlat28.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat28.x * u_xlat0.x + 0.0500000007;
					    u_xlat14.x = (-u_xlat0.x) + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28.x = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat14.x = u_xlat28.x * u_xlat14.x;
					    u_xlat0.x = u_xlat28.x * u_xlat0.x;
					    u_xlat16_13.xyz = u_xlat14.xxx * u_xlat16_13.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_13.xyz;
					    u_xlat16_6.w = 1.0;
					    u_xlat16_13.x = dot(unity_SHAr, u_xlat16_6);
					    u_xlat16_13.y = dot(unity_SHAg, u_xlat16_6);
					    u_xlat16_13.z = dot(unity_SHAb, u_xlat16_6);
					    u_xlat16_13.xyz = u_xlat16_13.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_11.xyz = log2(u_xlat16_13.xyz);
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat14.xxx * u_xlat16_11.xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_7.xyz;
					    u_xlat14.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_14.xyz = texture2D(_CoatNormal, u_xlat14.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(u_xlat10.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(u_xlat1.xyz, u_xlat16_3.xyz);
					    u_xlat14.x = dot((-u_xlat5.xyz), u_xlat16_7.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat14.xyz = u_xlat16_7.xyz * (-u_xlat14.xxx) + (-u_xlat5.xyz);
					    u_xlat16_44 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_3.x;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat14.xyz, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_1.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_44);
					    u_xlat16_14.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_14.x = inversesqrt(u_xlat16_14.x);
					    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_14.xyz);
					    u_xlat15 = u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_14.xyz * (-u_xlat1.xxx) + u_xlat5.xyz;
					    u_xlat16_14.x = dot(u_xlat16_14.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat16_14.xxx * _LightColor0.xyz;
					    u_xlat14.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat1.x = u_xlat14.x * u_xlat14.x;
					    u_xlat16_44 = (-u_xlat15) + 1.0;
					    u_xlat16_14.x = u_xlat16_44 * u_xlat16_44;
					    u_xlat16_14.x = u_xlat16_44 * u_xlat16_14.x;
					    u_xlat16_14.x = u_xlat16_44 * u_xlat16_14.x;
					    u_xlat16_44 = _CoatSmoothness + 1.0;
					    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
					    u_xlat16_44 = u_xlat16_44 + -1.0;
					    u_xlat16_44 = u_xlat16_14.x * u_xlat16_44 + 1.0;
					    u_xlat16_3.xyz = vec3(u_xlat16_44) * u_xlat16_3.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat14.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat14.x = u_xlat14.x * 16.0;
					    u_xlat16_3.xyz = u_xlat14.xxx * u_xlat16_7.xyz + u_xlat16_3.xyz;
					    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_14.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.x = u_xlat1.y * u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat1.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_3 = u_xlat2.x * u_xlat2.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec2 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat33;
					mediump float u_xlat16_33;
					float u_xlat39;
					float u_xlat42;
					float u_xlat44;
					mediump float u_xlat16_45;
					float u_xlat46;
					mediump float u_xlat16_46;
					mediump float u_xlat16_50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat5.y = u_xlat0.z;
					    u_xlat5.xz = vs_TEXCOORD2.xz;
					    u_xlat16_4.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_4.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat39 = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat1.x * u_xlat39 + 0.0500000007;
					    u_xlat1.x = (-u_xlat39) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat39 = u_xlat39 * _CoatAmount;
					    u_xlat16_27 = (-vs_COLOR0.x) + 1.0;
					    u_xlat27 = _BaseOcclusion * u_xlat16_27 + vs_COLOR0.x;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat27;
					    u_xlat16_6.xyz = u_xlat1.xxx * u_xlat16_7.xyz;
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat1.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat10.xyz = u_xlat10_2.xyz + (-u_xlat7.xyz);
					    u_xlat7.xyz = vec3(_FlakeColorVariationAmount) * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat10.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat10.xyz + _BaseColor1.xyz;
					    u_xlat7.xyz = (-u_xlat14.xyz) + u_xlat7.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat7.xyz + u_xlat14.xyz;
					    u_xlat42 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseMetallic;
					    u_xlat16_45 = (-u_xlat42) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat14.xyz * vec3(u_xlat16_45);
					    u_xlat16_12.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_12.xyz = vec3(u_xlat42) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_45 = (-u_xlat16_45) + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz;
					    u_xlat14.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat14.x = max(u_xlat14.x, 0.00100000005);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * u_xlat8.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat44 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat44 = u_xlat10_2.w * u_xlat44 + _BaseSmoothness;
					    u_xlat7.x = (-u_xlat44) + 1.0;
					    u_xlat20 = u_xlat7.x * u_xlat7.x + 1.5;
					    u_xlat20 = u_xlat42 * u_xlat20;
					    u_xlat16_33 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_33 = inversesqrt(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_33);
					    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat14.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat46 = u_xlat7.x * u_xlat7.x;
					    u_xlat16_50 = u_xlat7.x * u_xlat46;
					    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
					    u_xlat7.x = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat7.x = u_xlat33 * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat20;
					    u_xlat7.x = u_xlat46 / u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + -9.99999975e-05;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = min(u_xlat7.x, 100.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat16_12.xyz + u_xlat16_11.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _LightColor0.xyz;
					    u_xlat16_46 = dot(u_xlat16_8.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat16_8.xyz, u_xlat9.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat16_11.x = (-u_xlat8.x) + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16_46) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_45 + u_xlat44;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_19 = (-u_xlat44) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_12.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_11.xxx * u_xlat16_6.xzw + u_xlat16_12.xyz;
					    u_xlat16_11.x = (-u_xlat16_19) * 0.699999988 + 1.70000005;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_11.x;
					    u_xlat16_19 = u_xlat16_19 * 6.0;
					    u_xlat44 = dot((-u_xlat9.xyz), u_xlat16_4.xyz);
					    u_xlat44 = u_xlat44 + u_xlat44;
					    u_xlat8.xyz = u_xlat16_4.xyz * (-vec3(u_xlat44)) + (-u_xlat9.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_19);
					    u_xlat16_19 = u_xlat10_2.w + -1.0;
					    u_xlat16_19 = unity_SpecCube0_HDR.w * u_xlat16_19 + 1.0;
					    u_xlat16_19 = u_xlat16_19 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_19);
					    u_xlat16_11.xyz = u_xlat1.xxx * u_xlat16_11.xyz;
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50);
					    u_xlat7.xyz = u_xlat16_11.xyz * u_xlat16_6.xzw + u_xlat7.xyz;
					    u_xlat8.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_8.xyz = texture2D(_CoatNormal, u_xlat8.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19 = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19 * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_11.x = _CoatSmoothness + 1.0;
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat16_11.x = u_xlat16_11.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_11.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat14.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_1 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat14.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump float u_xlat16_3;
					mediump vec3 u_xlat16_4;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat0.x = u_xlat1.y * u_xlat2.w;
					    u_xlat0.x = u_xlat2.y * u_xlat1.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.y;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_3 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_3 = u_xlat2.x * u_xlat2.x + (-u_xlat16_3);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec2 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat33;
					mediump float u_xlat16_33;
					float u_xlat39;
					float u_xlat42;
					float u_xlat44;
					mediump float u_xlat16_45;
					float u_xlat46;
					mediump float u_xlat16_46;
					mediump float u_xlat16_50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat5.y = u_xlat0.z;
					    u_xlat5.xz = vs_TEXCOORD2.xz;
					    u_xlat16_4.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_4.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat39 = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat1.x * u_xlat39 + 0.0500000007;
					    u_xlat1.x = (-u_xlat39) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat39 = u_xlat39 * _CoatAmount;
					    u_xlat16_27 = (-vs_COLOR0.x) + 1.0;
					    u_xlat27 = _BaseOcclusion * u_xlat16_27 + vs_COLOR0.x;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat27;
					    u_xlat16_6.xyz = u_xlat1.xxx * u_xlat16_7.xyz;
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat1.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat10.xyz = u_xlat10_2.xyz + (-u_xlat7.xyz);
					    u_xlat7.xyz = vec3(_FlakeColorVariationAmount) * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat10.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat10.xyz + _BaseColor1.xyz;
					    u_xlat7.xyz = (-u_xlat14.xyz) + u_xlat7.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat7.xyz + u_xlat14.xyz;
					    u_xlat42 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseMetallic;
					    u_xlat16_45 = (-u_xlat42) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat14.xyz * vec3(u_xlat16_45);
					    u_xlat16_12.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_12.xyz = vec3(u_xlat42) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_45 = (-u_xlat16_45) + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz;
					    u_xlat14.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat14.x = max(u_xlat14.x, 0.00100000005);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * u_xlat8.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat44 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat44 = u_xlat10_2.w * u_xlat44 + _BaseSmoothness;
					    u_xlat7.x = (-u_xlat44) + 1.0;
					    u_xlat20 = u_xlat7.x * u_xlat7.x + 1.5;
					    u_xlat20 = u_xlat42 * u_xlat20;
					    u_xlat16_33 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_33 = inversesqrt(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_33);
					    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat14.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat46 = u_xlat7.x * u_xlat7.x;
					    u_xlat16_50 = u_xlat7.x * u_xlat46;
					    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
					    u_xlat7.x = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat7.x = u_xlat33 * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat20;
					    u_xlat7.x = u_xlat46 / u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + -9.99999975e-05;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = min(u_xlat7.x, 100.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat16_12.xyz + u_xlat16_11.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _LightColor0.xyz;
					    u_xlat16_46 = dot(u_xlat16_8.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat16_8.xyz, u_xlat9.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat16_11.x = (-u_xlat8.x) + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16_46) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_45 + u_xlat44;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_19 = (-u_xlat44) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_12.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_11.xxx * u_xlat16_6.xzw + u_xlat16_12.xyz;
					    u_xlat16_11.x = (-u_xlat16_19) * 0.699999988 + 1.70000005;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_11.x;
					    u_xlat16_19 = u_xlat16_19 * 6.0;
					    u_xlat44 = dot((-u_xlat9.xyz), u_xlat16_4.xyz);
					    u_xlat44 = u_xlat44 + u_xlat44;
					    u_xlat8.xyz = u_xlat16_4.xyz * (-vec3(u_xlat44)) + (-u_xlat9.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_19);
					    u_xlat16_19 = u_xlat10_2.w + -1.0;
					    u_xlat16_19 = unity_SpecCube0_HDR.w * u_xlat16_19 + 1.0;
					    u_xlat16_19 = u_xlat16_19 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_19);
					    u_xlat16_11.xyz = u_xlat1.xxx * u_xlat16_11.xyz;
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50);
					    u_xlat7.xyz = u_xlat16_11.xyz * u_xlat16_6.xzw + u_xlat7.xyz;
					    u_xlat8.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_8.xyz = texture2D(_CoatNormal, u_xlat8.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19 = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19 * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_11.x = _CoatSmoothness + 1.0;
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat16_11.x = u_xlat16_11.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_11.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat14.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_1 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat14.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_3.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_35) + 1.0;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_3.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_35 = u_xlat16_36 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_35);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz;
					    u_xlat11.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat21.x = u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat11.x + u_xlat11.x;
					    u_xlat4.xyz = u_xlat16_10.xyz * (-u_xlat11.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat21.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_35 = (-u_xlat0.x) + 1.0;
					    u_xlat4.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_36;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_3.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_3.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_0.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_9.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;
					    u_xlat16_3.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_3);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_3);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_3);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_1.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_35 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_1.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);
					    u_xlat16_10.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_35 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_35 + -1.0;
					    u_xlat16_35 = u_xlat16_10.x * u_xlat16_35 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_6.xyz = u_xlat10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = u_xlat1.z * u_xlat2.y;
					    u_xlat13 = u_xlat1.y * u_xlat2.z + (-u_xlat13);
					    u_xlat2.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat13 * u_xlat2.w;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.xy = u_xlat2.yw;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_14;
					vec2 u_xlat15;
					lowp vec3 u_xlat10_15;
					bool u_xlatb15;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat42;
					mediump float u_xlat16_42;
					float u_xlat43;
					mediump float u_xlat16_43;
					float u_xlat45;
					mediump float u_xlat16_45;
					float u_xlat46;
					mediump float u_xlat16_48;
					mediump float u_xlat16_49;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_42 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_42 = inversesqrt(u_xlat16_42);
					    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat9.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat42 = sqrt(u_xlat42);
					    u_xlat43 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat9.xyz;
					    u_xlat43 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
					    u_xlat45 = u_xlat43;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat10.xyz = u_xlat16_5.xyz * (-vec3(u_xlat43)) + u_xlat8.xyz;
					    u_xlat16_43 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
					    u_xlat46 = dot(u_xlat10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat5.x = u_xlat46 * u_xlat46;
					    u_xlat16_6.x = (-u_xlat45) + 1.0;
					    u_xlat16_45 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_45 = u_xlat16_6.x * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_6.x * u_xlat16_45;
					    u_xlat10.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat10.xyz + _FlakesColor1.xyz;
					    u_xlat11.xyz = u_xlat10_2.xyz + (-u_xlat10.xyz);
					    u_xlat10.xyz = vec3(_FlakeColorVariationAmount) * u_xlat11.xyz + u_xlat10.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat10.xyz = u_xlat10_2.www * u_xlat10.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat10.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat15.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat15.x = u_xlat10_2.w * u_xlat15.x + _BaseMetallic;
					    u_xlat16_6.xyz = u_xlat15.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_48 = (-u_xlat15.x) * 0.779083729 + 0.779083729;
					    u_xlat16_49 = (-u_xlat16_48) + 1.0;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat10_2.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat16_49 = u_xlat16_49 + u_xlat15.x;
					    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_49);
					    u_xlat16_12.xyz = vec3(u_xlat16_45) * u_xlat16_12.xyz + u_xlat16_6.xyz;
					    u_xlat16_49 = (-u_xlat15.x) + 1.0;
					    u_xlat5.z = (-u_xlat15.x) + 1.0;
					    u_xlat15.x = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat15.x = u_xlat15.x * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat15.xxx;
					    u_xlat16_6.xyz = u_xlat10.xyz * vec3(u_xlat16_48) + u_xlat16_6.xyz;
					    u_xlat16_48 = (-u_xlat16_49) * 0.699999988 + 1.70000005;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_49;
					    u_xlat16_48 = u_xlat16_48 * 6.0;
					    u_xlat15.x = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat15.xxx) + (-u_xlat8.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_48);
					    u_xlat16_48 = u_xlat10_2.w + -1.0;
					    u_xlat16_48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
					    u_xlat16_48 = u_xlat16_48 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(u_xlat16_48);
					    u_xlat15.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat1.x = u_xlat1.x * u_xlat15.x + 0.0500000007;
					    u_xlat15.x = (-u_xlat1.x) + 1.0;
					    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat15.x = u_xlat29 * u_xlat15.x;
					    u_xlat1.x = u_xlat29 * u_xlat1.x;
					    u_xlat16_7.xyz = u_xlat15.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_12.xyz * u_xlat16_7.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat15.x = dot(u_xlat9.xyz, u_xlat5.xyz);
					    u_xlat42 = u_xlat42 + (-u_xlat15.x);
					    u_xlat42 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat15.x;
					    u_xlat42 = u_xlat42 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat15.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb15 = vs_TEXCOORD6.z<u_xlat15.x;
					    u_xlat15.x = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15.x = max(u_xlat15.x, _LightShadowData.x);
					    u_xlat16_48 = (-u_xlat15.x) + 1.0;
					    u_xlat16_48 = u_xlat42 * u_xlat16_48 + u_xlat15.x;
					    u_xlat16_12.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;
					    u_xlat16_13.xyz = vec3(u_xlat16_43) * u_xlat16_12.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_13.xyz + u_xlat16_7.xyz;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_15.xyz = texture2D(_CoatNormal, u_xlat15.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_13.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.y = dot(u_xlat4.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.z = dot(u_xlat0.xyz, u_xlat16_7.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_13.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_13.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_48 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_48) * 0.699999988 + 1.70000005;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_7.x;
					    u_xlat16_48 = u_xlat16_48 * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_48);
					    u_xlat16_48 = u_xlat10_0.w + -1.0;
					    u_xlat16_48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
					    u_xlat16_48 = u_xlat16_48 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(u_xlat16_48);
					    u_xlat16_0.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_13.xyz;
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat16_0.xyz);
					    u_xlat15.x = u_xlat42;
					    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat3.xyz = u_xlat16_0.xyz * (-vec3(u_xlat42)) + u_xlat8.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_12.xyz = u_xlat16_0.xxx * u_xlat16_12.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_48 = (-u_xlat15.x) + 1.0;
					    u_xlat16_14 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_14 = u_xlat16_48 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_48 * u_xlat16_14;
					    u_xlat16_48 = _CoatSmoothness + 1.0;
					    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
					    u_xlat16_48 = u_xlat16_48 + -1.0;
					    u_xlat16_48 = u_xlat16_14 * u_xlat16_48 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_48) * u_xlat16_7.xyz;
					    u_xlat0.z = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_12.xyz + u_xlat16_7.xyz;
					    u_xlat16_0.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_0.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = u_xlat1.z * u_xlat2.y;
					    u_xlat13 = u_xlat1.y * u_xlat2.z + (-u_xlat13);
					    u_xlat2.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat13 * u_xlat2.w;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.xy = u_xlat2.yw;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					mediump vec3 u_xlat16_20;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat42;
					mediump float u_xlat16_42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					float u_xlat47;
					mediump float u_xlat16_47;
					bool u_xlatb47;
					mediump float u_xlat16_48;
					mediump float u_xlat16_49;
					float u_xlat50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_42 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_42 = inversesqrt(u_xlat16_42);
					    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat9.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat42 = sqrt(u_xlat42);
					    u_xlat43 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat9.xyz;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
					    u_xlat43 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat43) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat12.xyz = u_xlat10_2.xyz + (-u_xlat11.xyz);
					    u_xlat11.xyz = vec3(_FlakeColorVariationAmount) * u_xlat12.xyz + u_xlat11.xyz;
					    u_xlat12.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat1.yyy * u_xlat12.xyz + _BaseColor1.xyz;
					    u_xlat11.xyz = (-u_xlat15.xyz) + u_xlat11.xyz;
					    u_xlat15.xyz = u_xlat10_2.www * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat16_20.xyz = u_xlat15.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat45 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseMetallic;
					    u_xlat16_20.xyz = vec3(u_xlat45) * u_xlat16_20.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_49 = (-u_xlat45) * 0.779083729 + 0.779083729;
					    u_xlat16_13.x = (-u_xlat16_49) + 1.0;
					    u_xlat45 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseSmoothness;
					    u_xlat16_13.x = u_xlat16_13.x + u_xlat45;
					    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					    u_xlat16_13.xyz = (-u_xlat16_20.xyz) + u_xlat16_13.xxx;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * u_xlat16_13.xyz + u_xlat16_20.xyz;
					    u_xlat46 = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat11.xyz = u_xlat16_7.xyz * (-vec3(u_xlat46)) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-u_xlat45) + 1.0;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat11.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat46 = u_xlat1.x * u_xlat1.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat1.x = u_xlat1.x * u_xlat46 + 0.0500000007;
					    u_xlat46 = (-u_xlat1.x) + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_47 = (-vs_COLOR0.x) + 1.0;
					    u_xlat47 = _BaseOcclusion * u_xlat16_47 + vs_COLOR0.x;
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat1.x = u_xlat1.x * u_xlat47;
					    u_xlat16_7.xyz = vec3(u_xlat46) * u_xlat16_7.xyz;
					    u_xlat46 = u_xlat45 * u_xlat45;
					    u_xlat16_6.x = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat11.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat11.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat11.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat47 = dot(u_xlat9.xyz, u_xlat11.xyz);
					    u_xlat42 = u_xlat42 + (-u_xlat47);
					    u_xlat42 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat47;
					    u_xlat42 = u_xlat42 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat47 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb47 = vs_TEXCOORD6.z<u_xlat47;
					    u_xlat47 = u_xlatb47 ? 1.0 : float(0.0);
					    u_xlat47 = max(u_xlat47, _LightShadowData.x);
					    u_xlat16_6.x = (-u_xlat47) + 1.0;
					    u_xlat16_6.x = u_xlat42 * u_xlat16_6.x + u_xlat47;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
					    u_xlat42 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat42 = max(u_xlat42, 0.00100000005);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat9.xyz = vec3(u_xlat42) * u_xlat10.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat45 = u_xlat45 * u_xlat42;
					    u_xlat47 = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat50 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat50 * u_xlat50;
					    u_xlat19.x = u_xlat19.x * u_xlat47 + 1.00001001;
					    u_xlat45 = u_xlat45 * u_xlat19.x;
					    u_xlat45 = u_xlat46 / u_xlat45;
					    u_xlat45 = u_xlat45 + -9.99999975e-05;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = min(u_xlat45, 100.0);
					    u_xlat19.xyz = u_xlat16_20.xyz * vec3(u_xlat45);
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat16_49) + u_xlat19.xyz;
					    u_xlat15.xyz = u_xlat16_13.xyz * u_xlat15.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_20.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_20.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat14 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_48 = u_xlat0.x * u_xlat14;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_48 = (-u_xlat16_48) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48);
					    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_28 = inversesqrt(u_xlat16_28);
					    u_xlat16_3.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_48 = (-u_xlat28) + 1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_42 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat28 * u_xlat0.x;
					    u_xlat0.x = u_xlat14 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_42) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat15.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = u_xlat1.z * u_xlat2.y;
					    u_xlat13 = u_xlat1.y * u_xlat2.z + (-u_xlat13);
					    u_xlat2.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat13 * u_xlat2.w;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.xy = u_xlat2.yw;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					mediump vec3 u_xlat16_20;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat42;
					mediump float u_xlat16_42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					float u_xlat47;
					mediump float u_xlat16_47;
					bool u_xlatb47;
					mediump float u_xlat16_48;
					mediump float u_xlat16_49;
					float u_xlat50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_42 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_42 = inversesqrt(u_xlat16_42);
					    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat9.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat42 = sqrt(u_xlat42);
					    u_xlat43 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat9.xyz;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
					    u_xlat43 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat43) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat12.xyz = u_xlat10_2.xyz + (-u_xlat11.xyz);
					    u_xlat11.xyz = vec3(_FlakeColorVariationAmount) * u_xlat12.xyz + u_xlat11.xyz;
					    u_xlat12.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat1.yyy * u_xlat12.xyz + _BaseColor1.xyz;
					    u_xlat11.xyz = (-u_xlat15.xyz) + u_xlat11.xyz;
					    u_xlat15.xyz = u_xlat10_2.www * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat16_20.xyz = u_xlat15.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat45 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseMetallic;
					    u_xlat16_20.xyz = vec3(u_xlat45) * u_xlat16_20.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_49 = (-u_xlat45) * 0.779083729 + 0.779083729;
					    u_xlat16_13.x = (-u_xlat16_49) + 1.0;
					    u_xlat45 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseSmoothness;
					    u_xlat16_13.x = u_xlat16_13.x + u_xlat45;
					    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					    u_xlat16_13.xyz = (-u_xlat16_20.xyz) + u_xlat16_13.xxx;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * u_xlat16_13.xyz + u_xlat16_20.xyz;
					    u_xlat46 = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat11.xyz = u_xlat16_7.xyz * (-vec3(u_xlat46)) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-u_xlat45) + 1.0;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat11.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat46 = u_xlat1.x * u_xlat1.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat1.x = u_xlat1.x * u_xlat46 + 0.0500000007;
					    u_xlat46 = (-u_xlat1.x) + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_47 = (-vs_COLOR0.x) + 1.0;
					    u_xlat47 = _BaseOcclusion * u_xlat16_47 + vs_COLOR0.x;
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat1.x = u_xlat1.x * u_xlat47;
					    u_xlat16_7.xyz = vec3(u_xlat46) * u_xlat16_7.xyz;
					    u_xlat46 = u_xlat45 * u_xlat45;
					    u_xlat16_6.x = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat11.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat11.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat11.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat47 = dot(u_xlat9.xyz, u_xlat11.xyz);
					    u_xlat42 = u_xlat42 + (-u_xlat47);
					    u_xlat42 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat47;
					    u_xlat42 = u_xlat42 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat47 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb47 = vs_TEXCOORD6.z<u_xlat47;
					    u_xlat47 = u_xlatb47 ? 1.0 : float(0.0);
					    u_xlat47 = max(u_xlat47, _LightShadowData.x);
					    u_xlat16_6.x = (-u_xlat47) + 1.0;
					    u_xlat16_6.x = u_xlat42 * u_xlat16_6.x + u_xlat47;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
					    u_xlat42 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat42 = max(u_xlat42, 0.00100000005);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat9.xyz = vec3(u_xlat42) * u_xlat10.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat45 = u_xlat45 * u_xlat42;
					    u_xlat47 = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat50 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat50 * u_xlat50;
					    u_xlat19.x = u_xlat19.x * u_xlat47 + 1.00001001;
					    u_xlat45 = u_xlat45 * u_xlat19.x;
					    u_xlat45 = u_xlat46 / u_xlat45;
					    u_xlat45 = u_xlat45 + -9.99999975e-05;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = min(u_xlat45, 100.0);
					    u_xlat19.xyz = u_xlat16_20.xyz * vec3(u_xlat45);
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat16_49) + u_xlat19.xyz;
					    u_xlat15.xyz = u_xlat16_13.xyz * u_xlat15.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_20.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_20.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat14 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_48 = u_xlat0.x * u_xlat14;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_48 = (-u_xlat16_48) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48);
					    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_28 = inversesqrt(u_xlat16_28);
					    u_xlat16_3.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_48 = (-u_xlat28) + 1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_42 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat28 * u_xlat0.x;
					    u_xlat0.x = u_xlat14 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_42) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat15.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat11.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_21 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_9.xyz;
					    u_xlat21.x = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat21.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x + u_xlat21.x;
					    u_xlat5.xyz = u_xlat16_4.xyz * (-u_xlat21.xxx) + u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat4.x = u_xlat32 * u_xlat32;
					    u_xlat16_6.x = (-u_xlat31) + 1.0;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat31 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_9.xyz * (-vec3(u_xlat31)) + (-u_xlat2.xyz);
					    u_xlat16_37 = (-u_xlat11.x) + 1.0;
					    u_xlat4.z = (-u_xlat11.x) + 1.0;
					    u_xlat11.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat11.x = u_xlat11.x * 16.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat11.xxx;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_4.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat20 = (-u_xlat10.x) + u_xlat30;
					    u_xlat10.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyw = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyw;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.w);
					    u_xlat16_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_20 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat10.x * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = vec3(u_xlat16_21) * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat33 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat33 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat1.x = u_xlat2.y * u_xlat3.w;
					    u_xlat1.x = u_xlat3.y * u_xlat2.z + (-u_xlat1.x);
					    u_xlat1.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat1.w * u_xlat1.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.yw = u_xlat1.wy;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat3.y * u_xlat3.y;
					    u_xlat16_4 = u_xlat3.x * u_xlat3.x + (-u_xlat16_4);
					    u_xlat16_1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					lowp vec4 u_xlat10_10;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					lowp vec3 u_xlat10_14;
					float u_xlat15;
					mediump vec3 u_xlat16_17;
					vec3 u_xlat22;
					mediump vec3 u_xlat16_22;
					float u_xlat28;
					float u_xlat42;
					mediump float u_xlat16_42;
					bool u_xlatb42;
					float u_xlat43;
					mediump float u_xlat16_43;
					mediump float u_xlat16_44;
					mediump float u_xlat16_45;
					void main()
					{
					    u_xlat0.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat14.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat14.xy);
					    u_xlat10_14.xyz = texture2D(_FlakesNormal, u_xlat14.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.x = u_xlat10_1.w * u_xlat0.x + _BaseMetallic;
					    u_xlat16_44 = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat16_3.x = (-u_xlat16_44) + 1.0;
					    u_xlat14.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat14.x = u_xlat10_1.w * u_xlat14.x + _BaseSmoothness;
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat14.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat6.x = vs_TEXCOORD1.w;
					    u_xlat6.y = vs_TEXCOORD2.w;
					    u_xlat6.z = vs_TEXCOORD3.w;
					    u_xlat7.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = sqrt(u_xlat28);
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat6.xyz = vec3(u_xlat42) * u_xlat7.xyz;
					    u_xlat42 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat8.xy = (-vec2(u_xlat42)) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = u_xlat8.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat8.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat16_17.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_9.xyz = vec3(u_xlat16_44) * u_xlat1.xyz;
					    u_xlat16_17.xyz = u_xlat0.xxx * u_xlat16_17.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_10.xyz = (-u_xlat16_17.xyz) + u_xlat16_3.xxx;
					    u_xlat1.y = vs_TEXCOORD3.x;
					    u_xlat1.z = vs_TEXCOORD1.x;
					    u_xlat1.x = vs_TEXCOORD2.x;
					    u_xlat16_11.xyz = u_xlat1.xyz * u_xlat5.zxy;
					    u_xlat16_11.xyz = u_xlat5.yzx * u_xlat1.yzx + (-u_xlat16_11.xyz);
					    u_xlat1.xyz = u_xlat16_11.xzy * vs_TEXCOORD2.yyy;
					    u_xlat4.y = u_xlat1.x;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat4.xz = vs_TEXCOORD1.xz;
					    u_xlat16_5.x = dot(u_xlat4.xyz, u_xlat16_2.xyz);
					    u_xlat12.y = u_xlat1.z;
					    u_xlat12.xz = vs_TEXCOORD2.xz;
					    u_xlat16_5.y = dot(u_xlat12.xyz, u_xlat16_2.xyz);
					    u_xlat1.xz = vs_TEXCOORD3.xz;
					    u_xlat16_5.z = dot(u_xlat1.xyz, u_xlat16_2.xyz);
					    u_xlat16_0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_22.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat16_22.xyz);
					    u_xlat42 = u_xlat0.x;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat13.xyz = u_xlat16_22.xyz * (-u_xlat0.xxx) + u_xlat6.xyz;
					    u_xlat16_0.x = dot(u_xlat16_22.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat43 = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat43 = u_xlat43 * u_xlat43;
					    u_xlat13.x = u_xlat43 * u_xlat43;
					    u_xlat16_2.x = (-u_xlat42) + 1.0;
					    u_xlat16_42 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_42 = u_xlat16_2.x * u_xlat16_42;
					    u_xlat16_42 = u_xlat16_2.x * u_xlat16_42;
					    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_10.xyz + u_xlat16_17.xyz;
					    u_xlat16_44 = (-u_xlat14.x) + 1.0;
					    u_xlat13.z = (-u_xlat14.x) + 1.0;
					    u_xlat14.x = texture2D(unity_NHxRoughness, u_xlat13.xz).x;
					    u_xlat14.x = u_xlat14.x * 16.0;
					    u_xlat16_3.xyz = u_xlat14.xxx * u_xlat16_17.xyz + u_xlat16_9.xyz;
					    u_xlat16_45 = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_45;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat14.x = dot((-u_xlat6.xyz), u_xlat16_5.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat22.xyz = u_xlat16_5.xyz * (-u_xlat14.xxx) + (-u_xlat6.xyz);
					    u_xlat10_10 = textureCubeLodEXT(unity_SpecCube0, u_xlat22.xyz, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_10.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_10.xyz * vec3(u_xlat16_44);
					    u_xlat14.x = u_xlat8.x * u_xlat8.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat8.x * u_xlat14.x + 0.0500000007;
					    u_xlat42 = (-u_xlat14.x) + 1.0;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat14.x = u_xlat14.x * _CoatAmount;
					    u_xlat16_43 = (-vs_COLOR0.x) + 1.0;
					    u_xlat43 = _BaseOcclusion * u_xlat16_43 + vs_COLOR0.x;
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat14.x = u_xlat14.x * u_xlat43;
					    u_xlat16_11.xyz = vec3(u_xlat42) * u_xlat16_11.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_11.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_11.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_11.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_11.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_11.xyz = u_xlat16_11.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_8.xyz = log2(u_xlat16_11.xyz);
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_11.xyz = vec3(u_xlat42) * u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
					    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat8.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat8.xyz);
					    u_xlat28 = (-u_xlat42) + u_xlat28;
					    u_xlat28 = unity_ShadowFadeCenterAndType.w * u_xlat28 + u_xlat42;
					    u_xlat28 = u_xlat28 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat42 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb42 = vs_TEXCOORD6.z<u_xlat42;
					    u_xlat42 = u_xlatb42 ? 1.0 : float(0.0);
					    u_xlat42 = max(u_xlat42, _LightShadowData.x);
					    u_xlat16_44 = (-u_xlat42) + 1.0;
					    u_xlat16_44 = u_xlat28 * u_xlat16_44 + u_xlat42;
					    u_xlat16_9.xyz = vec3(u_xlat16_44) * _LightColor0.xyz;
					    u_xlat16_11.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_11.xyz + u_xlat16_2.xyz;
					    u_xlat0.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xzw = texture2D(_CoatNormal, u_xlat0.xz).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
					    u_xlat16_11.y = dot(u_xlat12.xyz, u_xlat16_3.xyz);
					    u_xlat16_11.z = dot(u_xlat1.xyz, u_xlat16_3.xyz);
					    u_xlat0.x = dot((-u_xlat6.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xzw = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat6.xyz);
					    u_xlat16_44 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_3.x;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xzw, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_1.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_44);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat16_0.xzw);
					    u_xlat15 = u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_0.xzw * (-u_xlat1.xxx) + u_xlat6.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_44 = (-u_xlat15) + 1.0;
					    u_xlat16_42 = u_xlat16_44 * u_xlat16_44;
					    u_xlat16_42 = u_xlat16_44 * u_xlat16_42;
					    u_xlat16_42 = u_xlat16_44 * u_xlat16_42;
					    u_xlat16_44 = _CoatSmoothness + 1.0;
					    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
					    u_xlat16_44 = u_xlat16_44 + -1.0;
					    u_xlat16_44 = u_xlat16_42 * u_xlat16_44 + 1.0;
					    u_xlat16_3.xyz = vec3(u_xlat16_44) * u_xlat16_3.xyz;
					    u_xlat0.z = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_3.xyz;
					    u_xlat16_0.xzw = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat14.xxx * u_xlat16_0.xzw + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat1.x = u_xlat2.y * u_xlat3.w;
					    u_xlat1.x = u_xlat3.y * u_xlat2.z + (-u_xlat1.x);
					    u_xlat1.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat1.w * u_xlat1.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.yw = u_xlat1.wy;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat3.y * u_xlat3.y;
					    u_xlat16_4 = u_xlat3.x * u_xlat3.x + (-u_xlat16_4);
					    u_xlat16_1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec4 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump vec3 u_xlat16_14;
					mediump float u_xlat16_15;
					float u_xlat18;
					float u_xlat19;
					mediump vec3 u_xlat16_19;
					float u_xlat30;
					vec2 u_xlat33;
					float u_xlat45;
					float u_xlat46;
					mediump float u_xlat16_47;
					float u_xlat48;
					mediump float u_xlat16_48;
					float u_xlat49;
					mediump float u_xlat16_49;
					mediump float u_xlat16_50;
					float u_xlat51;
					mediump float u_xlat16_51;
					float u_xlat52;
					mediump float u_xlat16_57;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = sqrt(u_xlat45);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat45 = u_xlat45 + (-u_xlat1.x);
					    u_xlat45 = unity_ShadowFadeCenterAndType.w * u_xlat45 + u_xlat1.x;
					    u_xlat45 = u_xlat45 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat45 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = max(u_xlat45, 0.00100000005);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = max(u_xlat45, 0.319999993);
					    u_xlat46 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat3.xy);
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat3.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat46 = u_xlat10_4.w * u_xlat46 + _BaseSmoothness;
					    u_xlat3.x = (-u_xlat46) + 1.0;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + 1.5;
					    u_xlat18 = u_xlat45 * u_xlat18;
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat6.y = vs_TEXCOORD3.x;
					    u_xlat6.z = vs_TEXCOORD1.x;
					    u_xlat6.x = vs_TEXCOORD2.x;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat16_8.xyz = u_xlat6.xyz * u_xlat7.zxy;
					    u_xlat16_8.xyz = u_xlat7.yzx * u_xlat6.yzx + (-u_xlat16_8.xyz);
					    u_xlat33.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat33.xy = (-u_xlat33.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat16_8.xzy * vs_TEXCOORD2.yyy;
					    u_xlat7.y = u_xlat6.x;
					    u_xlat7.xz = vs_TEXCOORD1.xz;
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat9.y = u_xlat6.z;
					    u_xlat9.xz = vs_TEXCOORD2.xz;
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat6.xz = vs_TEXCOORD3.xz;
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat16_51 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_51 = inversesqrt(u_xlat16_51);
					    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_8.xyz;
					    u_xlat51 = dot(u_xlat16_10.xyz, u_xlat1.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = u_xlat3.x * u_xlat3.x;
					    u_xlat16_47 = u_xlat3.x * u_xlat52;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat3.x = u_xlat52 * u_xlat52 + -1.0;
					    u_xlat3.x = u_xlat51 * u_xlat3.x + 1.00001001;
					    u_xlat3.x = u_xlat3.x * u_xlat18;
					    u_xlat3.x = u_xlat52 / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + -9.99999975e-05;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat3.x = min(u_xlat3.x, 100.0);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = u_xlat10_4.www * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat18 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat18 = u_xlat10_4.w * u_xlat18 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_50 = (-u_xlat18) * 0.779083729 + 0.779083729;
					    u_xlat16_12.xyz = u_xlat4.xyz * vec3(u_xlat16_50);
					    u_xlat16_50 = (-u_xlat16_50) + 1.0;
					    u_xlat16_50 = u_xlat46 + u_xlat16_50;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_57 = (-u_xlat46) + 1.0;
					    u_xlat16_13.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_50);
					    u_xlat3.xyw = u_xlat3.xxx * u_xlat16_5.xyz + u_xlat16_12.xyz;
					    u_xlat3.xyw = u_xlat16_2.xyz * u_xlat3.xyw;
					    u_xlat16_8.w = 1.0;
					    u_xlat16_14.x = dot(unity_SHAr, u_xlat16_8);
					    u_xlat16_14.y = dot(unity_SHAg, u_xlat16_8);
					    u_xlat16_14.z = dot(unity_SHAb, u_xlat16_8);
					    u_xlat16_14.xyz = u_xlat16_14.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_14.xyz = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_14.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat46 = u_xlat33.x * u_xlat33.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat33.x * u_xlat46 + 0.0500000007;
					    u_xlat33.x = (-u_xlat46) + 1.0;
					    u_xlat33.x = clamp(u_xlat33.x, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * _CoatAmount;
					    u_xlat16_49 = (-vs_COLOR0.x) + 1.0;
					    u_xlat49 = _BaseOcclusion * u_xlat16_49 + vs_COLOR0.x;
					    u_xlat33.x = u_xlat33.x * u_xlat49;
					    u_xlat46 = u_xlat46 * u_xlat49;
					    u_xlat16_14.xyz = u_xlat33.xxx * u_xlat16_4.xyz;
					    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;
					    u_xlat16_4.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat16_10.xyz, u_xlat0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat16_50 = (-u_xlat19) + 1.0;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_5.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyw = u_xlat3.xyw * u_xlat16_4.xxx + u_xlat16_12.xyz;
					    u_xlat16_50 = (-u_xlat16_57) * 0.699999988 + 1.70000005;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_57;
					    u_xlat16_50 = u_xlat16_50 * 6.0;
					    u_xlat4.x = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-u_xlat4.xxx) + (-u_xlat0.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_50);
					    u_xlat16_50 = u_xlat10_4.w + -1.0;
					    u_xlat16_50 = unity_SpecCube0_HDR.w * u_xlat16_50 + 1.0;
					    u_xlat16_50 = u_xlat16_50 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_50);
					    u_xlat16_8.xyz = u_xlat33.xxx * u_xlat16_8.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
					    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat3.xyw;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat48 = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-vec3(u_xlat48)) + (-u_xlat0.xyz);
					    u_xlat16_47 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_5.x = (-u_xlat16_47) * 0.699999988 + 1.70000005;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_5.x;
					    u_xlat16_47 = u_xlat16_47 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_47);
					    u_xlat16_47 = u_xlat10_4.w + -1.0;
					    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_47);
					    u_xlat48 = (-_CoatSmoothness) + 1.0;
					    u_xlat4.x = u_xlat48 * u_xlat48;
					    u_xlat16_47 = u_xlat48 * u_xlat4.x;
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.5;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_47);
					    u_xlat16_48 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_48 = inversesqrt(u_xlat16_48);
					    u_xlat16_19.xyz = vec3(u_xlat16_48) * u_xlat16_8.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_47 = (-u_xlat0.x) + 1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_50 = _CoatSmoothness + 1.0;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_50 = u_xlat16_50 + -1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_50 + 1.0;
					    u_xlat16_5.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_15 = dot(u_xlat16_19.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat30 = u_xlat4.x * u_xlat4.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat45;
					    u_xlat0.x = u_xlat4.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_15) + u_xlat16_5.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat46) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat45 = vs_TEXCOORD3.y;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat3 = u_xlat1.xxxx * u_xlat3.xyzz;
					    u_xlat1.x = u_xlat2.y * u_xlat3.w;
					    u_xlat1.x = u_xlat3.y * u_xlat2.z + (-u_xlat1.x);
					    u_xlat1.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat1.w * u_xlat1.x;
					    vs_TEXCOORD1.z = u_xlat3.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.yw = u_xlat1.wy;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.z = u_xlat3.y;
					    vs_TEXCOORD3.z = u_xlat3.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat3.y * u_xlat3.y;
					    u_xlat16_4 = u_xlat3.x * u_xlat3.x + (-u_xlat16_4);
					    u_xlat16_1 = u_xlat3.ywzx * u_xlat3;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_1);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_1);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_1);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec4 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump vec3 u_xlat16_14;
					mediump float u_xlat16_15;
					float u_xlat18;
					float u_xlat19;
					mediump vec3 u_xlat16_19;
					float u_xlat30;
					vec2 u_xlat33;
					float u_xlat45;
					float u_xlat46;
					mediump float u_xlat16_47;
					float u_xlat48;
					mediump float u_xlat16_48;
					float u_xlat49;
					mediump float u_xlat16_49;
					mediump float u_xlat16_50;
					float u_xlat51;
					mediump float u_xlat16_51;
					float u_xlat52;
					mediump float u_xlat16_57;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = sqrt(u_xlat45);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat45 = u_xlat45 + (-u_xlat1.x);
					    u_xlat45 = unity_ShadowFadeCenterAndType.w * u_xlat45 + u_xlat1.x;
					    u_xlat45 = u_xlat45 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat45 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = max(u_xlat45, 0.00100000005);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = max(u_xlat45, 0.319999993);
					    u_xlat46 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat3.xy);
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat3.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat46 = u_xlat10_4.w * u_xlat46 + _BaseSmoothness;
					    u_xlat3.x = (-u_xlat46) + 1.0;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + 1.5;
					    u_xlat18 = u_xlat45 * u_xlat18;
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat6.y = vs_TEXCOORD3.x;
					    u_xlat6.z = vs_TEXCOORD1.x;
					    u_xlat6.x = vs_TEXCOORD2.x;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat16_8.xyz = u_xlat6.xyz * u_xlat7.zxy;
					    u_xlat16_8.xyz = u_xlat7.yzx * u_xlat6.yzx + (-u_xlat16_8.xyz);
					    u_xlat33.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat33.xy = (-u_xlat33.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat16_8.xzy * vs_TEXCOORD2.yyy;
					    u_xlat7.y = u_xlat6.x;
					    u_xlat7.xz = vs_TEXCOORD1.xz;
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat9.y = u_xlat6.z;
					    u_xlat9.xz = vs_TEXCOORD2.xz;
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat6.xz = vs_TEXCOORD3.xz;
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat16_51 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_51 = inversesqrt(u_xlat16_51);
					    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_8.xyz;
					    u_xlat51 = dot(u_xlat16_10.xyz, u_xlat1.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = u_xlat3.x * u_xlat3.x;
					    u_xlat16_47 = u_xlat3.x * u_xlat52;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat3.x = u_xlat52 * u_xlat52 + -1.0;
					    u_xlat3.x = u_xlat51 * u_xlat3.x + 1.00001001;
					    u_xlat3.x = u_xlat3.x * u_xlat18;
					    u_xlat3.x = u_xlat52 / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + -9.99999975e-05;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat3.x = min(u_xlat3.x, 100.0);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = u_xlat10_4.www * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat18 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat18 = u_xlat10_4.w * u_xlat18 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_50 = (-u_xlat18) * 0.779083729 + 0.779083729;
					    u_xlat16_12.xyz = u_xlat4.xyz * vec3(u_xlat16_50);
					    u_xlat16_50 = (-u_xlat16_50) + 1.0;
					    u_xlat16_50 = u_xlat46 + u_xlat16_50;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_57 = (-u_xlat46) + 1.0;
					    u_xlat16_13.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_50);
					    u_xlat3.xyw = u_xlat3.xxx * u_xlat16_5.xyz + u_xlat16_12.xyz;
					    u_xlat3.xyw = u_xlat16_2.xyz * u_xlat3.xyw;
					    u_xlat16_8.w = 1.0;
					    u_xlat16_14.x = dot(unity_SHAr, u_xlat16_8);
					    u_xlat16_14.y = dot(unity_SHAg, u_xlat16_8);
					    u_xlat16_14.z = dot(unity_SHAb, u_xlat16_8);
					    u_xlat16_14.xyz = u_xlat16_14.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_14.xyz = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_14.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat46 = u_xlat33.x * u_xlat33.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat33.x * u_xlat46 + 0.0500000007;
					    u_xlat33.x = (-u_xlat46) + 1.0;
					    u_xlat33.x = clamp(u_xlat33.x, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * _CoatAmount;
					    u_xlat16_49 = (-vs_COLOR0.x) + 1.0;
					    u_xlat49 = _BaseOcclusion * u_xlat16_49 + vs_COLOR0.x;
					    u_xlat33.x = u_xlat33.x * u_xlat49;
					    u_xlat46 = u_xlat46 * u_xlat49;
					    u_xlat16_14.xyz = u_xlat33.xxx * u_xlat16_4.xyz;
					    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;
					    u_xlat16_4.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat16_10.xyz, u_xlat0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat16_50 = (-u_xlat19) + 1.0;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_5.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyw = u_xlat3.xyw * u_xlat16_4.xxx + u_xlat16_12.xyz;
					    u_xlat16_50 = (-u_xlat16_57) * 0.699999988 + 1.70000005;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_57;
					    u_xlat16_50 = u_xlat16_50 * 6.0;
					    u_xlat4.x = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-u_xlat4.xxx) + (-u_xlat0.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_50);
					    u_xlat16_50 = u_xlat10_4.w + -1.0;
					    u_xlat16_50 = unity_SpecCube0_HDR.w * u_xlat16_50 + 1.0;
					    u_xlat16_50 = u_xlat16_50 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_50);
					    u_xlat16_8.xyz = u_xlat33.xxx * u_xlat16_8.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
					    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat3.xyw;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat48 = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-vec3(u_xlat48)) + (-u_xlat0.xyz);
					    u_xlat16_47 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_5.x = (-u_xlat16_47) * 0.699999988 + 1.70000005;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_5.x;
					    u_xlat16_47 = u_xlat16_47 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_47);
					    u_xlat16_47 = u_xlat10_4.w + -1.0;
					    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_47);
					    u_xlat48 = (-_CoatSmoothness) + 1.0;
					    u_xlat4.x = u_xlat48 * u_xlat48;
					    u_xlat16_47 = u_xlat48 * u_xlat4.x;
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.5;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_47);
					    u_xlat16_48 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_48 = inversesqrt(u_xlat16_48);
					    u_xlat16_19.xyz = vec3(u_xlat16_48) * u_xlat16_8.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_47 = (-u_xlat0.x) + 1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_50 = _CoatSmoothness + 1.0;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_50 = u_xlat16_50 + -1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_50 + 1.0;
					    u_xlat16_5.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_15 = dot(u_xlat16_19.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat30 = u_xlat4.x * u_xlat4.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat45;
					    u_xlat0.x = u_xlat4.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_15) + u_xlat16_5.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat46) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat45 = vs_TEXCOORD3.y;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_8.xyz = u_xlat0.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_4.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_36 = u_xlat16_37 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_10.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_11.xyz = u_xlat16_10.xxx * u_xlat16_4.xyz;
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat16_11.xyz);
					    u_xlat20 = u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat5.xyz = u_xlat16_11.xyz * (-u_xlat10.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat5.x = u_xlat11.x * u_xlat11.x;
					    u_xlat16_6.x = (-u_xlat20) + 1.0;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_6.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat0.x) + 1.0;
					    u_xlat5.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat11.xyz = u_xlat16_4.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_5.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat20 = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat20 = u_xlat20 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_9.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_1.xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat30 = (-u_xlat20) + u_xlat30;
					    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat20;
					    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_30 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat20 * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					mediump float u_xlat16_4;
					mediump vec3 u_xlat16_5;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2 = u_xlat0.xxxx * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat16_4 = u_xlat2.y * u_xlat2.y;
					    u_xlat16_4 = u_xlat2.x * u_xlat2.x + (-u_xlat16_4);
					    u_xlat16_0 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_0);
					    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_0);
					    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_0);
					    vs_TEXCOORD4.xyz = unity_SHC.xyz * vec3(u_xlat16_4) + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.z * u_xlat2.y;
					    u_xlat0.x = u_xlat1.y * u_xlat2.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_12;
					mediump float u_xlat16_13;
					vec3 u_xlat14;
					mediump float u_xlat16_14;
					mediump vec3 u_xlat16_20;
					float u_xlat39;
					mediump float u_xlat16_39;
					float u_xlat40;
					float u_xlat42;
					mediump float u_xlat16_45;
					mediump float u_xlat16_46;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_39 = inversesqrt(u_xlat16_39);
					    u_xlat16_5.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat8.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
					    u_xlat40 = u_xlat39;
					    u_xlat40 = clamp(u_xlat40, 0.0, 1.0);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat9.xyz = u_xlat16_5.xyz * (-vec3(u_xlat39)) + u_xlat8.xyz;
					    u_xlat16_39 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					    u_xlat16_6.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
					    u_xlat39 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat5.x = u_xlat39 * u_xlat39;
					    u_xlat16_45 = (-u_xlat40) + 1.0;
					    u_xlat16_39 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_39 = u_xlat16_45 * u_xlat16_39;
					    u_xlat16_39 = u_xlat16_45 * u_xlat16_39;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat9.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat9.xyz = u_xlat1.yyy * u_xlat9.xyz + _FlakesColor1.xyz;
					    u_xlat10.xyz = u_xlat10_2.xyz + (-u_xlat9.xyz);
					    u_xlat9.xyz = vec3(_FlakeColorVariationAmount) * u_xlat10.xyz + u_xlat9.xyz;
					    u_xlat10.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat10.xyz + _BaseColor1.xyz;
					    u_xlat9.xyz = (-u_xlat14.xyz) + u_xlat9.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat9.xyz + u_xlat14.xyz;
					    u_xlat16_11.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat42 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseMetallic;
					    u_xlat16_11.xyz = vec3(u_xlat42) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_45 = (-u_xlat42) * 0.779083729 + 0.779083729;
					    u_xlat16_46 = (-u_xlat16_45) + 1.0;
					    u_xlat42 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseSmoothness;
					    u_xlat16_46 = u_xlat16_46 + u_xlat42;
					    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_11.xyz) + vec3(u_xlat16_46);
					    u_xlat16_12.xyz = vec3(u_xlat16_39) * u_xlat16_12.xyz + u_xlat16_11.xyz;
					    u_xlat39 = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat39 = u_xlat39 + u_xlat39;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-vec3(u_xlat39)) + (-u_xlat8.xyz);
					    u_xlat16_7.x = (-u_xlat42) + 1.0;
					    u_xlat5.z = (-u_xlat42) + 1.0;
					    u_xlat39 = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat39 = u_xlat39 * 16.0;
					    u_xlat16_20.xyz = u_xlat16_11.xyz * vec3(u_xlat39);
					    u_xlat16_20.xyz = u_xlat14.xyz * vec3(u_xlat16_45) + u_xlat16_20.xyz;
					    u_xlat16_45 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x;
					    u_xlat16_45 = u_xlat16_45 * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat9.xyz, u_xlat16_45);
					    u_xlat16_45 = u_xlat10_2.w + -1.0;
					    u_xlat16_45 = unity_SpecCube0_HDR.w * u_xlat16_45 + 1.0;
					    u_xlat16_45 = u_xlat16_45 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_45);
					    u_xlat39 = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat1.x * u_xlat39 + 0.0500000007;
					    u_xlat1.x = (-u_xlat39) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat39 = u_xlat39 * _CoatAmount;
					    u_xlat16_14 = (-vs_COLOR0.x) + 1.0;
					    u_xlat14.x = _BaseOcclusion * u_xlat16_14 + vs_COLOR0.x;
					    u_xlat1.x = u_xlat14.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat14.x;
					    u_xlat16_11.xyz = u_xlat1.xxx * u_xlat16_11.xyz;
					    u_xlat16_11.xyz = u_xlat16_12.xyz * u_xlat16_11.xyz;
					    u_xlat16_6.xyz = u_xlat16_20.xyz * u_xlat16_6.xyz + u_xlat16_11.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
					    u_xlat16_11.y = dot(u_xlat4.xyz, u_xlat16_7.xyz);
					    u_xlat16_11.z = dot(u_xlat0.xyz, u_xlat16_7.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_45 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_45) * 0.699999988 + 1.70000005;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x;
					    u_xlat16_45 = u_xlat16_45 * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_45);
					    u_xlat16_45 = u_xlat10_1.w + -1.0;
					    u_xlat16_45 = unity_SpecCube0_HDR.w * u_xlat16_45 + 1.0;
					    u_xlat16_45 = u_xlat16_45 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(u_xlat16_45);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat1.x = dot(u_xlat8.xyz, u_xlat16_0.xyz);
					    u_xlat14.x = u_xlat1.x;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_0.xyz * (-u_xlat1.xxx) + u_xlat8.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_11.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = (-u_xlat14.x) + 1.0;
					    u_xlat16_13 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_13 = u_xlat16_45 * u_xlat16_13;
					    u_xlat16_13 = u_xlat16_45 * u_xlat16_13;
					    u_xlat16_45 = _CoatSmoothness + 1.0;
					    u_xlat16_45 = clamp(u_xlat16_45, 0.0, 1.0);
					    u_xlat16_45 = u_xlat16_45 + -1.0;
					    u_xlat16_45 = u_xlat16_13 * u_xlat16_45 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_45) * u_xlat16_7.xyz;
					    u_xlat0.z = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_11.xyz + u_xlat16_7.xyz;
					    u_xlat16_0.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat16_0.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.z * u_xlat2.y;
					    u_xlat0.x = u_xlat1.y * u_xlat2.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat18;
					mediump vec3 u_xlat16_19;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat39;
					mediump float u_xlat16_39;
					float u_xlat42;
					float u_xlat43;
					mediump float u_xlat16_43;
					float u_xlat44;
					mediump float u_xlat16_45;
					mediump float u_xlat16_46;
					float u_xlat47;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_39 = inversesqrt(u_xlat16_39);
					    u_xlat16_5.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat10.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat10.xyz + _FlakesColor1.xyz;
					    u_xlat11.xyz = u_xlat10_2.xyz + (-u_xlat10.xyz);
					    u_xlat10.xyz = vec3(_FlakeColorVariationAmount) * u_xlat11.xyz + u_xlat10.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat10.xyz = (-u_xlat14.xyz) + u_xlat10.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat10.xyz + u_xlat14.xyz;
					    u_xlat16_19.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat39 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseMetallic;
					    u_xlat16_19.xyz = vec3(u_xlat39) * u_xlat16_19.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_46 = (-u_xlat39) * 0.779083729 + 0.779083729;
					    u_xlat16_12.x = (-u_xlat16_46) + 1.0;
					    u_xlat39 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseSmoothness;
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat39;
					    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_19.xyz) + u_xlat16_12.xxx;
					    u_xlat16_12.xyz = u_xlat16_6.xxx * u_xlat16_12.xyz + u_xlat16_19.xyz;
					    u_xlat42 = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-vec3(u_xlat42)) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat42 = u_xlat1.x * u_xlat1.x;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat1.x = u_xlat1.x * u_xlat42 + 0.0500000007;
					    u_xlat42 = (-u_xlat1.x) + 1.0;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_43 = (-vs_COLOR0.x) + 1.0;
					    u_xlat43 = _BaseOcclusion * u_xlat16_43 + vs_COLOR0.x;
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat1.x = u_xlat1.x * u_xlat43;
					    u_xlat16_7.xyz = vec3(u_xlat42) * u_xlat16_7.xyz;
					    u_xlat42 = u_xlat39 * u_xlat39;
					    u_xlat16_6.x = u_xlat39 * u_xlat42;
					    u_xlat39 = u_xlat39 * u_xlat39 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_12.xyz * u_xlat16_7.xyz;
					    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat43 = max(u_xlat43, 0.00100000005);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
					    u_xlat43 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat43 = max(u_xlat43, 0.319999993);
					    u_xlat39 = u_xlat39 * u_xlat43;
					    u_xlat44 = u_xlat42 * u_xlat42 + -1.0;
					    u_xlat47 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat18.x = u_xlat47 * u_xlat47;
					    u_xlat18.x = u_xlat18.x * u_xlat44 + 1.00001001;
					    u_xlat39 = u_xlat39 * u_xlat18.x;
					    u_xlat39 = u_xlat42 / u_xlat39;
					    u_xlat39 = u_xlat39 + -9.99999975e-05;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = min(u_xlat39, 100.0);
					    u_xlat18.xyz = u_xlat16_19.xyz * vec3(u_xlat39);
					    u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_46) + u_xlat18.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * _LightColor0.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_0.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat43;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_39 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat3.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat14.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = u_xlat1.z * u_xlat2.y;
					    u_xlat0.x = u_xlat1.y * u_xlat2.z + (-u_xlat0.x);
					    u_xlat0.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat0.w * u_xlat0.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.x = u_xlat2.y;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.yw = u_xlat0.wy;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					vec3 u_xlat18;
					mediump vec3 u_xlat16_19;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat39;
					mediump float u_xlat16_39;
					float u_xlat42;
					float u_xlat43;
					mediump float u_xlat16_43;
					float u_xlat44;
					mediump float u_xlat16_45;
					mediump float u_xlat16_46;
					float u_xlat47;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_39 = inversesqrt(u_xlat16_39);
					    u_xlat16_5.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat10.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat10.xyz + _FlakesColor1.xyz;
					    u_xlat11.xyz = u_xlat10_2.xyz + (-u_xlat10.xyz);
					    u_xlat10.xyz = vec3(_FlakeColorVariationAmount) * u_xlat11.xyz + u_xlat10.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat10.xyz = (-u_xlat14.xyz) + u_xlat10.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat10.xyz + u_xlat14.xyz;
					    u_xlat16_19.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat39 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseMetallic;
					    u_xlat16_19.xyz = vec3(u_xlat39) * u_xlat16_19.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_46 = (-u_xlat39) * 0.779083729 + 0.779083729;
					    u_xlat16_12.x = (-u_xlat16_46) + 1.0;
					    u_xlat39 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat39 = u_xlat10_2.w * u_xlat39 + _BaseSmoothness;
					    u_xlat16_12.x = u_xlat16_12.x + u_xlat39;
					    u_xlat16_12.x = clamp(u_xlat16_12.x, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_19.xyz) + u_xlat16_12.xxx;
					    u_xlat16_12.xyz = u_xlat16_6.xxx * u_xlat16_12.xyz + u_xlat16_19.xyz;
					    u_xlat42 = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-vec3(u_xlat42)) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-u_xlat39) + 1.0;
					    u_xlat39 = (-u_xlat39) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat10.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat42 = u_xlat1.x * u_xlat1.x;
					    u_xlat42 = u_xlat42 * u_xlat42;
					    u_xlat1.x = u_xlat1.x * u_xlat42 + 0.0500000007;
					    u_xlat42 = (-u_xlat1.x) + 1.0;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_43 = (-vs_COLOR0.x) + 1.0;
					    u_xlat43 = _BaseOcclusion * u_xlat16_43 + vs_COLOR0.x;
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat1.x = u_xlat1.x * u_xlat43;
					    u_xlat16_7.xyz = vec3(u_xlat42) * u_xlat16_7.xyz;
					    u_xlat42 = u_xlat39 * u_xlat39;
					    u_xlat16_6.x = u_xlat39 * u_xlat42;
					    u_xlat39 = u_xlat39 * u_xlat39 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_12.xyz * u_xlat16_7.xyz;
					    u_xlat43 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat43 = max(u_xlat43, 0.00100000005);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat8.xyz;
					    u_xlat43 = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat43 = max(u_xlat43, 0.319999993);
					    u_xlat39 = u_xlat39 * u_xlat43;
					    u_xlat44 = u_xlat42 * u_xlat42 + -1.0;
					    u_xlat47 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat47 = clamp(u_xlat47, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat18.x = u_xlat47 * u_xlat47;
					    u_xlat18.x = u_xlat18.x * u_xlat44 + 1.00001001;
					    u_xlat39 = u_xlat39 * u_xlat18.x;
					    u_xlat39 = u_xlat42 / u_xlat39;
					    u_xlat39 = u_xlat39 + -9.99999975e-05;
					    u_xlat39 = max(u_xlat39, 0.0);
					    u_xlat39 = min(u_xlat39, 100.0);
					    u_xlat18.xyz = u_xlat16_19.xyz * vec3(u_xlat39);
					    u_xlat14.xyz = u_xlat14.xyz * vec3(u_xlat16_46) + u_xlat18.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * _LightColor0.xyz;
					    u_xlat14.xyz = u_xlat14.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_0.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat43;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_7.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_39 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat3.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_39) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat14.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat14.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_32;
					mediump float u_xlat16_33;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_33 = (-u_xlat16_32) + 1.0;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_3.w * u_xlat27 + _BaseSmoothness;
					    u_xlat16_33 = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
					#else
					    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_33);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat29 = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat3.x = u_xlat29;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
					#else
					    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
					#endif
					    u_xlat29 = u_xlat29 + u_xlat29;
					    u_xlat12.xyz = u_xlat16_10.xyz * (-vec3(u_xlat29)) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_33 = (-u_xlat3.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_33 * u_xlat16_10.x;
					    u_xlat16_7.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_8.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_8.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_33 = (-u_xlat27) + 1.0;
					    u_xlat4.z = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat27);
					    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_6.xyz;
					    u_xlat16_32 = (-u_xlat16_33) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_33;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_0.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(u_xlat16_32);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat9.xxx * u_xlat16_8.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_32 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_32) * 0.699999988 + 1.70000005;
					    u_xlat16_32 = u_xlat16_32 * u_xlat16_6.x;
					    u_xlat16_32 = u_xlat16_32 * 6.0;
					    u_xlat9.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_9.xyz = texture(_CoatNormal, u_xlat9.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat9.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat9.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat9.xyz, u_xlat16_32);
					    u_xlat16_32 = u_xlat16_1.w + -1.0;
					    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;
					    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_32);
					    u_xlat16_9.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.x = inversesqrt(u_xlat16_9.x);
					    u_xlat16_9.xyz = u_xlat16_9.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_9.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_9.x = dot(u_xlat16_9.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_9.x = min(max(u_xlat16_9.x, 0.0), 1.0);
					#else
					    u_xlat16_9.x = clamp(u_xlat16_9.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_9.xxx * _LightColor0.xyz;
					    u_xlat9.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat1.x = u_xlat9.x * u_xlat9.x;
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_32;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_9.x = u_xlat16_32 * u_xlat16_9.x;
					    u_xlat16_32 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
					#else
					    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
					#endif
					    u_xlat16_32 = u_xlat16_32 + -1.0;
					    u_xlat16_32 = u_xlat16_9.x * u_xlat16_32 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat9.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat9.x = u_xlat9.x * 16.0;
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_9.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_16;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					float u_xlat33;
					mediump float u_xlat16_33;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat3.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_7.xyz = vec3(u_xlat30) * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat30 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat30 = u_xlat16_4.w * u_xlat30 + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat30;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_11.x = inversesqrt(u_xlat16_11.x);
					    u_xlat16_11.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz;
					    u_xlat32 = dot(u_xlat16_11.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_6.x = (-u_xlat32) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat32 = dot((-u_xlat3.xyz), u_xlat16_9.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat4.xyz = u_xlat16_9.xyz * (-vec3(u_xlat32)) + (-u_xlat3.xyz);
					    u_xlat16_37 = (-u_xlat30) + 1.0;
					    u_xlat30 = (-u_xlat30) + 1.0;
					    u_xlat16_8.x = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_37 = u_xlat16_37 * u_xlat16_8.x;
					    u_xlat16_37 = u_xlat16_37 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_37);
					    u_xlat16_37 = u_xlat16_4.w + -1.0;
					    u_xlat16_37 = unity_SpecCube0_HDR.w * u_xlat16_37 + 1.0;
					    u_xlat16_37 = u_xlat16_37 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_37);
					    u_xlat32 = u_xlat1.x * u_xlat1.x;
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat1.x = u_xlat1.x * u_xlat32 + 0.0500000007;
					    u_xlat32 = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_33 = (-vs_COLOR0.x) + 1.0;
					    u_xlat33 = _BaseOcclusion * u_xlat16_33 + vs_COLOR0.x;
					    u_xlat32 = u_xlat32 * u_xlat33;
					    u_xlat1.x = u_xlat1.x * u_xlat33;
					    u_xlat16_8.xyz = vec3(u_xlat32) * u_xlat16_8.xyz;
					    u_xlat32 = u_xlat30 * u_xlat30;
					    u_xlat16_37 = u_xlat30 * u_xlat32;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(u_xlat16_37);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = max(u_xlat33, 0.00100000005);
					    u_xlat33 = inversesqrt(u_xlat33);
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33);
					    u_xlat33 = dot(u_xlat16_11.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_11.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_11.x = min(max(u_xlat16_11.x, 0.0), 1.0);
					#else
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat33 * u_xlat33;
					    u_xlat31 = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat30 = u_xlat21.x * u_xlat30;
					    u_xlat30 = u_xlat32 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_7.xyz * vec3(u_xlat30);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xxx + u_xlat16_6.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_16.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_16.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat11.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_4.xyz = texture(_CoatNormal, u_xlat11.xy).xyz;
					    u_xlat16_16.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_16.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_16.xyz);
					    u_xlat30 = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat4.xyz = u_xlat16_7.xyz * (-vec3(u_xlat30)) + (-u_xlat3.xyz);
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_4.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_6.xxx;
					    u_xlat30 = (-_CoatSmoothness) + 1.0;
					    u_xlat11.x = u_xlat30 * u_xlat30;
					    u_xlat16_36 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat30 * u_xlat30 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat31;
					    u_xlat16_36 = (-u_xlat16_36) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_36);
					    u_xlat16_21 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_7.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_36 = (-u_xlat21.x) + 1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_36) * u_xlat16_6.xyz;
					    u_xlat21.x = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat16_31 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x * u_xlat21.x;
					    u_xlat2.x = u_xlat11.x * u_xlat11.x + -1.0;
					    u_xlat21.x = u_xlat21.x * u_xlat2.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat30 = u_xlat11.x / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat2.xyz = vec3(u_xlat30) * _LightColor0.xyz;
					    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat11.xyz = (-u_xlat0.xyz) + u_xlat11.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat11.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2 = vec4(u_xlat21) * u_xlat2.xyzz;
					    u_xlat21 = u_xlat1.y * u_xlat2.w;
					    u_xlat21 = u_xlat2.y * u_xlat1.z + (-u_xlat21);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat21 * u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.xy = u_xlat1.yx;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					lowp vec4 u_xlat10_9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_13;
					vec3 u_xlat14;
					mediump vec3 u_xlat16_14;
					lowp vec3 u_xlat10_14;
					float u_xlat15;
					mediump vec3 u_xlat16_17;
					vec2 u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat42;
					mediump float u_xlat16_44;
					mediump float u_xlat16_45;
					void main()
					{
					    u_xlat0.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat14.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat14.xy);
					    u_xlat10_14.xyz = texture2D(_FlakesNormal, u_xlat14.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.x = u_xlat10_1.w * u_xlat0.x + _BaseMetallic;
					    u_xlat16_44 = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat16_3.x = (-u_xlat16_44) + 1.0;
					    u_xlat14.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat14.x = u_xlat10_1.w * u_xlat14.x + _BaseSmoothness;
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat14.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.x = vs_TEXCOORD1.w;
					    u_xlat5.y = vs_TEXCOORD2.w;
					    u_xlat5.z = vs_TEXCOORD3.w;
					    u_xlat5.xyz = (-u_xlat5.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28.x = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28.x = inversesqrt(u_xlat28.x);
					    u_xlat5.xyz = u_xlat28.xxx * u_xlat5.xyz;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat28.x = dot(u_xlat6.xyz, u_xlat5.xyz);
					    u_xlat28.xy = (-u_xlat28.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = u_xlat28.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat28.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat16_17.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat1.xyz;
					    u_xlat16_17.xyz = u_xlat0.xxx * u_xlat16_17.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_8.xyz = (-u_xlat16_17.xyz) + u_xlat16_3.xxx;
					    u_xlat1.y = vs_TEXCOORD3.x;
					    u_xlat1.z = vs_TEXCOORD1.x;
					    u_xlat1.x = vs_TEXCOORD2.x;
					    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat6.zxy;
					    u_xlat16_9.xyz = u_xlat6.yzx * u_xlat1.yzx + (-u_xlat16_9.xyz);
					    u_xlat1.xyz = u_xlat16_9.xzy * vs_TEXCOORD2.yyy;
					    u_xlat4.y = u_xlat1.x;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat4.xz = vs_TEXCOORD1.xz;
					    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_2.xyz);
					    u_xlat10.y = u_xlat1.z;
					    u_xlat10.xz = vs_TEXCOORD2.xz;
					    u_xlat16_6.y = dot(u_xlat10.xyz, u_xlat16_2.xyz);
					    u_xlat1.xz = vs_TEXCOORD3.xz;
					    u_xlat16_6.z = dot(u_xlat1.xyz, u_xlat16_2.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_11.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat5.xyz, u_xlat16_11.xyz);
					    u_xlat42 = u_xlat0.x;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat12.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + u_xlat5.xyz;
					    u_xlat16_0 = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat11.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_44 = (-u_xlat42) + 1.0;
					    u_xlat16_0 = u_xlat16_44 * u_xlat16_44;
					    u_xlat16_0 = u_xlat16_44 * u_xlat16_0;
					    u_xlat16_0 = u_xlat16_44 * u_xlat16_0;
					    u_xlat16_8.xyz = vec3(u_xlat16_0) * u_xlat16_8.xyz + u_xlat16_17.xyz;
					    u_xlat16_44 = (-u_xlat14.x) + 1.0;
					    u_xlat11.z = (-u_xlat14.x) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat11.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_17.xyz + u_xlat16_7.xyz;
					    u_xlat16_45 = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_45;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat0.x = dot((-u_xlat5.xyz), u_xlat16_6.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyw = u_xlat16_6.xyz * (-u_xlat0.xxx) + (-u_xlat5.xyz);
					    u_xlat10_9 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyw, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_9.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_13.xyz = u_xlat10_9.xyz * vec3(u_xlat16_44);
					    u_xlat0.x = u_xlat28.x * u_xlat28.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat28.x * u_xlat0.x + 0.0500000007;
					    u_xlat14.x = (-u_xlat0.x) + 1.0;
					    u_xlat14.x = clamp(u_xlat14.x, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28.x = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat14.x = u_xlat28.x * u_xlat14.x;
					    u_xlat0.x = u_xlat28.x * u_xlat0.x;
					    u_xlat16_13.xyz = u_xlat14.xxx * u_xlat16_13.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_13.xyz;
					    u_xlat16_6.w = 1.0;
					    u_xlat16_13.x = dot(unity_SHAr, u_xlat16_6);
					    u_xlat16_13.y = dot(unity_SHAg, u_xlat16_6);
					    u_xlat16_13.z = dot(unity_SHAb, u_xlat16_6);
					    u_xlat16_13.xyz = u_xlat16_13.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_13.xyz = max(u_xlat16_13.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_11.xyz = log2(u_xlat16_13.xyz);
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_13.xyz = u_xlat14.xxx * u_xlat16_11.xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat16_7.xyz;
					    u_xlat14.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_14.xyz = texture2D(_CoatNormal, u_xlat14.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(u_xlat10.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(u_xlat1.xyz, u_xlat16_3.xyz);
					    u_xlat14.x = dot((-u_xlat5.xyz), u_xlat16_7.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat14.xyz = u_xlat16_7.xyz * (-u_xlat14.xxx) + (-u_xlat5.xyz);
					    u_xlat16_44 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_3.x;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat14.xyz, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_1.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_44);
					    u_xlat16_14.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_14.x = inversesqrt(u_xlat16_14.x);
					    u_xlat16_14.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, u_xlat16_14.xyz);
					    u_xlat15 = u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_14.xyz * (-u_xlat1.xxx) + u_xlat5.xyz;
					    u_xlat16_14.x = dot(u_xlat16_14.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);
					    u_xlat16_7.xyz = u_xlat16_14.xxx * _LightColor0.xyz;
					    u_xlat14.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat1.x = u_xlat14.x * u_xlat14.x;
					    u_xlat16_44 = (-u_xlat15) + 1.0;
					    u_xlat16_14.x = u_xlat16_44 * u_xlat16_44;
					    u_xlat16_14.x = u_xlat16_44 * u_xlat16_14.x;
					    u_xlat16_14.x = u_xlat16_44 * u_xlat16_14.x;
					    u_xlat16_44 = _CoatSmoothness + 1.0;
					    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
					    u_xlat16_44 = u_xlat16_44 + -1.0;
					    u_xlat16_44 = u_xlat16_14.x * u_xlat16_44 + 1.0;
					    u_xlat16_3.xyz = vec3(u_xlat16_44) * u_xlat16_3.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat14.x = texture2D(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat14.x = u_xlat14.x * 16.0;
					    u_xlat16_3.xyz = u_xlat14.xxx * u_xlat16_7.xyz + u_xlat16_3.xyz;
					    u_xlat16_14.xyz = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_14.xyz + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2 = vec4(u_xlat21) * u_xlat2.xyzz;
					    u_xlat21 = u_xlat1.y * u_xlat2.w;
					    u_xlat21 = u_xlat2.y * u_xlat1.z + (-u_xlat21);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat21 * u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.xy = u_xlat1.yx;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec2 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat33;
					mediump float u_xlat16_33;
					float u_xlat39;
					float u_xlat42;
					float u_xlat44;
					mediump float u_xlat16_45;
					float u_xlat46;
					mediump float u_xlat16_46;
					mediump float u_xlat16_50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat5.y = u_xlat0.z;
					    u_xlat5.xz = vs_TEXCOORD2.xz;
					    u_xlat16_4.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_4.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat39 = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat1.x * u_xlat39 + 0.0500000007;
					    u_xlat1.x = (-u_xlat39) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat39 = u_xlat39 * _CoatAmount;
					    u_xlat16_27 = (-vs_COLOR0.x) + 1.0;
					    u_xlat27 = _BaseOcclusion * u_xlat16_27 + vs_COLOR0.x;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat27;
					    u_xlat16_6.xyz = u_xlat1.xxx * u_xlat16_7.xyz;
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat1.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat10.xyz = u_xlat10_2.xyz + (-u_xlat7.xyz);
					    u_xlat7.xyz = vec3(_FlakeColorVariationAmount) * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat10.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat10.xyz + _BaseColor1.xyz;
					    u_xlat7.xyz = (-u_xlat14.xyz) + u_xlat7.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat7.xyz + u_xlat14.xyz;
					    u_xlat42 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseMetallic;
					    u_xlat16_45 = (-u_xlat42) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat14.xyz * vec3(u_xlat16_45);
					    u_xlat16_12.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_12.xyz = vec3(u_xlat42) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_45 = (-u_xlat16_45) + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz;
					    u_xlat14.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat14.x = max(u_xlat14.x, 0.00100000005);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * u_xlat8.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat44 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat44 = u_xlat10_2.w * u_xlat44 + _BaseSmoothness;
					    u_xlat7.x = (-u_xlat44) + 1.0;
					    u_xlat20 = u_xlat7.x * u_xlat7.x + 1.5;
					    u_xlat20 = u_xlat42 * u_xlat20;
					    u_xlat16_33 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_33 = inversesqrt(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_33);
					    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat14.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat46 = u_xlat7.x * u_xlat7.x;
					    u_xlat16_50 = u_xlat7.x * u_xlat46;
					    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
					    u_xlat7.x = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat7.x = u_xlat33 * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat20;
					    u_xlat7.x = u_xlat46 / u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + -9.99999975e-05;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = min(u_xlat7.x, 100.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat16_12.xyz + u_xlat16_11.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _LightColor0.xyz;
					    u_xlat16_46 = dot(u_xlat16_8.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat16_8.xyz, u_xlat9.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat16_11.x = (-u_xlat8.x) + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16_46) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_45 + u_xlat44;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_19 = (-u_xlat44) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_12.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_11.xxx * u_xlat16_6.xzw + u_xlat16_12.xyz;
					    u_xlat16_11.x = (-u_xlat16_19) * 0.699999988 + 1.70000005;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_11.x;
					    u_xlat16_19 = u_xlat16_19 * 6.0;
					    u_xlat44 = dot((-u_xlat9.xyz), u_xlat16_4.xyz);
					    u_xlat44 = u_xlat44 + u_xlat44;
					    u_xlat8.xyz = u_xlat16_4.xyz * (-vec3(u_xlat44)) + (-u_xlat9.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_19);
					    u_xlat16_19 = u_xlat10_2.w + -1.0;
					    u_xlat16_19 = unity_SpecCube0_HDR.w * u_xlat16_19 + 1.0;
					    u_xlat16_19 = u_xlat16_19 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_19);
					    u_xlat16_11.xyz = u_xlat1.xxx * u_xlat16_11.xyz;
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50);
					    u_xlat7.xyz = u_xlat16_11.xyz * u_xlat16_6.xzw + u_xlat7.xyz;
					    u_xlat8.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_8.xyz = texture2D(_CoatNormal, u_xlat8.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19 = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19 * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_11.x = _CoatSmoothness + 1.0;
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat16_11.x = u_xlat16_11.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_11.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat14.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_1 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat14.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat2 = vec4(u_xlat21) * u_xlat2.xyzz;
					    u_xlat21 = u_xlat1.y * u_xlat2.w;
					    u_xlat21 = u_xlat2.y * u_xlat1.z + (-u_xlat21);
					    u_xlat1.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat21 * u_xlat1.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.xy = u_xlat1.yx;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump float u_xlat16_1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec2 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					lowp vec3 u_xlat10_5;
					mediump vec4 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_8;
					lowp vec3 u_xlat10_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_11;
					mediump vec3 u_xlat16_12;
					float u_xlat13;
					vec3 u_xlat14;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat26;
					mediump float u_xlat16_26;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat33;
					mediump float u_xlat16_33;
					float u_xlat39;
					float u_xlat42;
					float u_xlat44;
					mediump float u_xlat16_45;
					float u_xlat46;
					mediump float u_xlat16_46;
					mediump float u_xlat16_50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_4.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat5.y = u_xlat0.z;
					    u_xlat5.xz = vs_TEXCOORD2.xz;
					    u_xlat16_4.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_4.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_7.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat8.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat39 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat39 = inversesqrt(u_xlat39);
					    u_xlat9.xyz = vec3(u_xlat39) * u_xlat8.xyz;
					    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;
					    u_xlat39 = dot(u_xlat1.xyz, u_xlat9.xyz);
					    u_xlat1.xy = (-vec2(u_xlat39)) + vec2(1.0, 1.04999995);
					    u_xlat39 = u_xlat1.x * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat39;
					    u_xlat39 = u_xlat1.x * u_xlat39 + 0.0500000007;
					    u_xlat1.x = (-u_xlat39) + 1.0;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat39 = u_xlat39 * _CoatAmount;
					    u_xlat16_27 = (-vs_COLOR0.x) + 1.0;
					    u_xlat27 = _BaseOcclusion * u_xlat16_27 + vs_COLOR0.x;
					    u_xlat1.x = u_xlat27 * u_xlat1.x;
					    u_xlat39 = u_xlat39 * u_xlat27;
					    u_xlat16_6.xyz = u_xlat1.xxx * u_xlat16_7.xyz;
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat1.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat10.xyz = u_xlat10_2.xyz + (-u_xlat7.xyz);
					    u_xlat7.xyz = vec3(_FlakeColorVariationAmount) * u_xlat10.xyz + u_xlat7.xyz;
					    u_xlat10.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat14.xyz = u_xlat1.yyy * u_xlat10.xyz + _BaseColor1.xyz;
					    u_xlat7.xyz = (-u_xlat14.xyz) + u_xlat7.xyz;
					    u_xlat14.xyz = u_xlat10_2.www * u_xlat7.xyz + u_xlat14.xyz;
					    u_xlat42 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat42 = u_xlat10_2.w * u_xlat42 + _BaseMetallic;
					    u_xlat16_45 = (-u_xlat42) * 0.779083729 + 0.779083729;
					    u_xlat16_11.xyz = u_xlat14.xyz * vec3(u_xlat16_45);
					    u_xlat16_12.xyz = u_xlat14.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_12.xyz = vec3(u_xlat42) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_45 = (-u_xlat16_45) + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz;
					    u_xlat14.x = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat14.x = max(u_xlat14.x, 0.00100000005);
					    u_xlat14.x = inversesqrt(u_xlat14.x);
					    u_xlat14.xyz = u_xlat14.xxx * u_xlat8.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat14.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat44 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat44 = u_xlat10_2.w * u_xlat44 + _BaseSmoothness;
					    u_xlat7.x = (-u_xlat44) + 1.0;
					    u_xlat20 = u_xlat7.x * u_xlat7.x + 1.5;
					    u_xlat20 = u_xlat42 * u_xlat20;
					    u_xlat16_33 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_33 = inversesqrt(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_33);
					    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat14.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat46 = u_xlat7.x * u_xlat7.x;
					    u_xlat16_50 = u_xlat7.x * u_xlat46;
					    u_xlat16_50 = (-u_xlat16_50) * 0.280000001 + 1.0;
					    u_xlat7.x = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat7.x = u_xlat33 * u_xlat7.x + 1.00001001;
					    u_xlat7.x = u_xlat7.x * u_xlat20;
					    u_xlat7.x = u_xlat46 / u_xlat7.x;
					    u_xlat7.x = u_xlat7.x + -9.99999975e-05;
					    u_xlat7.x = max(u_xlat7.x, 0.0);
					    u_xlat7.x = min(u_xlat7.x, 100.0);
					    u_xlat7.xyz = u_xlat7.xxx * u_xlat16_12.xyz + u_xlat16_11.xyz;
					    u_xlat7.xyz = u_xlat7.xyz * _LightColor0.xyz;
					    u_xlat16_46 = dot(u_xlat16_8.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
					    u_xlat8.x = dot(u_xlat16_8.xyz, u_xlat9.xyz);
					    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
					    u_xlat16_11.x = (-u_xlat8.x) + 1.0;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;
					    u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat16_46) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_45 + u_xlat44;
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					    u_xlat16_19 = (-u_xlat44) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_12.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_11.xxx * u_xlat16_6.xzw + u_xlat16_12.xyz;
					    u_xlat16_11.x = (-u_xlat16_19) * 0.699999988 + 1.70000005;
					    u_xlat16_19 = u_xlat16_19 * u_xlat16_11.x;
					    u_xlat16_19 = u_xlat16_19 * 6.0;
					    u_xlat44 = dot((-u_xlat9.xyz), u_xlat16_4.xyz);
					    u_xlat44 = u_xlat44 + u_xlat44;
					    u_xlat8.xyz = u_xlat16_4.xyz * (-vec3(u_xlat44)) + (-u_xlat9.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_19);
					    u_xlat16_19 = u_xlat10_2.w + -1.0;
					    u_xlat16_19 = unity_SpecCube0_HDR.w * u_xlat16_19 + 1.0;
					    u_xlat16_19 = u_xlat16_19 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_2.xyz * vec3(u_xlat16_19);
					    u_xlat16_11.xyz = u_xlat1.xxx * u_xlat16_11.xyz;
					    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(u_xlat16_50);
					    u_xlat7.xyz = u_xlat16_11.xyz * u_xlat16_6.xzw + u_xlat7.xyz;
					    u_xlat8.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_8.xyz = texture2D(_CoatNormal, u_xlat8.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.y = dot(u_xlat5.xyz, u_xlat16_6.xyz);
					    u_xlat16_11.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat9.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat9.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_19 = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_19 * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat13 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_45 = u_xlat0.x * u_xlat13;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_45 = (-u_xlat16_45) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_45);
					    u_xlat16_26 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_26 = inversesqrt(u_xlat16_26);
					    u_xlat16_3.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_45 = (-u_xlat26) + 1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_45;
					    u_xlat16_11.x = _CoatSmoothness + 1.0;
					    u_xlat16_11.x = clamp(u_xlat16_11.x, 0.0, 1.0);
					    u_xlat16_11.x = u_xlat16_11.x + -1.0;
					    u_xlat16_45 = u_xlat16_45 * u_xlat16_11.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_45) * u_xlat16_6.xyz;
					    u_xlat26 = dot(u_xlat16_3.xyz, u_xlat14.xyz);
					    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
					    u_xlat16_1 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
					    u_xlat26 = u_xlat26 * u_xlat26;
					    u_xlat14.x = u_xlat13 * u_xlat13 + -1.0;
					    u_xlat26 = u_xlat26 * u_xlat14.x + 1.00001001;
					    u_xlat0.x = u_xlat26 * u_xlat0.x;
					    u_xlat0.x = u_xlat13 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_1) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat7.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat39 = vs_TEXCOORD3.y;
					    u_xlat39 = clamp(u_xlat39, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat39) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec4 u_xlat16_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_35;
					mediump float u_xlat16_36;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_4.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat3.xyz = (-u_xlat0.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat3.xyz + u_xlat0.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_3.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_3.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat30) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_36 = (-u_xlat16_35) + 1.0;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_3.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_35 = u_xlat16_36 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_35);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_10.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_3.xyz;
					    u_xlat11.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat21.x = u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21.x = min(max(u_xlat21.x, 0.0), 1.0);
					#else
					    u_xlat21.x = clamp(u_xlat21.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat11.x + u_xlat11.x;
					    u_xlat4.xyz = u_xlat16_10.xyz * (-u_xlat11.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_5.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat4.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat21.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat16_35 = (-u_xlat0.x) + 1.0;
					    u_xlat4.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_36;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_3.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_3.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat0.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_0.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_9.xyz;
					    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_9.xyz;
					    u_xlat16_3.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_3);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_3);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_3);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = u_xlat10.xxx * u_xlat16_1.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_5.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat16_7.xyz;
					    u_xlat16_35 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_6.x = (-u_xlat16_35) * 0.699999988 + 1.70000005;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
					    u_xlat16_35 = u_xlat16_35 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_7.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_7.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_35);
					    u_xlat16_35 = u_xlat16_1.w + -1.0;
					    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;
					    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);
					    u_xlat16_10.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_7.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.xyz = u_xlat16_10.xxx * _LightColor0.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_35 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_35;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_35 * u_xlat16_10.x;
					    u_xlat16_35 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat16_35 = u_xlat16_35 + -1.0;
					    u_xlat16_35 = u_xlat16_10.x * u_xlat16_35 + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_6.xyz = u_xlat10.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_5.xyz) + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_5.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump float u_xlat16_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump vec3 u_xlat16_15;
					float u_xlat18;
					mediump float u_xlat16_18;
					vec2 u_xlat19;
					float u_xlat27;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_33;
					mediump float u_xlat16_34;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = (-vec2(u_xlat27)) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat19.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat19.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat19.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat10.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat10.xyz;
					    u_xlat27 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseMetallic;
					    u_xlat16_33 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_33);
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_8.xyz = vec3(u_xlat27) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_33 = (-u_xlat16_33) + 1.0;
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat9.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_18 = (-vs_COLOR0.x) + 1.0;
					    u_xlat18 = _BaseOcclusion * u_xlat16_18 + vs_COLOR0.x;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat0.x = u_xlat18 * u_xlat0.x;
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_1.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.w = 1.0;
					    u_xlat16_6.x = dot(unity_SHAr, u_xlat16_1);
					    u_xlat16_6.y = dot(unity_SHAg, u_xlat16_1);
					    u_xlat16_6.z = dot(unity_SHAb, u_xlat16_1);
					    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_6.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = u_xlat9.xxx * u_xlat16_4.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat18 = max(u_xlat18, 0.00100000005);
					    u_xlat18 = inversesqrt(u_xlat18);
					    u_xlat2.xyz = vec3(u_xlat18) * u_xlat2.xyz;
					    u_xlat18 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat18 = max(u_xlat18, 0.319999993);
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_4.w * u_xlat27 + _BaseSmoothness;
					    u_xlat29 = (-u_xlat27) + 1.0;
					    u_xlat30 = u_xlat29 * u_xlat29 + 1.5;
					    u_xlat30 = u_xlat18 * u_xlat30;
					    u_xlat16_4.x = dot(u_xlat16_1.xyz, u_xlat16_1.xyz);
					    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * u_xlat16_4.xxx;
					    u_xlat31 = dot(u_xlat16_4.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat29 * u_xlat29;
					    u_xlat16_34 = u_xlat29 * u_xlat5.x;
					    u_xlat16_34 = (-u_xlat16_34) * 0.280000001 + 1.0;
					    u_xlat29 = u_xlat5.x * u_xlat5.x + -1.0;
					    u_xlat29 = u_xlat31 * u_xlat29 + 1.00001001;
					    u_xlat29 = u_xlat29 * u_xlat30;
					    u_xlat29 = u_xlat5.x / u_xlat29;
					    u_xlat29 = u_xlat29 + -9.99999975e-05;
					    u_xlat29 = max(u_xlat29, 0.0);
					    u_xlat29 = min(u_xlat29, 100.0);
					    u_xlat5.xyz = vec3(u_xlat29) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat5.xyz = u_xlat5.xyz * _LightColor0.xyz;
					    u_xlat16_29 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_29 = min(max(u_xlat16_29, 0.0), 1.0);
					#else
					    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);
					#endif
					    u_xlat30 = dot(u_xlat16_4.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat30) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;
					    u_xlat16_6.x = u_xlat16_33 + u_xlat27;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat16_15.x = (-u_xlat27) + 1.0;
					    u_xlat16_6.xzw = (-u_xlat16_8.xyz) + u_xlat16_6.xxx;
					    u_xlat16_6.xzw = u_xlat16_7.xxx * u_xlat16_6.xzw + u_xlat16_8.xyz;
					    u_xlat27 = dot((-u_xlat3.xyz), u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + (-u_xlat3.xyz);
					    u_xlat16_7.x = (-u_xlat16_15.x) * 0.699999988 + 1.70000005;
					    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_7.x;
					    u_xlat16_15.x = u_xlat16_15.x * 6.0;
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_15.x);
					    u_xlat16_15.x = u_xlat16_1.w + -1.0;
					    u_xlat16_15.x = unity_SpecCube0_HDR.w * u_xlat16_15.x + 1.0;
					    u_xlat16_15.x = u_xlat16_15.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * u_xlat16_15.xxx;
					    u_xlat16_7.xyz = u_xlat9.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_34);
					    u_xlat4.xyz = u_xlat16_7.xyz * u_xlat16_6.xzw + u_xlat4.xyz;
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_15.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_15.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat9.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_5.xyz = texture(_CoatNormal, u_xlat9.xz).xyz;
					    u_xlat16_15.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_15.xy = u_xlat16_15.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_15.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_15.xyz);
					    u_xlat9.x = dot((-u_xlat3.xyz), u_xlat16_7.xyz);
					    u_xlat9.x = u_xlat9.x + u_xlat9.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat9.xxx) + (-u_xlat3.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat16_1.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat16_1.xyz * u_xlat16_6.xxx;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat27 = u_xlat9.x * u_xlat9.x;
					    u_xlat16_33 = u_xlat9.x * u_xlat27;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat18;
					    u_xlat16_33 = (-u_xlat16_33) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_33);
					    u_xlat16_18 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_18 = inversesqrt(u_xlat16_18);
					    u_xlat16_5.xyz = vec3(u_xlat16_18) * u_xlat16_7.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat3.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_33 = (-u_xlat18) + 1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
					#else
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_33 = u_xlat16_33 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
					    u_xlat18 = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
					#else
					    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
					#endif
					    u_xlat16_2 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_2 = min(max(u_xlat16_2, 0.0), 1.0);
					#else
					    u_xlat16_2 = clamp(u_xlat16_2, 0.0, 1.0);
					#endif
					    u_xlat18 = u_xlat18 * u_xlat18;
					    u_xlat11 = u_xlat27 * u_xlat27 + -1.0;
					    u_xlat18 = u_xlat18 * u_xlat11 + 1.00001001;
					    u_xlat9.x = u_xlat18 * u_xlat9.x;
					    u_xlat9.x = u_xlat27 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat9.xyz = u_xlat9.xxx * _LightColor0.xyz;
					    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat16_2) + u_xlat16_6.xyz;
					    u_xlat9.xyz = (-u_xlat4.xyz) + u_xlat9.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat27 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = u_xlat1.z * u_xlat2.y;
					    u_xlat13 = u_xlat1.y * u_xlat2.z + (-u_xlat13);
					    u_xlat2.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat13 * u_xlat2.w;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.xy = u_xlat2.yw;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump float u_xlat16_14;
					vec2 u_xlat15;
					lowp vec3 u_xlat10_15;
					bool u_xlatb15;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat42;
					mediump float u_xlat16_42;
					float u_xlat43;
					mediump float u_xlat16_43;
					float u_xlat45;
					mediump float u_xlat16_45;
					float u_xlat46;
					mediump float u_xlat16_48;
					mediump float u_xlat16_49;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_42 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_42 = inversesqrt(u_xlat16_42);
					    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat9.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat42 = sqrt(u_xlat42);
					    u_xlat43 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat9.xyz;
					    u_xlat43 = dot(u_xlat8.xyz, u_xlat16_5.xyz);
					    u_xlat45 = u_xlat43;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat43 = u_xlat43 + u_xlat43;
					    u_xlat10.xyz = u_xlat16_5.xyz * (-vec3(u_xlat43)) + u_xlat8.xyz;
					    u_xlat16_43 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_43 = clamp(u_xlat16_43, 0.0, 1.0);
					    u_xlat46 = dot(u_xlat10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat5.x = u_xlat46 * u_xlat46;
					    u_xlat16_6.x = (-u_xlat45) + 1.0;
					    u_xlat16_45 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_45 = u_xlat16_6.x * u_xlat16_45;
					    u_xlat16_45 = u_xlat16_6.x * u_xlat16_45;
					    u_xlat10.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat10.xyz = u_xlat1.yyy * u_xlat10.xyz + _FlakesColor1.xyz;
					    u_xlat11.xyz = u_xlat10_2.xyz + (-u_xlat10.xyz);
					    u_xlat10.xyz = vec3(_FlakeColorVariationAmount) * u_xlat11.xyz + u_xlat10.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + (-u_xlat11.xyz);
					    u_xlat10.xyz = u_xlat10_2.www * u_xlat10.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat10.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat15.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat15.x = u_xlat10_2.w * u_xlat15.x + _BaseMetallic;
					    u_xlat16_6.xyz = u_xlat15.xxx * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_48 = (-u_xlat15.x) * 0.779083729 + 0.779083729;
					    u_xlat16_49 = (-u_xlat16_48) + 1.0;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat10_2.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat16_49 = u_xlat16_49 + u_xlat15.x;
					    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
					    u_xlat16_12.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_49);
					    u_xlat16_12.xyz = vec3(u_xlat16_45) * u_xlat16_12.xyz + u_xlat16_6.xyz;
					    u_xlat16_49 = (-u_xlat15.x) + 1.0;
					    u_xlat5.z = (-u_xlat15.x) + 1.0;
					    u_xlat15.x = texture2D(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat15.x = u_xlat15.x * 16.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat15.xxx;
					    u_xlat16_6.xyz = u_xlat10.xyz * vec3(u_xlat16_48) + u_xlat16_6.xyz;
					    u_xlat16_48 = (-u_xlat16_49) * 0.699999988 + 1.70000005;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_49;
					    u_xlat16_48 = u_xlat16_48 * 6.0;
					    u_xlat15.x = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat15.x = u_xlat15.x + u_xlat15.x;
					    u_xlat5.xyz = u_xlat16_7.xyz * (-u_xlat15.xxx) + (-u_xlat8.xyz);
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_48);
					    u_xlat16_48 = u_xlat10_2.w + -1.0;
					    u_xlat16_48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
					    u_xlat16_48 = u_xlat16_48 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(u_xlat16_48);
					    u_xlat15.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x;
					    u_xlat1.x = u_xlat1.x * u_xlat15.x + 0.0500000007;
					    u_xlat15.x = (-u_xlat1.x) + 1.0;
					    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat15.x = u_xlat29 * u_xlat15.x;
					    u_xlat1.x = u_xlat29 * u_xlat1.x;
					    u_xlat16_7.xyz = u_xlat15.xxx * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_12.xyz * u_xlat16_7.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat15.x = dot(u_xlat9.xyz, u_xlat5.xyz);
					    u_xlat42 = u_xlat42 + (-u_xlat15.x);
					    u_xlat42 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat15.x;
					    u_xlat42 = u_xlat42 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat15.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb15 = vs_TEXCOORD6.z<u_xlat15.x;
					    u_xlat15.x = u_xlatb15 ? 1.0 : float(0.0);
					    u_xlat15.x = max(u_xlat15.x, _LightShadowData.x);
					    u_xlat16_48 = (-u_xlat15.x) + 1.0;
					    u_xlat16_48 = u_xlat42 * u_xlat16_48 + u_xlat15.x;
					    u_xlat16_12.xyz = vec3(u_xlat16_48) * _LightColor0.xyz;
					    u_xlat16_13.xyz = vec3(u_xlat16_43) * u_xlat16_12.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_13.xyz + u_xlat16_7.xyz;
					    u_xlat15.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_15.xyz = texture2D(_CoatNormal, u_xlat15.xy).xyz;
					    u_xlat16_7.xyz = u_xlat10_15.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_13.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.y = dot(u_xlat4.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.z = dot(u_xlat0.xyz, u_xlat16_7.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_13.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_13.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_48 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_48) * 0.699999988 + 1.70000005;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_7.x;
					    u_xlat16_48 = u_xlat16_48 * 6.0;
					    u_xlat10_0 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_48);
					    u_xlat16_48 = u_xlat10_0.w + -1.0;
					    u_xlat16_48 = unity_SpecCube0_HDR.w * u_xlat16_48 + 1.0;
					    u_xlat16_48 = u_xlat16_48 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_0.xyz * vec3(u_xlat16_48);
					    u_xlat16_0.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_13.xyz;
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat16_0.xyz);
					    u_xlat15.x = u_xlat42;
					    u_xlat15.x = clamp(u_xlat15.x, 0.0, 1.0);
					    u_xlat42 = u_xlat42 + u_xlat42;
					    u_xlat3.xyz = u_xlat16_0.xyz * (-vec3(u_xlat42)) + u_xlat8.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_12.xyz = u_xlat16_0.xxx * u_xlat16_12.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_48 = (-u_xlat15.x) + 1.0;
					    u_xlat16_14 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_14 = u_xlat16_48 * u_xlat16_14;
					    u_xlat16_14 = u_xlat16_48 * u_xlat16_14;
					    u_xlat16_48 = _CoatSmoothness + 1.0;
					    u_xlat16_48 = clamp(u_xlat16_48, 0.0, 1.0);
					    u_xlat16_48 = u_xlat16_48 + -1.0;
					    u_xlat16_48 = u_xlat16_14 * u_xlat16_48 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_48) * u_xlat16_7.xyz;
					    u_xlat0.z = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_12.xyz + u_xlat16_7.xyz;
					    u_xlat16_0.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_0.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = u_xlat1.z * u_xlat2.y;
					    u_xlat13 = u_xlat1.y * u_xlat2.z + (-u_xlat13);
					    u_xlat2.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat13 * u_xlat2.w;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.xy = u_xlat2.yw;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					mediump vec3 u_xlat16_20;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat42;
					mediump float u_xlat16_42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					float u_xlat47;
					mediump float u_xlat16_47;
					bool u_xlatb47;
					mediump float u_xlat16_48;
					mediump float u_xlat16_49;
					float u_xlat50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_42 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_42 = inversesqrt(u_xlat16_42);
					    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat9.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat42 = sqrt(u_xlat42);
					    u_xlat43 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat9.xyz;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
					    u_xlat43 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat43) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat12.xyz = u_xlat10_2.xyz + (-u_xlat11.xyz);
					    u_xlat11.xyz = vec3(_FlakeColorVariationAmount) * u_xlat12.xyz + u_xlat11.xyz;
					    u_xlat12.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat1.yyy * u_xlat12.xyz + _BaseColor1.xyz;
					    u_xlat11.xyz = (-u_xlat15.xyz) + u_xlat11.xyz;
					    u_xlat15.xyz = u_xlat10_2.www * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat16_20.xyz = u_xlat15.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat45 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseMetallic;
					    u_xlat16_20.xyz = vec3(u_xlat45) * u_xlat16_20.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_49 = (-u_xlat45) * 0.779083729 + 0.779083729;
					    u_xlat16_13.x = (-u_xlat16_49) + 1.0;
					    u_xlat45 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseSmoothness;
					    u_xlat16_13.x = u_xlat16_13.x + u_xlat45;
					    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					    u_xlat16_13.xyz = (-u_xlat16_20.xyz) + u_xlat16_13.xxx;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * u_xlat16_13.xyz + u_xlat16_20.xyz;
					    u_xlat46 = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat11.xyz = u_xlat16_7.xyz * (-vec3(u_xlat46)) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-u_xlat45) + 1.0;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat11.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat46 = u_xlat1.x * u_xlat1.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat1.x = u_xlat1.x * u_xlat46 + 0.0500000007;
					    u_xlat46 = (-u_xlat1.x) + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_47 = (-vs_COLOR0.x) + 1.0;
					    u_xlat47 = _BaseOcclusion * u_xlat16_47 + vs_COLOR0.x;
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat1.x = u_xlat1.x * u_xlat47;
					    u_xlat16_7.xyz = vec3(u_xlat46) * u_xlat16_7.xyz;
					    u_xlat46 = u_xlat45 * u_xlat45;
					    u_xlat16_6.x = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat11.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat11.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat11.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat47 = dot(u_xlat9.xyz, u_xlat11.xyz);
					    u_xlat42 = u_xlat42 + (-u_xlat47);
					    u_xlat42 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat47;
					    u_xlat42 = u_xlat42 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat47 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb47 = vs_TEXCOORD6.z<u_xlat47;
					    u_xlat47 = u_xlatb47 ? 1.0 : float(0.0);
					    u_xlat47 = max(u_xlat47, _LightShadowData.x);
					    u_xlat16_6.x = (-u_xlat47) + 1.0;
					    u_xlat16_6.x = u_xlat42 * u_xlat16_6.x + u_xlat47;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
					    u_xlat42 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat42 = max(u_xlat42, 0.00100000005);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat9.xyz = vec3(u_xlat42) * u_xlat10.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat45 = u_xlat45 * u_xlat42;
					    u_xlat47 = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat50 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat50 * u_xlat50;
					    u_xlat19.x = u_xlat19.x * u_xlat47 + 1.00001001;
					    u_xlat45 = u_xlat45 * u_xlat19.x;
					    u_xlat45 = u_xlat46 / u_xlat45;
					    u_xlat45 = u_xlat45 + -9.99999975e-05;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = min(u_xlat45, 100.0);
					    u_xlat19.xyz = u_xlat16_20.xyz * vec3(u_xlat45);
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat16_49) + u_xlat19.xyz;
					    u_xlat15.xyz = u_xlat16_13.xyz * u_xlat15.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_20.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_20.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat14 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_48 = u_xlat0.x * u_xlat14;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_48 = (-u_xlat16_48) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48);
					    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_28 = inversesqrt(u_xlat16_28);
					    u_xlat16_3.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_48 = (-u_xlat28) + 1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_42 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat28 * u_xlat0.x;
					    u_xlat0.x = u_xlat14 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_42) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat15.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat13 = u_xlat1.z * u_xlat2.y;
					    u_xlat13 = u_xlat1.y * u_xlat2.z + (-u_xlat13);
					    u_xlat2.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat13 * u_xlat2.w;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.x;
					    vs_TEXCOORD1.z = u_xlat1.x;
					    vs_TEXCOORD2.xy = u_xlat2.yw;
					    vs_TEXCOORD3.x = u_xlat2.z;
					    vs_TEXCOORD2.z = u_xlat1.y;
					    vs_TEXCOORD3.z = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec2 u_xlat5;
					mediump vec3 u_xlat16_5;
					lowp vec3 u_xlat10_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					vec3 u_xlat11;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_13;
					float u_xlat14;
					vec3 u_xlat15;
					vec3 u_xlat19;
					mediump vec3 u_xlat16_20;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat42;
					mediump float u_xlat16_42;
					float u_xlat43;
					float u_xlat45;
					float u_xlat46;
					float u_xlat47;
					mediump float u_xlat16_47;
					bool u_xlatb47;
					mediump float u_xlat16_48;
					mediump float u_xlat16_49;
					float u_xlat50;
					void main()
					{
					    u_xlat0.y = vs_TEXCOORD3.x;
					    u_xlat0.z = vs_TEXCOORD1.x;
					    u_xlat0.x = vs_TEXCOORD2.x;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat16_2.xyz = u_xlat0.xyz * u_xlat1.zxy;
					    u_xlat16_2.xyz = u_xlat1.yzx * u_xlat0.yzx + (-u_xlat16_2.xyz);
					    u_xlat0.xyz = u_xlat16_2.xzy * vs_TEXCOORD2.yyy;
					    u_xlat3.y = u_xlat0.x;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_5.xyz = texture2D(_FlakesNormal, u_xlat4.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat4.xy);
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat3.xz = vs_TEXCOORD1.xz;
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat4.y = u_xlat0.z;
					    u_xlat4.xz = vs_TEXCOORD2.xz;
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat0.xz = vs_TEXCOORD3.xz;
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat16_42 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_42 = inversesqrt(u_xlat16_42);
					    u_xlat16_5.xyz = vec3(u_xlat16_42) * u_xlat16_7.xyz;
					    u_xlat8.x = vs_TEXCOORD1.w;
					    u_xlat8.y = vs_TEXCOORD2.w;
					    u_xlat8.z = vs_TEXCOORD3.w;
					    u_xlat9.xyz = (-u_xlat8.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.xyz = u_xlat8.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat42 = dot(u_xlat8.xyz, u_xlat8.xyz);
					    u_xlat42 = sqrt(u_xlat42);
					    u_xlat43 = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat43 = inversesqrt(u_xlat43);
					    u_xlat8.xyz = vec3(u_xlat43) * u_xlat9.xyz;
					    u_xlat10.xyz = u_xlat9.xyz * vec3(u_xlat43) + _WorldSpaceLightPos0.xyz;
					    u_xlat43 = dot(u_xlat16_5.xyz, u_xlat8.xyz);
					    u_xlat43 = clamp(u_xlat43, 0.0, 1.0);
					    u_xlat16_6.x = (-u_xlat43) + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat8.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat12.xyz = u_xlat10_2.xyz + (-u_xlat11.xyz);
					    u_xlat11.xyz = vec3(_FlakeColorVariationAmount) * u_xlat12.xyz + u_xlat11.xyz;
					    u_xlat12.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat1.yyy * u_xlat12.xyz + _BaseColor1.xyz;
					    u_xlat11.xyz = (-u_xlat15.xyz) + u_xlat11.xyz;
					    u_xlat15.xyz = u_xlat10_2.www * u_xlat11.xyz + u_xlat15.xyz;
					    u_xlat16_20.xyz = u_xlat15.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat45 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseMetallic;
					    u_xlat16_20.xyz = vec3(u_xlat45) * u_xlat16_20.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_49 = (-u_xlat45) * 0.779083729 + 0.779083729;
					    u_xlat16_13.x = (-u_xlat16_49) + 1.0;
					    u_xlat45 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat45 = u_xlat10_2.w * u_xlat45 + _BaseSmoothness;
					    u_xlat16_13.x = u_xlat16_13.x + u_xlat45;
					    u_xlat16_13.x = clamp(u_xlat16_13.x, 0.0, 1.0);
					    u_xlat16_13.xyz = (-u_xlat16_20.xyz) + u_xlat16_13.xxx;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * u_xlat16_13.xyz + u_xlat16_20.xyz;
					    u_xlat46 = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat46 = u_xlat46 + u_xlat46;
					    u_xlat11.xyz = u_xlat16_7.xyz * (-vec3(u_xlat46)) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-u_xlat45) + 1.0;
					    u_xlat45 = (-u_xlat45) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat11.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat46 = u_xlat1.x * u_xlat1.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat1.x = u_xlat1.x * u_xlat46 + 0.0500000007;
					    u_xlat46 = (-u_xlat1.x) + 1.0;
					    u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_47 = (-vs_COLOR0.x) + 1.0;
					    u_xlat47 = _BaseOcclusion * u_xlat16_47 + vs_COLOR0.x;
					    u_xlat46 = u_xlat46 * u_xlat47;
					    u_xlat1.x = u_xlat1.x * u_xlat47;
					    u_xlat16_7.xyz = vec3(u_xlat46) * u_xlat16_7.xyz;
					    u_xlat46 = u_xlat45 * u_xlat45;
					    u_xlat16_6.x = u_xlat45 * u_xlat46;
					    u_xlat45 = u_xlat45 * u_xlat45 + 1.5;
					    u_xlat16_6.x = (-u_xlat16_6.x) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_6.xxx;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * u_xlat16_7.xyz;
					    u_xlat11.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat11.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat11.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat47 = dot(u_xlat9.xyz, u_xlat11.xyz);
					    u_xlat42 = u_xlat42 + (-u_xlat47);
					    u_xlat42 = unity_ShadowFadeCenterAndType.w * u_xlat42 + u_xlat47;
					    u_xlat42 = u_xlat42 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat47 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb47 = vs_TEXCOORD6.z<u_xlat47;
					    u_xlat47 = u_xlatb47 ? 1.0 : float(0.0);
					    u_xlat47 = max(u_xlat47, _LightShadowData.x);
					    u_xlat16_6.x = (-u_xlat47) + 1.0;
					    u_xlat16_6.x = u_xlat42 * u_xlat16_6.x + u_xlat47;
					    u_xlat16_13.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
					    u_xlat42 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat42 = max(u_xlat42, 0.00100000005);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat9.xyz = vec3(u_xlat42) * u_xlat10.xyz;
					    u_xlat42 = dot(_WorldSpaceLightPos0.xyz, u_xlat9.xyz);
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat42 = max(u_xlat42, 0.319999993);
					    u_xlat45 = u_xlat45 * u_xlat42;
					    u_xlat47 = u_xlat46 * u_xlat46 + -1.0;
					    u_xlat50 = dot(u_xlat16_5.xyz, u_xlat9.xyz);
					    u_xlat50 = clamp(u_xlat50, 0.0, 1.0);
					    u_xlat16_5.x = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
					    u_xlat19.x = u_xlat50 * u_xlat50;
					    u_xlat19.x = u_xlat19.x * u_xlat47 + 1.00001001;
					    u_xlat45 = u_xlat45 * u_xlat19.x;
					    u_xlat45 = u_xlat46 / u_xlat45;
					    u_xlat45 = u_xlat45 + -9.99999975e-05;
					    u_xlat45 = max(u_xlat45, 0.0);
					    u_xlat45 = min(u_xlat45, 100.0);
					    u_xlat19.xyz = u_xlat16_20.xyz * vec3(u_xlat45);
					    u_xlat15.xyz = u_xlat15.xyz * vec3(u_xlat16_49) + u_xlat19.xyz;
					    u_xlat15.xyz = u_xlat16_13.xyz * u_xlat15.xyz;
					    u_xlat15.xyz = u_xlat15.xyz * u_xlat16_5.xxx + u_xlat16_7.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_5.xyz = texture2D(_CoatNormal, u_xlat5.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(u_xlat4.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(u_xlat0.xyz, u_xlat16_6.xyz);
					    u_xlat0.x = dot((-u_xlat8.xyz), u_xlat16_7.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xyz = u_xlat16_7.xyz * (-u_xlat0.xxx) + (-u_xlat8.xyz);
					    u_xlat16_6.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_20.x = (-u_xlat16_6.x) * 0.699999988 + 1.70000005;
					    u_xlat16_6.x = u_xlat16_20.x * u_xlat16_6.x;
					    u_xlat16_6.x = u_xlat16_6.x * 6.0;
					    u_xlat10_2 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xyz, u_xlat16_6.x);
					    u_xlat16_6.x = u_xlat10_2.w + -1.0;
					    u_xlat16_6.x = unity_SpecCube0_HDR.w * u_xlat16_6.x + 1.0;
					    u_xlat16_6.x = u_xlat16_6.x * unity_SpecCube0_HDR.x;
					    u_xlat16_6.xyz = u_xlat10_2.xyz * u_xlat16_6.xxx;
					    u_xlat0.x = (-_CoatSmoothness) + 1.0;
					    u_xlat14 = u_xlat0.x * u_xlat0.x;
					    u_xlat16_48 = u_xlat0.x * u_xlat14;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.5;
					    u_xlat0.x = u_xlat0.x * u_xlat42;
					    u_xlat16_48 = (-u_xlat16_48) * 0.280000001 + 1.0;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_48);
					    u_xlat16_28 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_28 = inversesqrt(u_xlat16_28);
					    u_xlat16_3.xyz = vec3(u_xlat16_28) * u_xlat16_7.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat8.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_48 = (-u_xlat28) + 1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;
					    u_xlat16_7.x = _CoatSmoothness + 1.0;
					    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
					    u_xlat16_7.x = u_xlat16_7.x + -1.0;
					    u_xlat16_48 = u_xlat16_48 * u_xlat16_7.x + 1.0;
					    u_xlat16_6.xyz = vec3(u_xlat16_48) * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_3.xyz, u_xlat9.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_42 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_42 = clamp(u_xlat16_42, 0.0, 1.0);
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat3.x = u_xlat14 * u_xlat14 + -1.0;
					    u_xlat28 = u_xlat28 * u_xlat3.x + 1.00001001;
					    u_xlat0.x = u_xlat28 * u_xlat0.x;
					    u_xlat0.x = u_xlat14 / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xyz = u_xlat16_13.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_42) + u_xlat16_6.xyz;
					    u_xlat0.xyz = (-u_xlat15.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat11.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseSmoothness;
					    u_xlat16_37 = u_xlat16_37 + u_xlat11.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_21 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_4.xyz = vec3(u_xlat16_21) * u_xlat16_9.xyz;
					    u_xlat21.x = dot(u_xlat2.xyz, u_xlat16_4.xyz);
					    u_xlat31 = u_xlat21.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat21.x = u_xlat21.x + u_xlat21.x;
					    u_xlat5.xyz = u_xlat16_4.xyz * (-u_xlat21.xxx) + u_xlat2.xyz;
					    u_xlat16_21 = dot(u_xlat16_4.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat32 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat32 = u_xlat32 * u_xlat32;
					    u_xlat4.x = u_xlat32 * u_xlat32;
					    u_xlat16_6.x = (-u_xlat31) + 1.0;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_6.x * u_xlat16_31;
					    u_xlat16_6.xyz = vec3(u_xlat16_31) * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat31 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_9.xyz * (-vec3(u_xlat31)) + (-u_xlat2.xyz);
					    u_xlat16_37 = (-u_xlat11.x) + 1.0;
					    u_xlat4.z = (-u_xlat11.x) + 1.0;
					    u_xlat11.x = texture(unity_NHxRoughness, u_xlat4.xz).x;
					    u_xlat11.x = u_xlat11.x * 16.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat11.xxx;
					    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_36) + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat16_37) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_4.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat16_4.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat10.x = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_20 = (-vs_COLOR0.x) + 1.0;
					    u_xlat20 = _BaseOcclusion * u_xlat16_20 + vs_COLOR0.x;
					    u_xlat10.x = u_xlat20 * u_xlat10.x;
					    u_xlat0.x = u_xlat20 * u_xlat0.x;
					    u_xlat16_8.xyz = u_xlat10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
					    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat10.x = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat20 = (-u_xlat10.x) + u_xlat30;
					    u_xlat10.x = unity_ShadowFadeCenterAndType.w * u_xlat20 + u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
					#else
					    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
					#endif
					    u_xlat1.xyw = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyw;
					    u_xlat1.xyw = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyw;
					    u_xlat1.xyw = u_xlat1.xyw + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.w);
					    u_xlat16_20 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_20 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat10.x * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = vec3(u_xlat16_21) * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat33 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat1.xyz = u_xlat0.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat12;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_18;
					vec2 u_xlat23;
					mediump float u_xlat16_23;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_34;
					mediump float u_xlat16_35;
					float u_xlat36;
					mediump float u_xlat16_40;
					mediump float u_xlat16_41;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat33 = sqrt(u_xlat33);
					    u_xlat34 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat2.xyz = vec3(u_xlat34) * u_xlat3.xyz;
					    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat34) + _WorldSpaceLightPos0.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat23.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_5 = texture(_FlakesRGBcolorvariationAmask, u_xlat23.xy);
					    u_xlat16_6.xyz = texture(_FlakesNormal, u_xlat23.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat0.xyz) + u_xlat16_5.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat0.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat12.xyz = u_xlat1.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat12.xyz);
					    u_xlat0.xyz = u_xlat16_5.www * u_xlat0.xyz + u_xlat12.xyz;
					    u_xlat16_8.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat12.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseMetallic;
					    u_xlat16_8.xyz = u_xlat12.xxx * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_40 = (-u_xlat12.x) * 0.779083729 + 0.779083729;
					    u_xlat16_41 = (-u_xlat16_40) + 1.0;
					    u_xlat12.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12.x = u_xlat16_5.w * u_xlat12.x + _BaseSmoothness;
					    u_xlat16_41 = u_xlat16_41 + u_xlat12.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_41);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_23 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_5.xyz = vec3(u_xlat16_23) * u_xlat16_10.xyz;
					    u_xlat23.x = dot(u_xlat16_5.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat23.x) + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;
					    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat23.x = dot((-u_xlat2.xyz), u_xlat16_10.xyz);
					    u_xlat23.x = u_xlat23.x + u_xlat23.x;
					    u_xlat6.xyz = u_xlat16_10.xyz * (-u_xlat23.xxx) + (-u_xlat2.xyz);
					    u_xlat16_41 = (-u_xlat12.x) + 1.0;
					    u_xlat1.y = (-u_xlat12.x) + 1.0;
					    u_xlat16_9.x = (-u_xlat16_41) * 0.699999988 + 1.70000005;
					    u_xlat16_41 = u_xlat16_41 * u_xlat16_9.x;
					    u_xlat16_41 = u_xlat16_41 * 6.0;
					    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat6.xyz, u_xlat16_41);
					    u_xlat16_41 = u_xlat16_6.w + -1.0;
					    u_xlat16_41 = unity_SpecCube0_HDR.w * u_xlat16_41 + 1.0;
					    u_xlat16_41 = u_xlat16_41 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_6.xyz * vec3(u_xlat16_41);
					    u_xlat23.x = u_xlat1.x * u_xlat1.x;
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat1.x = u_xlat1.x * u_xlat23.x + 0.0500000007;
					    u_xlat23.x = (-u_xlat1.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * _CoatAmount;
					    u_xlat16_34 = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.w = _BaseOcclusion * u_xlat16_34 + vs_COLOR0.x;
					    u_xlat23.x = u_xlat1.w * u_xlat23.x;
					    u_xlat16_9.xyz = u_xlat23.xxx * u_xlat16_9.xyz;
					    u_xlat1.xz = u_xlat1.wy * u_xlat1.xy;
					    u_xlat16_41 = u_xlat1.y * u_xlat1.z;
					    u_xlat12.x = u_xlat1.y * u_xlat1.y + 1.5;
					    u_xlat16_41 = (-u_xlat16_41) * 0.280000001 + 1.0;
					    u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(u_xlat16_41);
					    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = max(u_xlat34, 0.00100000005);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat4.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat16_5.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat16_35 = dot(u_xlat16_5.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
					#else
					    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat36 = u_xlat1.z * u_xlat1.z + -1.0;
					    u_xlat34 = u_xlat34 * u_xlat36 + 1.00001001;
					    u_xlat36 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
					#else
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					#endif
					    u_xlat36 = max(u_xlat36, 0.319999993);
					    u_xlat12.x = u_xlat12.x * u_xlat36;
					    u_xlat12.x = u_xlat34 * u_xlat12.x;
					    u_xlat12.x = u_xlat1.z / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat16_8.xyz * u_xlat12.xxx;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_40) + u_xlat12.xyz;
					    u_xlat5.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat5.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat5.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
					    u_xlat33 = u_xlat33 + (-u_xlat12.x);
					    u_xlat33 = unity_ShadowFadeCenterAndType.w * u_xlat33 + u_xlat12.x;
					    u_xlat33 = u_xlat33 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat12.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat12.xyz;
					    u_xlat12.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat12.xyz;
					    u_xlat12.xyz = u_xlat12.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat12.xy,u_xlat12.z);
					    u_xlat16_12.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_40 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_40 = u_xlat16_12.x * u_xlat16_40 + _LightShadowData.x;
					    u_xlat16_8.x = (-u_xlat16_40) + 1.0;
					    u_xlat16_40 = u_xlat33 * u_xlat16_8.x + u_xlat16_40;
					    u_xlat16_8.xyz = vec3(u_xlat16_40) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_7.xyz;
					    u_xlat16_7.x = (-_CoatSmoothness) + 1.0;
					    u_xlat16_18.x = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_7.x = u_xlat16_18.x * u_xlat16_7.x;
					    u_xlat16_7.x = u_xlat16_7.x * 6.0;
					    u_xlat12.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_12.xyz = texture(_CoatNormal, u_xlat12.xy).xyz;
					    u_xlat16_18.xyz = u_xlat16_12.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_18.xy = u_xlat16_18.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_18.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_18.xyz);
					    u_xlat33 = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat12.xyz = u_xlat16_9.xyz * (-vec3(u_xlat33)) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat12.xyz, u_xlat16_7.x);
					    u_xlat16_7.x = u_xlat16_5.w + -1.0;
					    u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;
					    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * u_xlat16_7.xxx;
					    u_xlat33 = (-_CoatSmoothness) + 1.0;
					    u_xlat12.x = u_xlat33 * u_xlat33;
					    u_xlat16_40 = u_xlat33 * u_xlat12.x;
					    u_xlat33 = u_xlat33 * u_xlat33 + 1.5;
					    u_xlat33 = u_xlat33 * u_xlat36;
					    u_xlat16_40 = (-u_xlat16_40) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_40);
					    u_xlat16_23 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_23 = inversesqrt(u_xlat16_23);
					    u_xlat16_3.xyz = vec3(u_xlat16_23) * u_xlat16_9.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat2.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_40 = (-u_xlat23.x) + 1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;
					    u_xlat16_41 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_41 = min(max(u_xlat16_41, 0.0), 1.0);
					#else
					    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);
					#endif
					    u_xlat16_41 = u_xlat16_41 + -1.0;
					    u_xlat16_40 = u_xlat16_40 * u_xlat16_41 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz;
					    u_xlat23.x = dot(u_xlat16_3.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat23.x = min(max(u_xlat23.x, 0.0), 1.0);
					#else
					    u_xlat23.x = clamp(u_xlat23.x, 0.0, 1.0);
					#endif
					    u_xlat16_34 = dot(u_xlat16_3.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
					#else
					    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
					#endif
					    u_xlat23.x = u_xlat23.x * u_xlat23.x;
					    u_xlat2.x = u_xlat12.x * u_xlat12.x + -1.0;
					    u_xlat23.x = u_xlat23.x * u_xlat2.x + 1.00001001;
					    u_xlat33 = u_xlat33 * u_xlat23.x;
					    u_xlat33 = u_xlat12.x / u_xlat33;
					    u_xlat33 = u_xlat33 + -9.99999975e-05;
					    u_xlat33 = max(u_xlat33, 0.0);
					    u_xlat33 = min(u_xlat33, 100.0);
					    u_xlat2.xyz = u_xlat16_8.xyz * vec3(u_xlat33);
					    u_xlat12.xyz = u_xlat2.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;
					    u_xlat12.xyz = (-u_xlat0.xyz) + u_xlat12.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat12.xyz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat33 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2 = u_xlat1.xxxx * u_xlat2.xyzz;
					    u_xlat1.x = u_xlat1.y * u_xlat2.w;
					    u_xlat1.x = u_xlat2.y * u_xlat1.z + (-u_xlat1.x);
					    u_xlat1.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat1.w * u_xlat1.x;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.xy = u_xlat1.yw;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat3 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					lowp vec4 u_xlat10_10;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					vec2 u_xlat14;
					lowp vec3 u_xlat10_14;
					float u_xlat15;
					mediump vec3 u_xlat16_17;
					vec3 u_xlat22;
					mediump vec3 u_xlat16_22;
					float u_xlat28;
					float u_xlat42;
					mediump float u_xlat16_42;
					bool u_xlatb42;
					float u_xlat43;
					mediump float u_xlat16_43;
					mediump float u_xlat16_44;
					mediump float u_xlat16_45;
					void main()
					{
					    u_xlat0.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat14.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat14.xy);
					    u_xlat10_14.xyz = texture2D(_FlakesNormal, u_xlat14.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_14.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat0.x = u_xlat10_1.w * u_xlat0.x + _BaseMetallic;
					    u_xlat16_44 = (-u_xlat0.x) * 0.779083729 + 0.779083729;
					    u_xlat16_3.x = (-u_xlat16_44) + 1.0;
					    u_xlat14.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat14.x = u_xlat10_1.w * u_xlat14.x + _BaseSmoothness;
					    u_xlat16_3.x = u_xlat16_3.x + u_xlat14.x;
					    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat6.x = vs_TEXCOORD1.w;
					    u_xlat6.y = vs_TEXCOORD2.w;
					    u_xlat6.z = vs_TEXCOORD3.w;
					    u_xlat7.xyz = (-u_xlat6.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat6.xyz = u_xlat6.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = sqrt(u_xlat28);
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat42 = inversesqrt(u_xlat42);
					    u_xlat6.xyz = vec3(u_xlat42) * u_xlat7.xyz;
					    u_xlat42 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat8.xy = (-vec2(u_xlat42)) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = u_xlat8.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat8.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat4.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat4.xyz;
					    u_xlat16_17.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat16_9.xyz = vec3(u_xlat16_44) * u_xlat1.xyz;
					    u_xlat16_17.xyz = u_xlat0.xxx * u_xlat16_17.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_10.xyz = (-u_xlat16_17.xyz) + u_xlat16_3.xxx;
					    u_xlat1.y = vs_TEXCOORD3.x;
					    u_xlat1.z = vs_TEXCOORD1.x;
					    u_xlat1.x = vs_TEXCOORD2.x;
					    u_xlat16_11.xyz = u_xlat1.xyz * u_xlat5.zxy;
					    u_xlat16_11.xyz = u_xlat5.yzx * u_xlat1.yzx + (-u_xlat16_11.xyz);
					    u_xlat1.xyz = u_xlat16_11.xzy * vs_TEXCOORD2.yyy;
					    u_xlat4.y = u_xlat1.x;
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat4.xz = vs_TEXCOORD1.xz;
					    u_xlat16_5.x = dot(u_xlat4.xyz, u_xlat16_2.xyz);
					    u_xlat12.y = u_xlat1.z;
					    u_xlat12.xz = vs_TEXCOORD2.xz;
					    u_xlat16_5.y = dot(u_xlat12.xyz, u_xlat16_2.xyz);
					    u_xlat1.xz = vs_TEXCOORD3.xz;
					    u_xlat16_5.z = dot(u_xlat1.xyz, u_xlat16_2.xyz);
					    u_xlat16_0.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_22.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat16_22.xyz);
					    u_xlat42 = u_xlat0.x;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat13.xyz = u_xlat16_22.xyz * (-u_xlat0.xxx) + u_xlat6.xyz;
					    u_xlat16_0.x = dot(u_xlat16_22.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat43 = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat43 = u_xlat43 * u_xlat43;
					    u_xlat13.x = u_xlat43 * u_xlat43;
					    u_xlat16_2.x = (-u_xlat42) + 1.0;
					    u_xlat16_42 = u_xlat16_2.x * u_xlat16_2.x;
					    u_xlat16_42 = u_xlat16_2.x * u_xlat16_42;
					    u_xlat16_42 = u_xlat16_2.x * u_xlat16_42;
					    u_xlat16_2.xyz = vec3(u_xlat16_42) * u_xlat16_10.xyz + u_xlat16_17.xyz;
					    u_xlat16_44 = (-u_xlat14.x) + 1.0;
					    u_xlat13.z = (-u_xlat14.x) + 1.0;
					    u_xlat14.x = texture2D(unity_NHxRoughness, u_xlat13.xz).x;
					    u_xlat14.x = u_xlat14.x * 16.0;
					    u_xlat16_3.xyz = u_xlat14.xxx * u_xlat16_17.xyz + u_xlat16_9.xyz;
					    u_xlat16_45 = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_45;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat14.x = dot((-u_xlat6.xyz), u_xlat16_5.xyz);
					    u_xlat14.x = u_xlat14.x + u_xlat14.x;
					    u_xlat22.xyz = u_xlat16_5.xyz * (-u_xlat14.xxx) + (-u_xlat6.xyz);
					    u_xlat10_10 = textureCubeLodEXT(unity_SpecCube0, u_xlat22.xyz, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_10.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_11.xyz = u_xlat10_10.xyz * vec3(u_xlat16_44);
					    u_xlat14.x = u_xlat8.x * u_xlat8.x;
					    u_xlat14.x = u_xlat14.x * u_xlat14.x;
					    u_xlat14.x = u_xlat8.x * u_xlat14.x + 0.0500000007;
					    u_xlat42 = (-u_xlat14.x) + 1.0;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat14.x = u_xlat14.x * _CoatAmount;
					    u_xlat16_43 = (-vs_COLOR0.x) + 1.0;
					    u_xlat43 = _BaseOcclusion * u_xlat16_43 + vs_COLOR0.x;
					    u_xlat42 = u_xlat42 * u_xlat43;
					    u_xlat14.x = u_xlat14.x * u_xlat43;
					    u_xlat16_11.xyz = vec3(u_xlat42) * u_xlat16_11.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_11.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_11.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_11.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_11.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_11.xyz = u_xlat16_11.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_11.xyz = max(u_xlat16_11.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_8.xyz = log2(u_xlat16_11.xyz);
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);
					    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_11.xyz = vec3(u_xlat42) * u_xlat16_8.xyz;
					    u_xlat16_2.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz + u_xlat16_2.xyz;
					    u_xlat8.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat8.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat8.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat42 = dot(u_xlat7.xyz, u_xlat8.xyz);
					    u_xlat28 = (-u_xlat42) + u_xlat28;
					    u_xlat28 = unity_ShadowFadeCenterAndType.w * u_xlat28 + u_xlat42;
					    u_xlat28 = u_xlat28 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat42 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb42 = vs_TEXCOORD6.z<u_xlat42;
					    u_xlat42 = u_xlatb42 ? 1.0 : float(0.0);
					    u_xlat42 = max(u_xlat42, _LightShadowData.x);
					    u_xlat16_44 = (-u_xlat42) + 1.0;
					    u_xlat16_44 = u_xlat28 * u_xlat16_44 + u_xlat42;
					    u_xlat16_9.xyz = vec3(u_xlat16_44) * _LightColor0.xyz;
					    u_xlat16_11.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_3.xyz * u_xlat16_11.xyz + u_xlat16_2.xyz;
					    u_xlat0.xz = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xzw = texture2D(_CoatNormal, u_xlat0.xz).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(u_xlat4.xyz, u_xlat16_3.xyz);
					    u_xlat16_11.y = dot(u_xlat12.xyz, u_xlat16_3.xyz);
					    u_xlat16_11.z = dot(u_xlat1.xyz, u_xlat16_3.xyz);
					    u_xlat0.x = dot((-u_xlat6.xyz), u_xlat16_11.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat0.xzw = u_xlat16_11.xyz * (-u_xlat0.xxx) + (-u_xlat6.xyz);
					    u_xlat16_44 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_3.x = (-u_xlat16_44) * 0.699999988 + 1.70000005;
					    u_xlat16_44 = u_xlat16_44 * u_xlat16_3.x;
					    u_xlat16_44 = u_xlat16_44 * 6.0;
					    u_xlat10_1 = textureCubeLodEXT(unity_SpecCube0, u_xlat0.xzw, u_xlat16_44);
					    u_xlat16_44 = u_xlat10_1.w + -1.0;
					    u_xlat16_44 = unity_SpecCube0_HDR.w * u_xlat16_44 + 1.0;
					    u_xlat16_44 = u_xlat16_44 * unity_SpecCube0_HDR.x;
					    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(u_xlat16_44);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat1.x = dot(u_xlat6.xyz, u_xlat16_0.xzw);
					    u_xlat15 = u_xlat1.x;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_0.xzw * (-u_xlat1.xxx) + u_xlat6.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_9.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat16_44 = (-u_xlat15) + 1.0;
					    u_xlat16_42 = u_xlat16_44 * u_xlat16_44;
					    u_xlat16_42 = u_xlat16_44 * u_xlat16_42;
					    u_xlat16_42 = u_xlat16_44 * u_xlat16_42;
					    u_xlat16_44 = _CoatSmoothness + 1.0;
					    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);
					    u_xlat16_44 = u_xlat16_44 + -1.0;
					    u_xlat16_44 = u_xlat16_42 * u_xlat16_44 + 1.0;
					    u_xlat16_3.xyz = vec3(u_xlat16_44) * u_xlat16_3.xyz;
					    u_xlat0.z = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat16_3.xyz;
					    u_xlat16_0.xzw = (-u_xlat16_2.xyz) + u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat14.xxx * u_xlat16_0.xzw + u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat42 = vs_TEXCOORD3.y;
					    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2 = u_xlat1.xxxx * u_xlat2.xyzz;
					    u_xlat1.x = u_xlat1.y * u_xlat2.w;
					    u_xlat1.x = u_xlat2.y * u_xlat1.z + (-u_xlat1.x);
					    u_xlat1.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat1.w * u_xlat1.x;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.xy = u_xlat1.yw;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat3 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec4 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump vec3 u_xlat16_14;
					mediump float u_xlat16_15;
					float u_xlat18;
					float u_xlat19;
					mediump vec3 u_xlat16_19;
					float u_xlat30;
					vec2 u_xlat33;
					float u_xlat45;
					float u_xlat46;
					mediump float u_xlat16_47;
					float u_xlat48;
					mediump float u_xlat16_48;
					float u_xlat49;
					mediump float u_xlat16_49;
					mediump float u_xlat16_50;
					float u_xlat51;
					mediump float u_xlat16_51;
					float u_xlat52;
					mediump float u_xlat16_57;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = sqrt(u_xlat45);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat45 = u_xlat45 + (-u_xlat1.x);
					    u_xlat45 = unity_ShadowFadeCenterAndType.w * u_xlat45 + u_xlat1.x;
					    u_xlat45 = u_xlat45 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat45 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = max(u_xlat45, 0.00100000005);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = max(u_xlat45, 0.319999993);
					    u_xlat46 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat3.xy);
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat3.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat46 = u_xlat10_4.w * u_xlat46 + _BaseSmoothness;
					    u_xlat3.x = (-u_xlat46) + 1.0;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + 1.5;
					    u_xlat18 = u_xlat45 * u_xlat18;
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat6.y = vs_TEXCOORD3.x;
					    u_xlat6.z = vs_TEXCOORD1.x;
					    u_xlat6.x = vs_TEXCOORD2.x;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat16_8.xyz = u_xlat6.xyz * u_xlat7.zxy;
					    u_xlat16_8.xyz = u_xlat7.yzx * u_xlat6.yzx + (-u_xlat16_8.xyz);
					    u_xlat33.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat33.xy = (-u_xlat33.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat16_8.xzy * vs_TEXCOORD2.yyy;
					    u_xlat7.y = u_xlat6.x;
					    u_xlat7.xz = vs_TEXCOORD1.xz;
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat9.y = u_xlat6.z;
					    u_xlat9.xz = vs_TEXCOORD2.xz;
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat6.xz = vs_TEXCOORD3.xz;
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat16_51 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_51 = inversesqrt(u_xlat16_51);
					    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_8.xyz;
					    u_xlat51 = dot(u_xlat16_10.xyz, u_xlat1.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = u_xlat3.x * u_xlat3.x;
					    u_xlat16_47 = u_xlat3.x * u_xlat52;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat3.x = u_xlat52 * u_xlat52 + -1.0;
					    u_xlat3.x = u_xlat51 * u_xlat3.x + 1.00001001;
					    u_xlat3.x = u_xlat3.x * u_xlat18;
					    u_xlat3.x = u_xlat52 / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + -9.99999975e-05;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat3.x = min(u_xlat3.x, 100.0);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = u_xlat10_4.www * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat18 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat18 = u_xlat10_4.w * u_xlat18 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_50 = (-u_xlat18) * 0.779083729 + 0.779083729;
					    u_xlat16_12.xyz = u_xlat4.xyz * vec3(u_xlat16_50);
					    u_xlat16_50 = (-u_xlat16_50) + 1.0;
					    u_xlat16_50 = u_xlat46 + u_xlat16_50;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_57 = (-u_xlat46) + 1.0;
					    u_xlat16_13.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_50);
					    u_xlat3.xyw = u_xlat3.xxx * u_xlat16_5.xyz + u_xlat16_12.xyz;
					    u_xlat3.xyw = u_xlat16_2.xyz * u_xlat3.xyw;
					    u_xlat16_8.w = 1.0;
					    u_xlat16_14.x = dot(unity_SHAr, u_xlat16_8);
					    u_xlat16_14.y = dot(unity_SHAg, u_xlat16_8);
					    u_xlat16_14.z = dot(unity_SHAb, u_xlat16_8);
					    u_xlat16_14.xyz = u_xlat16_14.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_14.xyz = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_14.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat46 = u_xlat33.x * u_xlat33.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat33.x * u_xlat46 + 0.0500000007;
					    u_xlat33.x = (-u_xlat46) + 1.0;
					    u_xlat33.x = clamp(u_xlat33.x, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * _CoatAmount;
					    u_xlat16_49 = (-vs_COLOR0.x) + 1.0;
					    u_xlat49 = _BaseOcclusion * u_xlat16_49 + vs_COLOR0.x;
					    u_xlat33.x = u_xlat33.x * u_xlat49;
					    u_xlat46 = u_xlat46 * u_xlat49;
					    u_xlat16_14.xyz = u_xlat33.xxx * u_xlat16_4.xyz;
					    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;
					    u_xlat16_4.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat16_10.xyz, u_xlat0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat16_50 = (-u_xlat19) + 1.0;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_5.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyw = u_xlat3.xyw * u_xlat16_4.xxx + u_xlat16_12.xyz;
					    u_xlat16_50 = (-u_xlat16_57) * 0.699999988 + 1.70000005;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_57;
					    u_xlat16_50 = u_xlat16_50 * 6.0;
					    u_xlat4.x = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-u_xlat4.xxx) + (-u_xlat0.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_50);
					    u_xlat16_50 = u_xlat10_4.w + -1.0;
					    u_xlat16_50 = unity_SpecCube0_HDR.w * u_xlat16_50 + 1.0;
					    u_xlat16_50 = u_xlat16_50 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_50);
					    u_xlat16_8.xyz = u_xlat33.xxx * u_xlat16_8.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
					    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat3.xyw;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat48 = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-vec3(u_xlat48)) + (-u_xlat0.xyz);
					    u_xlat16_47 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_5.x = (-u_xlat16_47) * 0.699999988 + 1.70000005;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_5.x;
					    u_xlat16_47 = u_xlat16_47 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_47);
					    u_xlat16_47 = u_xlat10_4.w + -1.0;
					    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_47);
					    u_xlat48 = (-_CoatSmoothness) + 1.0;
					    u_xlat4.x = u_xlat48 * u_xlat48;
					    u_xlat16_47 = u_xlat48 * u_xlat4.x;
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.5;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_47);
					    u_xlat16_48 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_48 = inversesqrt(u_xlat16_48);
					    u_xlat16_19.xyz = vec3(u_xlat16_48) * u_xlat16_8.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_47 = (-u_xlat0.x) + 1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_50 = _CoatSmoothness + 1.0;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_50 = u_xlat16_50 + -1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_50 + 1.0;
					    u_xlat16_5.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_15 = dot(u_xlat16_19.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat30 = u_xlat4.x * u_xlat4.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat45;
					    u_xlat0.x = u_xlat4.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_15) + u_xlat16_5.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat46) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat45 = vs_TEXCOORD3.y;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					varying highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat25;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD3.y = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat2 = u_xlat1.xxxx * u_xlat2.xyzz;
					    u_xlat1.x = u_xlat1.y * u_xlat2.w;
					    u_xlat1.x = u_xlat2.y * u_xlat1.z + (-u_xlat1.x);
					    u_xlat1.w = in_TANGENT0.w * unity_WorldTransformParams.w;
					    vs_TEXCOORD1.y = u_xlat1.w * u_xlat1.x;
					    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD1.w = u_xlat3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.xy = u_xlat1.yw;
					    vs_TEXCOORD3.x = u_xlat1.z;
					    vs_TEXCOORD2.w = u_xlat3.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat3.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat3.xxxx) + unity_4LightPosX0;
					    u_xlat4 = (-u_xlat3.yyyy) + unity_4LightPosY0;
					    u_xlat3 = (-u_xlat3.zzzz) + unity_4LightPosZ0;
					    u_xlat5 = u_xlat2.yyyy * u_xlat4;
					    u_xlat4 = u_xlat4 * u_xlat4;
					    u_xlat4 = u_xlat1 * u_xlat1 + u_xlat4;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat5;
					    u_xlat1 = u_xlat3 * u_xlat2.wwzw + u_xlat1;
					    u_xlat3 = u_xlat3 * u_xlat3 + u_xlat4;
					    u_xlat3 = max(u_xlat3, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat4 = inversesqrt(u_xlat3);
					    u_xlat3 = u_xlat3 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat3 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat4;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat1 = u_xlat3 * u_xlat1;
					    u_xlat3.xyz = u_xlat1.yyy * unity_LightColor[1].xyz;
					    u_xlat3.xyz = unity_LightColor[0].xyz * u_xlat1.xxx + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[2].xyz * u_xlat1.zzz + u_xlat3.xyz;
					    u_xlat1.xyz = unity_LightColor[3].xyz * u_xlat1.www + u_xlat1.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_6.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_6.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_6.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_7.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_7.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_7.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_6.xyz = unity_SHC.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz * u_xlat3.xyz + u_xlat16_6.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube unity_SpecCube0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec4 vs_TEXCOORD1;
					varying highp vec4 vs_TEXCOORD2;
					varying highp vec4 vs_TEXCOORD3;
					varying mediump vec4 vs_COLOR0;
					varying mediump vec3 vs_TEXCOORD4;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					vec3 u_xlat1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec4 u_xlat3;
					lowp vec3 u_xlat10_3;
					vec3 u_xlat4;
					mediump vec3 u_xlat16_4;
					lowp vec4 u_xlat10_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec4 u_xlat16_8;
					vec3 u_xlat9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_12;
					mediump vec3 u_xlat16_13;
					mediump vec3 u_xlat16_14;
					mediump float u_xlat16_15;
					float u_xlat18;
					float u_xlat19;
					mediump vec3 u_xlat16_19;
					float u_xlat30;
					vec2 u_xlat33;
					float u_xlat45;
					float u_xlat46;
					mediump float u_xlat16_47;
					float u_xlat48;
					mediump float u_xlat16_48;
					float u_xlat49;
					mediump float u_xlat16_49;
					mediump float u_xlat16_50;
					float u_xlat51;
					mediump float u_xlat16_51;
					float u_xlat52;
					mediump float u_xlat16_57;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = sqrt(u_xlat45);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat1.x = dot(u_xlat0.xyz, u_xlat1.xyz);
					    u_xlat45 = u_xlat45 + (-u_xlat1.x);
					    u_xlat45 = unity_ShadowFadeCenterAndType.w * u_xlat45 + u_xlat1.x;
					    u_xlat45 = u_xlat45 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat1.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb1 = vs_TEXCOORD6.z<u_xlat1.x;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat1.x = max(u_xlat1.x, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat1.x) + 1.0;
					    u_xlat16_2.x = u_xlat45 * u_xlat16_2.x + u_xlat1.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;
					    u_xlat45 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat45 = max(u_xlat45, 0.00100000005);
					    u_xlat45 = inversesqrt(u_xlat45);
					    u_xlat1.xyz = vec3(u_xlat45) * u_xlat1.xyz;
					    u_xlat45 = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat45 = max(u_xlat45, 0.319999993);
					    u_xlat46 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat3.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_4 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat3.xy);
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat3.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat46 = u_xlat10_4.w * u_xlat46 + _BaseSmoothness;
					    u_xlat3.x = (-u_xlat46) + 1.0;
					    u_xlat18 = u_xlat3.x * u_xlat3.x + 1.5;
					    u_xlat18 = u_xlat45 * u_xlat18;
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat6.y = vs_TEXCOORD3.x;
					    u_xlat6.z = vs_TEXCOORD1.x;
					    u_xlat6.x = vs_TEXCOORD2.x;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat16_8.xyz = u_xlat6.xyz * u_xlat7.zxy;
					    u_xlat16_8.xyz = u_xlat7.yzx * u_xlat6.yzx + (-u_xlat16_8.xyz);
					    u_xlat33.x = dot(u_xlat7.xyz, u_xlat0.xyz);
					    u_xlat33.xy = (-u_xlat33.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat16_8.xzy * vs_TEXCOORD2.yyy;
					    u_xlat7.y = u_xlat6.x;
					    u_xlat7.xz = vs_TEXCOORD1.xz;
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat9.y = u_xlat6.z;
					    u_xlat9.xz = vs_TEXCOORD2.xz;
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat6.xz = vs_TEXCOORD3.xz;
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat16_51 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_51 = inversesqrt(u_xlat16_51);
					    u_xlat16_10.xyz = vec3(u_xlat16_51) * u_xlat16_8.xyz;
					    u_xlat51 = dot(u_xlat16_10.xyz, u_xlat1.xyz);
					    u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
					    u_xlat51 = u_xlat51 * u_xlat51;
					    u_xlat52 = u_xlat3.x * u_xlat3.x;
					    u_xlat16_47 = u_xlat3.x * u_xlat52;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat3.x = u_xlat52 * u_xlat52 + -1.0;
					    u_xlat3.x = u_xlat51 * u_xlat3.x + 1.00001001;
					    u_xlat3.x = u_xlat3.x * u_xlat18;
					    u_xlat3.x = u_xlat52 / u_xlat3.x;
					    u_xlat3.x = u_xlat3.x + -9.99999975e-05;
					    u_xlat3.x = max(u_xlat3.x, 0.0);
					    u_xlat3.x = min(u_xlat3.x, 100.0);
					    u_xlat11.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _FlakesColor1.xyz;
					    u_xlat4.xyz = u_xlat10_4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat11.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat33.yyy * u_xlat11.xyz + _BaseColor1.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + (-u_xlat11.xyz);
					    u_xlat4.xyz = u_xlat10_4.www * u_xlat4.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat4.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat18 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat18 = u_xlat10_4.w * u_xlat18 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_50 = (-u_xlat18) * 0.779083729 + 0.779083729;
					    u_xlat16_12.xyz = u_xlat4.xyz * vec3(u_xlat16_50);
					    u_xlat16_50 = (-u_xlat16_50) + 1.0;
					    u_xlat16_50 = u_xlat46 + u_xlat16_50;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_57 = (-u_xlat46) + 1.0;
					    u_xlat16_13.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_50);
					    u_xlat3.xyw = u_xlat3.xxx * u_xlat16_5.xyz + u_xlat16_12.xyz;
					    u_xlat3.xyw = u_xlat16_2.xyz * u_xlat3.xyw;
					    u_xlat16_8.w = 1.0;
					    u_xlat16_14.x = dot(unity_SHAr, u_xlat16_8);
					    u_xlat16_14.y = dot(unity_SHAg, u_xlat16_8);
					    u_xlat16_14.z = dot(unity_SHAb, u_xlat16_8);
					    u_xlat16_14.xyz = u_xlat16_14.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_14.xyz = max(u_xlat16_14.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_4.xyz = log2(u_xlat16_14.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);
					    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat46 = u_xlat33.x * u_xlat33.x;
					    u_xlat46 = u_xlat46 * u_xlat46;
					    u_xlat46 = u_xlat33.x * u_xlat46 + 0.0500000007;
					    u_xlat33.x = (-u_xlat46) + 1.0;
					    u_xlat33.x = clamp(u_xlat33.x, 0.0, 1.0);
					    u_xlat46 = u_xlat46 * _CoatAmount;
					    u_xlat16_49 = (-vs_COLOR0.x) + 1.0;
					    u_xlat49 = _BaseOcclusion * u_xlat16_49 + vs_COLOR0.x;
					    u_xlat33.x = u_xlat33.x * u_xlat49;
					    u_xlat46 = u_xlat46 * u_xlat49;
					    u_xlat16_14.xyz = u_xlat33.xxx * u_xlat16_4.xyz;
					    u_xlat16_12.xyz = u_xlat16_12.xyz * u_xlat16_14.xyz;
					    u_xlat16_4.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
					    u_xlat19 = dot(u_xlat16_10.xyz, u_xlat0.xyz);
					    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);
					    u_xlat16_50 = (-u_xlat19) + 1.0;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_50;
					    u_xlat16_5.xyz = vec3(u_xlat16_50) * u_xlat16_13.xyz + u_xlat16_5.xyz;
					    u_xlat3.xyw = u_xlat3.xyw * u_xlat16_4.xxx + u_xlat16_12.xyz;
					    u_xlat16_50 = (-u_xlat16_57) * 0.699999988 + 1.70000005;
					    u_xlat16_50 = u_xlat16_50 * u_xlat16_57;
					    u_xlat16_50 = u_xlat16_50 * 6.0;
					    u_xlat4.x = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat4.x = u_xlat4.x + u_xlat4.x;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-u_xlat4.xxx) + (-u_xlat0.xyz);
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_50);
					    u_xlat16_50 = u_xlat10_4.w + -1.0;
					    u_xlat16_50 = unity_SpecCube0_HDR.w * u_xlat16_50 + 1.0;
					    u_xlat16_50 = u_xlat16_50 * unity_SpecCube0_HDR.x;
					    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(u_xlat16_50);
					    u_xlat16_8.xyz = u_xlat33.xxx * u_xlat16_8.xyz;
					    u_xlat16_8.xyz = vec3(u_xlat16_47) * u_xlat16_8.xyz;
					    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat16_5.xyz + u_xlat3.xyw;
					    u_xlat4.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_4.xyz = texture2D(_CoatNormal, u_xlat4.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(u_xlat7.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(u_xlat9.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(u_xlat6.xyz, u_xlat16_5.xyz);
					    u_xlat48 = dot((-u_xlat0.xyz), u_xlat16_8.xyz);
					    u_xlat48 = u_xlat48 + u_xlat48;
					    u_xlat4.xyz = u_xlat16_8.xyz * (-vec3(u_xlat48)) + (-u_xlat0.xyz);
					    u_xlat16_47 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_5.x = (-u_xlat16_47) * 0.699999988 + 1.70000005;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_5.x;
					    u_xlat16_47 = u_xlat16_47 * 6.0;
					    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_47);
					    u_xlat16_47 = u_xlat10_4.w + -1.0;
					    u_xlat16_47 = unity_SpecCube0_HDR.w * u_xlat16_47 + 1.0;
					    u_xlat16_47 = u_xlat16_47 * unity_SpecCube0_HDR.x;
					    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_47);
					    u_xlat48 = (-_CoatSmoothness) + 1.0;
					    u_xlat4.x = u_xlat48 * u_xlat48;
					    u_xlat16_47 = u_xlat48 * u_xlat4.x;
					    u_xlat48 = u_xlat48 * u_xlat48 + 1.5;
					    u_xlat45 = u_xlat45 * u_xlat48;
					    u_xlat16_47 = (-u_xlat16_47) * 0.280000001 + 1.0;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_47);
					    u_xlat16_48 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_48 = inversesqrt(u_xlat16_48);
					    u_xlat16_19.xyz = vec3(u_xlat16_48) * u_xlat16_8.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat0.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_47 = (-u_xlat0.x) + 1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_47;
					    u_xlat16_50 = _CoatSmoothness + 1.0;
					    u_xlat16_50 = clamp(u_xlat16_50, 0.0, 1.0);
					    u_xlat16_50 = u_xlat16_50 + -1.0;
					    u_xlat16_47 = u_xlat16_47 * u_xlat16_50 + 1.0;
					    u_xlat16_5.xyz = vec3(u_xlat16_47) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat16_19.xyz, u_xlat1.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_15 = dot(u_xlat16_19.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat30 = u_xlat4.x * u_xlat4.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat30 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat45;
					    u_xlat0.x = u_xlat4.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_2.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_15) + u_xlat16_5.xyz;
					    u_xlat0.xyz = (-u_xlat3.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = vec3(u_xlat46) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat45 = vs_TEXCOORD3.y;
					    u_xlat45 = clamp(u_xlat45, 0.0, 1.0);
					    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					mediump vec4 u_xlat16_4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump vec3 u_xlat16_11;
					float u_xlat20;
					mediump float u_xlat16_20;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					void main()
					{
					    u_xlat0.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat1.x = vs_TEXCOORD1.z;
					    u_xlat1.y = vs_TEXCOORD2.z;
					    u_xlat1.z = vs_TEXCOORD3.z;
					    u_xlat2.x = vs_TEXCOORD1.w;
					    u_xlat2.y = vs_TEXCOORD2.w;
					    u_xlat2.z = vs_TEXCOORD3.w;
					    u_xlat3.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat2.xyz = vec3(u_xlat31) * u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat2.xyz);
					    u_xlat1.xy = (-u_xlat1.xx) + vec2(1.0, 1.04999995);
					    u_xlat0.xyz = u_xlat1.yyy * u_xlat0.xyz + _FlakesColor1.xyz;
					    u_xlat21.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_4 = texture(_FlakesRGBcolorvariationAmask, u_xlat21.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat21.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat4.xyz = (-u_xlat0.xyz) + u_xlat16_4.xyz;
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat4.xyz + u_xlat0.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat1.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat11.xyz);
					    u_xlat0.xyz = u_xlat16_4.www * u_xlat0.xyz + u_xlat11.xyz;
					    u_xlat16_7.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat11.x = u_xlat16_4.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_7.xyz = u_xlat11.xxx * u_xlat16_7.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_36 = (-u_xlat11.x) * 0.779083729 + 0.779083729;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_8.xyz = u_xlat0.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat0.x = u_xlat16_4.w * u_xlat0.x + _BaseSmoothness;
					    u_xlat16_36 = u_xlat16_37 + u_xlat0.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_36);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_4.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_4.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_10.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_11.xyz = u_xlat16_10.xxx * u_xlat16_4.xyz;
					    u_xlat10.x = dot(u_xlat2.xyz, u_xlat16_11.xyz);
					    u_xlat20 = u_xlat10.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat5.xyz = u_xlat16_11.xyz * (-u_xlat10.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_11.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11.x = u_xlat11.x * u_xlat11.x;
					    u_xlat5.x = u_xlat11.x * u_xlat11.x;
					    u_xlat16_6.x = (-u_xlat20) + 1.0;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_6.x;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_20 = u_xlat16_6.x * u_xlat16_20;
					    u_xlat16_6.xyz = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_7.xyz;
					    u_xlat16_36 = (-u_xlat0.x) + 1.0;
					    u_xlat5.z = (-u_xlat0.x) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat5.xz).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_8.xyz;
					    u_xlat16_37 = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_37;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat0.x = dot((-u_xlat2.xyz), u_xlat16_4.xyz);
					    u_xlat0.x = u_xlat0.x + u_xlat0.x;
					    u_xlat11.xyz = u_xlat16_4.xyz * (-u_xlat0.xxx) + (-u_xlat2.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat11.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_5.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_9.xyz = u_xlat16_5.xyz * vec3(u_xlat16_36);
					    u_xlat0.x = u_xlat1.x * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x + 0.0500000007;
					    u_xlat20 = (-u_xlat0.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat20 = u_xlat20 * u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_9.xyz;
					    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_9.xyz;
					    u_xlat16_4.w = 1.0;
					    u_xlat16_9.x = dot(unity_SHAr, u_xlat16_4);
					    u_xlat16_9.y = dot(unity_SHAg, u_xlat16_4);
					    u_xlat16_9.z = dot(unity_SHAb, u_xlat16_4);
					    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_1.xyz = log2(u_xlat16_9.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_1.xyz = exp2(u_xlat16_1.xyz);
					    u_xlat16_1.xyz = u_xlat16_1.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_1.xyz = max(u_xlat16_1.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_9.xyz = vec3(u_xlat20) * u_xlat16_1.xyz;
					    u_xlat16_6.xyz = u_xlat16_9.xyz * u_xlat16_8.xyz + u_xlat16_6.xyz;
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat20 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat30 = (-u_xlat20) + u_xlat30;
					    u_xlat20 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat20;
					    u_xlat20 = u_xlat20 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
					#else
					    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
					#endif
					    u_xlat1.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat16_30 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_36 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_36 = u_xlat16_30 * u_xlat16_36 + _LightShadowData.x;
					    u_xlat16_37 = (-u_xlat16_36) + 1.0;
					    u_xlat16_36 = u_xlat20 * u_xlat16_37 + u_xlat16_36;
					    u_xlat16_8.xyz = vec3(u_xlat16_36) * _LightColor0.xyz;
					    u_xlat16_9.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat16_6.xyz = u_xlat16_7.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;
					    u_xlat16_36 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_36) * 0.699999988 + 1.70000005;
					    u_xlat16_36 = u_xlat16_36 * u_xlat16_7.x;
					    u_xlat16_36 = u_xlat16_36 * 6.0;
					    u_xlat10.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_10.xyz = texture(_CoatNormal, u_xlat10.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_10.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat10.x = dot((-u_xlat2.xyz), u_xlat16_9.xyz);
					    u_xlat10.x = u_xlat10.x + u_xlat10.x;
					    u_xlat10.xyz = u_xlat16_9.xyz * (-u_xlat10.xxx) + (-u_xlat2.xyz);
					    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat10.xyz, u_xlat16_36);
					    u_xlat16_36 = u_xlat16_1.w + -1.0;
					    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;
					    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_36);
					    u_xlat16_10.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
					    u_xlat16_10.xyz = u_xlat16_10.xxx * u_xlat16_9.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat16_10.xyz);
					    u_xlat11.x = u_xlat1.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
					#else
					    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x + u_xlat1.x;
					    u_xlat1.xzw = u_xlat16_10.xyz * (-u_xlat1.xxx) + u_xlat2.xyz;
					    u_xlat16_10.x = dot(u_xlat16_10.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
					#else
					    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
					#endif
					    u_xlat16_8.xyz = u_xlat16_10.xxx * u_xlat16_8.xyz;
					    u_xlat10.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_36 = (-u_xlat11.x) + 1.0;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_36;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_10.x = u_xlat16_36 * u_xlat16_10.x;
					    u_xlat16_36 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_36 = min(max(u_xlat16_36, 0.0), 1.0);
					#else
					    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);
					#endif
					    u_xlat16_36 = u_xlat16_36 + -1.0;
					    u_xlat16_36 = u_xlat16_10.x * u_xlat16_36 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_36) * u_xlat16_7.xyz;
					    u_xlat1.z = (-_CoatSmoothness) + 1.0;
					    u_xlat10.x = texture(unity_NHxRoughness, u_xlat1.xz).x;
					    u_xlat10.x = u_xlat10.x * 16.0;
					    u_xlat16_7.xyz = u_xlat10.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
					    u_xlat16_10.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_10.xyz + u_xlat16_6.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 unity_4LightPosX0;
					uniform 	vec4 unity_4LightPosY0;
					uniform 	vec4 unity_4LightPosZ0;
					uniform 	mediump vec4 unity_4LightAtten0;
					uniform 	mediump vec4 unity_LightColor[8];
					uniform 	mediump vec4 unity_SHBr;
					uniform 	mediump vec4 unity_SHBg;
					uniform 	mediump vec4 unity_SHBb;
					uniform 	mediump vec4 unity_SHC;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out mediump vec4 vs_COLOR0;
					out mediump vec3 vs_TEXCOORD4;
					out highp vec4 vs_TEXCOORD6;
					out highp vec4 vs_TEXCOORD7;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					mediump vec4 u_xlat16_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					float u_xlat21;
					float u_xlat22;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD5 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat21 = inversesqrt(u_xlat21);
					    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    u_xlat21 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat22 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat2 = vec4(u_xlat22) * u_xlat2.xyzz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.wxy;
					    u_xlat3.xyz = u_xlat2.ywx * u_xlat1.yzx + (-u_xlat3.xyz);
					    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.w = u_xlat0.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD2.w = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.w = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat2.w;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = (-u_xlat0.xxxx) + unity_4LightPosX0;
					    u_xlat3 = (-u_xlat0.yyyy) + unity_4LightPosY0;
					    u_xlat0 = (-u_xlat0.zzzz) + unity_4LightPosZ0;
					    u_xlat4 = u_xlat2.yyyy * u_xlat3;
					    u_xlat3 = u_xlat3 * u_xlat3;
					    u_xlat3 = u_xlat1 * u_xlat1 + u_xlat3;
					    u_xlat1 = u_xlat1 * u_xlat2.xxxx + u_xlat4;
					    u_xlat1 = u_xlat0 * u_xlat2.wwzw + u_xlat1;
					    u_xlat0 = u_xlat0 * u_xlat0 + u_xlat3;
					    u_xlat0 = max(u_xlat0, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));
					    u_xlat3 = inversesqrt(u_xlat0);
					    u_xlat0 = u_xlat0 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat0 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat0;
					    u_xlat1 = u_xlat1 * u_xlat3;
					    u_xlat1 = max(u_xlat1, vec4(0.0, 0.0, 0.0, 0.0));
					    u_xlat0 = u_xlat0 * u_xlat1;
					    u_xlat1.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;
					    u_xlat1.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);
					    u_xlat16_5.x = u_xlat2.y * u_xlat2.y;
					    u_xlat16_5.x = u_xlat2.x * u_xlat2.x + (-u_xlat16_5.x);
					    u_xlat16_2 = u_xlat2.ywzx * u_xlat2;
					    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_2);
					    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_2);
					    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_2);
					    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;
					    vs_TEXCOORD4.xyz = u_xlat0.xyz * u_xlat1.xyz + u_xlat16_5.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 unity_SHAr;
					uniform 	mediump vec4 unity_SHAg;
					uniform 	mediump vec4 unity_SHAb;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 unity_FogColor;
					uniform 	mediump vec4 unity_SpecCube0_HDR;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD5;
					in highp vec4 vs_TEXCOORD1;
					in highp vec4 vs_TEXCOORD2;
					in highp vec4 vs_TEXCOORD3;
					in mediump vec4 vs_COLOR0;
					in mediump vec3 vs_TEXCOORD4;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec4 u_xlat16_5;
					mediump vec4 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec3 u_xlat12;
					vec3 u_xlat13;
					mediump vec3 u_xlat16_13;
					float u_xlat20;
					float u_xlat22;
					float u_xlat30;
					mediump float u_xlat16_31;
					float u_xlat32;
					mediump float u_xlat16_32;
					float u_xlat34;
					float u_xlat36;
					mediump float u_xlat16_36;
					mediump float u_xlat16_37;
					mediump float u_xlat16_38;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD2.www * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD1.www + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD3.www + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.x = vs_TEXCOORD1.w;
					    u_xlat0.y = vs_TEXCOORD2.w;
					    u_xlat0.z = vs_TEXCOORD3.w;
					    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat30 = sqrt(u_xlat30);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat30 = u_xlat30 + (-u_xlat2.x);
					    u_xlat30 = unity_ShadowFadeCenterAndType.w * u_xlat30 + u_xlat2.x;
					    u_xlat30 = u_xlat30 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat30 * u_xlat16_11 + u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.x = vs_TEXCOORD1.z;
					    u_xlat3.y = vs_TEXCOORD2.z;
					    u_xlat3.z = vs_TEXCOORD3.z;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat4.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30) + _WorldSpaceLightPos0.xyz;
					    u_xlat30 = dot(u_xlat3.xyz, u_xlat4.xyz);
					    u_xlat3.xy = (-vec2(u_xlat30)) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = u_xlat3.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat13.xyz = u_xlat3.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat5.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_6 = texture(_FlakesRGBcolorvariationAmask, u_xlat5.xy);
					    u_xlat16_5.xyz = texture(_FlakesNormal, u_xlat5.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat5.xyz = (-u_xlat13.xyz) + u_xlat16_6.xyz;
					    u_xlat13.xyz = vec3(_FlakeColorVariationAmount) * u_xlat5.xyz + u_xlat13.xyz;
					    u_xlat13.xyz = (-u_xlat2.xyz) + u_xlat13.xyz;
					    u_xlat2.xyz = u_xlat16_6.www * u_xlat13.xyz + u_xlat2.xyz;
					    u_xlat16_8.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat30 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_6.w * u_xlat30 + _BaseMetallic;
					    u_xlat16_8.xyz = vec3(u_xlat30) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_9.xyz = vec3(u_xlat16_31) * u_xlat2.xyz;
					    u_xlat16_31 = (-u_xlat16_31) + 1.0;
					    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat30 = max(u_xlat30, 0.00100000005);
					    u_xlat30 = inversesqrt(u_xlat30);
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
					    u_xlat30 = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat2.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat2.x = u_xlat16_6.w * u_xlat2.x + _BaseSmoothness;
					    u_xlat12.x = (-u_xlat2.x) + 1.0;
					    u_xlat22 = u_xlat12.x * u_xlat12.x + 1.5;
					    u_xlat22 = u_xlat30 * u_xlat22;
					    u_xlat32 = u_xlat12.x * u_xlat12.x;
					    u_xlat16_37 = u_xlat12.x * u_xlat32;
					    u_xlat16_37 = (-u_xlat16_37) * 0.280000001 + 1.0;
					    u_xlat12.x = u_xlat32 * u_xlat32 + -1.0;
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat16_13.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_13.x = inversesqrt(u_xlat16_13.x);
					    u_xlat16_13.xyz = u_xlat16_13.xxx * u_xlat16_5.xyz;
					    u_xlat34 = dot(u_xlat16_13.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat12.x = u_xlat34 * u_xlat12.x + 1.00001001;
					    u_xlat12.x = u_xlat12.x * u_xlat22;
					    u_xlat12.x = u_xlat32 / u_xlat12.x;
					    u_xlat12.x = u_xlat12.x + -9.99999975e-05;
					    u_xlat12.x = max(u_xlat12.x, 0.0);
					    u_xlat12.x = min(u_xlat12.x, 100.0);
					    u_xlat12.xyz = u_xlat12.xxx * u_xlat16_8.xyz + u_xlat16_9.xyz;
					    u_xlat12.xyz = u_xlat16_1.xyz * u_xlat12.xyz;
					    u_xlat16_5.w = 1.0;
					    u_xlat16_7.x = dot(unity_SHAr, u_xlat16_5);
					    u_xlat16_7.y = dot(unity_SHAg, u_xlat16_5);
					    u_xlat16_7.z = dot(unity_SHAb, u_xlat16_5);
					    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD4.xyz;
					    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat16_6.xyz = log2(u_xlat16_7.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);
					    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);
					    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);
					    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
					    u_xlat34 = u_xlat3.x * u_xlat3.x;
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat3.x = u_xlat3.x * u_xlat34 + 0.0500000007;
					    u_xlat34 = (-u_xlat3.x) + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat3.x = u_xlat3.x * _CoatAmount;
					    u_xlat16_36 = (-vs_COLOR0.x) + 1.0;
					    u_xlat36 = _BaseOcclusion * u_xlat16_36 + vs_COLOR0.x;
					    u_xlat34 = u_xlat34 * u_xlat36;
					    u_xlat3.x = u_xlat3.x * u_xlat36;
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_6.xyz;
					    u_xlat16_7.xyz = u_xlat16_9.xyz * u_xlat16_7.xyz;
					    u_xlat16_6.x = dot(u_xlat16_13.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
					#else
					    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
					#endif
					    u_xlat13.x = dot(u_xlat16_13.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
					#else
					    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
					#endif
					    u_xlat16_38 = (-u_xlat13.x) + 1.0;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;
					    u_xlat12.xyz = u_xlat12.xyz * u_xlat16_6.xxx + u_xlat16_7.xyz;
					    u_xlat16_31 = u_xlat16_31 + u_xlat2.x;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_31 = min(max(u_xlat16_31, 0.0), 1.0);
					#else
					    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);
					#endif
					    u_xlat16_7.x = (-u_xlat2.x) + 1.0;
					    u_xlat16_9.xyz = (-u_xlat16_8.xyz) + vec3(u_xlat16_31);
					    u_xlat16_8.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;
					    u_xlat2.x = dot((-u_xlat4.xyz), u_xlat16_5.xyz);
					    u_xlat2.x = u_xlat2.x + u_xlat2.x;
					    u_xlat13.xyz = u_xlat16_5.xyz * (-u_xlat2.xxx) + (-u_xlat4.xyz);
					    u_xlat16_31 = (-u_xlat16_7.x) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat16_7.xyz = vec3(u_xlat34) * u_xlat16_7.xyz;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_37);
					    u_xlat2.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz + u_xlat12.xyz;
					    u_xlat16_31 = (-_CoatSmoothness) + 1.0;
					    u_xlat16_7.x = (-u_xlat16_31) * 0.699999988 + 1.70000005;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_7.x;
					    u_xlat16_31 = u_xlat16_31 * 6.0;
					    u_xlat13.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_13.xyz = texture(_CoatNormal, u_xlat13.xy).xyz;
					    u_xlat16_7.xyz = u_xlat16_13.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_7.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_7.xyz);
					    u_xlat32 = dot((-u_xlat4.xyz), u_xlat16_8.xyz);
					    u_xlat32 = u_xlat32 + u_xlat32;
					    u_xlat13.xyz = u_xlat16_8.xyz * (-vec3(u_xlat32)) + (-u_xlat4.xyz);
					    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat13.xyz, u_xlat16_31);
					    u_xlat16_31 = u_xlat16_5.w + -1.0;
					    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;
					    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;
					    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(u_xlat16_31);
					    u_xlat32 = (-_CoatSmoothness) + 1.0;
					    u_xlat13.x = u_xlat32 * u_xlat32;
					    u_xlat16_31 = u_xlat32 * u_xlat13.x;
					    u_xlat32 = u_xlat32 * u_xlat32 + 1.5;
					    u_xlat30 = u_xlat30 * u_xlat32;
					    u_xlat16_31 = (-u_xlat16_31) * 0.280000001 + 1.0;
					    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31);
					    u_xlat16_32 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_32 = inversesqrt(u_xlat16_32);
					    u_xlat16_6.xyz = vec3(u_xlat16_32) * u_xlat16_8.xyz;
					    u_xlat32 = dot(u_xlat16_6.xyz, u_xlat4.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat32 = min(max(u_xlat32, 0.0), 1.0);
					#else
					    u_xlat32 = clamp(u_xlat32, 0.0, 1.0);
					#endif
					    u_xlat16_31 = (-u_xlat32) + 1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;
					    u_xlat16_37 = _CoatSmoothness + 1.0;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
					#else
					    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
					#endif
					    u_xlat16_37 = u_xlat16_37 + -1.0;
					    u_xlat16_31 = u_xlat16_31 * u_xlat16_37 + 1.0;
					    u_xlat16_7.xyz = vec3(u_xlat16_31) * u_xlat16_7.xyz;
					    u_xlat0.x = dot(u_xlat16_6.xyz, u_xlat0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_10 = dot(u_xlat16_6.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_10 = min(max(u_xlat16_10, 0.0), 1.0);
					#else
					    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);
					#endif
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat20 = u_xlat13.x * u_xlat13.x + -1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat20 + 1.00001001;
					    u_xlat0.x = u_xlat0.x * u_xlat30;
					    u_xlat0.x = u_xlat13.x / u_xlat0.x;
					    u_xlat0.x = u_xlat0.x + -9.99999975e-05;
					    u_xlat0.x = max(u_xlat0.x, 0.0);
					    u_xlat0.x = min(u_xlat0.x, 100.0);
					    u_xlat0.xzw = u_xlat16_1.xyz * u_xlat0.xxx;
					    u_xlat0.xyz = u_xlat0.xzw * vec3(u_xlat16_10) + u_xlat16_7.xyz;
					    u_xlat0.xyz = (-u_xlat2.xyz) + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat3.xxx * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-unity_FogColor.xyz);
					    u_xlat30 = vs_TEXCOORD5;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + unity_FogColor.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "FORWARD"
			Tags { "IsEmissive" = "true" "LIGHTMODE" = "FORWARDADD" "QUEUE" = "Geometry+0" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			Blend One One, One One
			ZWrite Off
			GpuProgramID 119025
			Program "vp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					vec3 u_xlat15;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat10_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = texture2D(_LightTexture0, u_xlat10.xx).x;
					    u_xlat16_3.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat1.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat1.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					vec3 u_xlat15;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat16_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = texture(_LightTexture0, u_xlat10.xx).x;
					    u_xlat16_3.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat1.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat1.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					vec2 u_xlat8;
					float u_xlat15;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat22)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15 = u_xlat10_0.w * u_xlat15 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat15) + 1.0;
					    u_xlat1.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat8.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat8.xy = (-u_xlat8.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat15 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat10_0.w * u_xlat15 + _BaseMetallic;
					    u_xlat16_3.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xzw = u_xlat16_0.xyz * (-vec3(u_xlat21)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat21 = u_xlat8.x * u_xlat8.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat8.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat10_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat10_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat10_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat10_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					vec2 u_xlat8;
					float u_xlat15;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat22)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15 = u_xlat16_0.w * u_xlat15 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat15) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat8.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat8.xy = (-u_xlat8.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat15 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat16_0.w * u_xlat15 + _BaseMetallic;
					    u_xlat16_3.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xzw = u_xlat16_0.xyz * (-vec3(u_xlat21)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat21 = u_xlat8.x * u_xlat8.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat8.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat16_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat16_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat16_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat16_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec2 u_xlat10;
					vec3 u_xlat15;
					bool u_xlatb20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat10_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
					    u_xlat10.x = texture2D(_LightTexture0, u_xlat10.xy).w;
					    u_xlatb20 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_32 = (u_xlatb20) ? 1.0 : 0.0;
					    u_xlat16_32 = u_xlat10.x * u_xlat16_32;
					    u_xlat10.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat10.x = texture2D(_LightTextureB0, u_xlat10.xx).x;
					    u_xlat16_32 = u_xlat10.x * u_xlat16_32;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat10.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
					    u_xlat27 = texture2D(_LightTexture0, u_xlat10.xz).w;
					    u_xlatb10 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_2.x = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat10.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
					    u_xlat27 = texture2D(_LightTexture0, u_xlat10.xz).w;
					    u_xlatb10 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_2.x = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec2 u_xlat10;
					vec3 u_xlat15;
					bool u_xlatb20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat16_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
					    u_xlat10.x = texture(_LightTexture0, u_xlat10.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb20 = 0.0<u_xlat1.z;
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = texture(_LightTextureB0, vec2(u_xlat30)).x;
					    u_xlat16_32 = (u_xlatb20) ? 1.0 : 0.0;
					    u_xlat16_32 = u_xlat10.x * u_xlat16_32;
					    u_xlat16_32 = u_xlat30 * u_xlat16_32;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat31) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = max(u_xlat31, 0.00100000005);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat31 * u_xlat31;
					    u_xlat21.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat21.x = u_xlat16_0.w * u_xlat21.x + _BaseSmoothness;
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat31 = u_xlat21.x * u_xlat21.x;
					    u_xlat21.x = u_xlat21.x * u_xlat21.x + 1.5;
					    u_xlat34 = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat34 + 1.00001001;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = max(u_xlat34, 0.319999993);
					    u_xlat21.x = u_xlat21.x * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat11.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat2 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat11.xz = u_xlat2.xy / u_xlat2.ww;
					    u_xlat11.xz = u_xlat11.xz + vec2(0.5, 0.5);
					    u_xlat30 = texture(_LightTexture0, u_xlat11.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(0.0<u_xlat2.z);
					#else
					    u_xlatb11 = 0.0<u_xlat2.z;
					#endif
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat31 = texture(_LightTextureB0, vec2(u_xlat31)).x;
					    u_xlat16_3.x = (u_xlatb11) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat30 * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat31 * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_30 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_30 = inversesqrt(u_xlat16_30);
					    u_xlat16_1.xyw = vec3(u_xlat16_30) * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat11.x = (-_CoatSmoothness) + 1.0;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat11.x = u_xlat11.x * u_xlat34;
					    u_xlat4.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat30 = u_xlat30 * u_xlat4.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat31 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_3.xyz * vec3(u_xlat30);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_21 = (-vs_COLOR0.x) + 1.0;
					    u_xlat21.x = _BaseOcclusion * u_xlat16_21 + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat31) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = max(u_xlat31, 0.00100000005);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat31 * u_xlat31;
					    u_xlat21.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat21.x = u_xlat16_0.w * u_xlat21.x + _BaseSmoothness;
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat31 = u_xlat21.x * u_xlat21.x;
					    u_xlat21.x = u_xlat21.x * u_xlat21.x + 1.5;
					    u_xlat34 = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat34 + 1.00001001;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = max(u_xlat34, 0.319999993);
					    u_xlat21.x = u_xlat21.x * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat11.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat2 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat11.xz = u_xlat2.xy / u_xlat2.ww;
					    u_xlat11.xz = u_xlat11.xz + vec2(0.5, 0.5);
					    u_xlat30 = texture(_LightTexture0, u_xlat11.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(0.0<u_xlat2.z);
					#else
					    u_xlatb11 = 0.0<u_xlat2.z;
					#endif
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat31 = texture(_LightTextureB0, vec2(u_xlat31)).x;
					    u_xlat16_3.x = (u_xlatb11) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat30 * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat31 * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_30 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_30 = inversesqrt(u_xlat16_30);
					    u_xlat16_1.xyw = vec3(u_xlat16_30) * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat11.x = (-_CoatSmoothness) + 1.0;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat11.x = u_xlat11.x * u_xlat34;
					    u_xlat4.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat30 = u_xlat30 * u_xlat4.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat31 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_3.xyz * vec3(u_xlat30);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_21 = (-vs_COLOR0.x) + 1.0;
					    u_xlat21.x = _BaseOcclusion * u_xlat16_21 + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					vec3 u_xlat15;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat10_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat10 = texture2D(_LightTextureB0, vec2(u_xlat10)).x;
					    u_xlat20 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat10 = u_xlat20 * u_xlat10;
					    u_xlat16_3.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat1.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat1.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat10 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat10 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					vec3 u_xlat15;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat16_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = texture(_LightTexture0, u_xlat10.xyz).w;
					    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat1)).x;
					    u_xlat10.x = u_xlat10.x * u_xlat20;
					    u_xlat16_3.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = texture(_LightTexture0, u_xlat4.xyz).w;
					    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat27 = u_xlat10 * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = texture(_LightTexture0, u_xlat4.xyz).w;
					    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat27 = u_xlat10 * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat25)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat9 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5.x = u_xlat9 * u_xlat9;
					    u_xlat9 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat9 = u_xlat10_0.w * u_xlat9 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat9) + 1.0;
					    u_xlat9 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat9 = u_xlat9 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat10_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat1.xyw = u_xlat16_0.xyz * (-vec3(u_xlat24)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat9 = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat10_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9 = u_xlat9 * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9 = u_xlat9 * u_xlat17.x;
					    u_xlat9 = u_xlat25 / u_xlat9;
					    u_xlat9 = u_xlat9 + -9.99999975e-05;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = min(u_xlat9, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat10_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat24 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9 * u_xlat9 + 1.5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat9 = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat10_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9 = u_xlat9 * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9 = u_xlat9 * u_xlat17.x;
					    u_xlat9 = u_xlat25 / u_xlat9;
					    u_xlat9 = u_xlat9 + -9.99999975e-05;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = min(u_xlat9, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat10_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat24 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9 * u_xlat9 + 1.5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat25)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat9 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5.x = u_xlat9 * u_xlat9;
					    u_xlat9 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat9 = u_xlat16_0.w * u_xlat9 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat9) + 1.0;
					    u_xlat9 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat9 = u_xlat9 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat16_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
					    u_xlat0.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat1.xyw = u_xlat16_0.xyz * (-vec3(u_xlat24)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat16_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9.x = u_xlat9.x * u_xlat17.x;
					    u_xlat9.x = u_xlat25 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat16_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat9.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat9.xz;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat9.xz;
					    u_xlat9.xz = u_xlat9.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat24 = texture(_LightTexture0, u_xlat9.xz).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9.x * u_xlat9.x + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9.x / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat16_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9.x = u_xlat9.x * u_xlat17.x;
					    u_xlat9.x = u_xlat25 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat16_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat9.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat9.xz;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat9.xz;
					    u_xlat9.xz = u_xlat9.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat24 = texture(_LightTexture0, u_xlat9.xz).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9.x * u_xlat9.x + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9.x / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					bool u_xlatb11;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat5.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat34)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
					    u_xlat34 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat6.x = u_xlat34 * u_xlat34;
					    u_xlat34 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat34 = u_xlat10_0.w * u_xlat34 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat34) + 1.0;
					    u_xlat34 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat34 = u_xlat34 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat37 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat37)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat37 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat33 = u_xlat10_0.w * u_xlat37 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat33) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat33) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat34) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = (-u_xlat0.x) + u_xlat11.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat11.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat11.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat11.x = texture2D(_ShadowMapTexture, u_xlat11.xy).x;
					    u_xlatb11 = u_xlat11.x<u_xlat11.z;
					    u_xlat16_35 = (u_xlatb11) ? _LightShadowData.x : 1.0;
					    u_xlat16_3.x = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_3.x + u_xlat16_35;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb11 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_3.x = (u_xlatb11) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_35) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_9.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_9.xy = u_xlat16_9.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_10.xyz;
					    u_xlat33 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat33) * u_xlat16_3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat33)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat33 = u_xlat8.x * u_xlat8.x;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat8.x * u_xlat33 + 0.0500000007;
					    u_xlat33 = u_xlat33 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat33 = u_xlat33 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					bool u_xlatb2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_10 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_19 = (-u_xlat16_10) + 1.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_19 + u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat10_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_2.xyz = texture2D(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					bool u_xlatb2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_10 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_19 = (-u_xlat16_10) + 1.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_19 + u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat10_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_2.xyz = texture2D(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					vec2 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					float u_xlat19;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat28) * u_xlat16_2.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat28 = u_xlat28 + u_xlat28;
					    u_xlat1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat19 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19 = u_xlat16_0.w * u_xlat19 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat19) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat10.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10.xy = (-u_xlat10.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat19 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat19 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat16_0.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat27)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat10.x * u_xlat10.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat10.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					bool u_xlatb9;
					vec2 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat18;
					float u_xlat19;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat9.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_12 = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat28) * u_xlat16_3.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_1.xyz);
					    u_xlat28 = u_xlat28 + u_xlat28;
					    u_xlat1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat19 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19 = u_xlat10_0.w * u_xlat19 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat19) + 1.0;
					    u_xlat1.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat10.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat10.xy = (-u_xlat10.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat19 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat19 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat27)) + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat10.x * u_xlat10.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat10.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat9.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_12 = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat2.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat29 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat29;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat9.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_12 = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat2.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat29 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat29;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					vec2 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					float u_xlat19;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat28) * u_xlat16_2.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat28 = u_xlat28 + u_xlat28;
					    u_xlat1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat19 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19 = u_xlat16_0.w * u_xlat19 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat19) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat10.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10.xy = (-u_xlat10.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat19 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat19 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat16_0.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat27)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat10.x * u_xlat10.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat10.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10.x;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10.x = max(u_xlat10.x, _LightShadowData.x);
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_32 + u_xlat10.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat10.xy,u_xlat10.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat16_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_3.x + u_xlat16_32;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10.x;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10.x = max(u_xlat10.x, _LightShadowData.x);
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_32 + u_xlat10.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat0.x = u_xlat16_32 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat27 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat27 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat10.xy,u_xlat10.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat16_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_3.x + u_xlat16_32;
					    u_xlat0.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat0.x = u_xlat16_32 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat27) + u_xlat10.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat10.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat10.xz;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat10.xz;
					    u_xlat10.xz = u_xlat10.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat27 = texture(_LightTexture0, u_xlat10.xz).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat27) + u_xlat10.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat10.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat10.xz;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat10.xz;
					    u_xlat10.xz = u_xlat10.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat27 = texture(_LightTexture0, u_xlat10.xz).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					mediump float u_xlat16_38;
					float u_xlat40;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat5.xyz = vec3(u_xlat37) * u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat37)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat37 = u_xlat37 * u_xlat37;
					    u_xlat6.x = u_xlat37 * u_xlat37;
					    u_xlat37 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat37 = u_xlat10_0.w * u_xlat37 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat37) + 1.0;
					    u_xlat37 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat37 = u_xlat37 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat40 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat40)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat40 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat36 = u_xlat10_0.w * u_xlat40 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat36) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_38 = (-u_xlat36) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat37) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_38) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat12.x = (-u_xlat0.x) + u_xlat12.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat12.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat37 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat10_3 = textureCube(_ShadowMapTexture, u_xlat12.xyz);
					    u_xlat12.x = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat24 = sqrt(u_xlat37);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlatb12 = u_xlat12.x<u_xlat24;
					    u_xlat16_38 = (u_xlatb12) ? _LightShadowData.x : 1.0;
					    u_xlat16_9.x = (-u_xlat16_38) + 1.0;
					    u_xlat16_38 = u_xlat0.x * u_xlat16_9.x + u_xlat16_38;
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_38 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10.xyz = u_xlat0.xxx * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_10.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_10.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.y = dot(vs_TEXCOORD2.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.z = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat36 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat16_9.xyz = vec3(u_xlat36) * u_xlat16_9.xyz;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat36 = u_xlat36 + u_xlat36;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat36)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + (-u_xlat16_2.xyz);
					    u_xlat36 = u_xlat8.x * u_xlat8.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat8.x * u_xlat36 + 0.0500000007;
					    u_xlat36 = u_xlat36 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat36 = u_xlat36 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump float u_xlat16_11;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat5.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat34)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
					    u_xlat34 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat6.x = u_xlat34 * u_xlat34;
					    u_xlat34 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat34 = u_xlat16_0.w * u_xlat34 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat34) + 1.0;
					    u_xlat34 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat34 = u_xlat34 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat37 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat37)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat37 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat33 = u_xlat16_0.w * u_xlat37 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat33) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat33) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat34) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = (-u_xlat0.x) + u_xlat11.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat11.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat34 = max(abs(u_xlat11.y), abs(u_xlat11.x));
					    u_xlat34 = max(abs(u_xlat11.z), u_xlat34);
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.z);
					    u_xlat34 = max(u_xlat34, 9.99999975e-06);
					    u_xlat34 = u_xlat34 * _LightProjectionParams.w;
					    u_xlat34 = _LightProjectionParams.y / u_xlat34;
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat11.xyz,u_xlat34);
					    u_xlat16_11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_35 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_35 = u_xlat16_11 * u_xlat16_35 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_3.x + u_xlat16_35;
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_35 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_9.xy = u_xlat16_9.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_10.xyz;
					    u_xlat33 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat33) * u_xlat16_3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat33)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat33 = u_xlat8.x * u_xlat8.x;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat8.x * u_xlat33 + 0.0500000007;
					    u_xlat33 = u_xlat33 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat33 = u_xlat33 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat16_0 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3.xyz = texture(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat16_2 = texture(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
					#else
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat16_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat16_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat16_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_2.xyz = texture(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat16_0 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3.xyz = texture(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat16_2 = texture(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
					#else
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat16_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat16_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat16_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_2.xyz = texture(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture2D(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat10_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat28) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + (-u_xlat16_5.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat16_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat28) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					mediump float u_xlat16_38;
					float u_xlat40;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat5.xyz = vec3(u_xlat37) * u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat37)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat37 = u_xlat37 * u_xlat37;
					    u_xlat6.x = u_xlat37 * u_xlat37;
					    u_xlat37 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat37 = u_xlat10_0.w * u_xlat37 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat37) + 1.0;
					    u_xlat37 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat37 = u_xlat37 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat40 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat40)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat40 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat36 = u_xlat10_0.w * u_xlat40 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat36) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_38 = (-u_xlat36) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat37) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_38) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat12.x = (-u_xlat0.x) + u_xlat12.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat12.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat37 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat10_3 = textureCube(_ShadowMapTexture, u_xlat12.xyz);
					    u_xlat12.x = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat24 = sqrt(u_xlat37);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlatb12 = u_xlat12.x<u_xlat24;
					    u_xlat16_38 = (u_xlatb12) ? _LightShadowData.x : 1.0;
					    u_xlat16_9.x = (-u_xlat16_38) + 1.0;
					    u_xlat16_38 = u_xlat0.x * u_xlat16_9.x + u_xlat16_38;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat12.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_38 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10.xyz = u_xlat0.xxx * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_10.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_10.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.y = dot(vs_TEXCOORD2.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.z = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat36 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat16_9.xyz = vec3(u_xlat36) * u_xlat16_9.xyz;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat36 = u_xlat36 + u_xlat36;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat36)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + (-u_xlat16_2.xyz);
					    u_xlat36 = u_xlat8.x * u_xlat8.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat8.x * u_xlat36 + 0.0500000007;
					    u_xlat36 = u_xlat36 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat36 = u_xlat36 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump float u_xlat16_11;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat5.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat34)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
					    u_xlat34 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat6.x = u_xlat34 * u_xlat34;
					    u_xlat34 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat34 = u_xlat16_0.w * u_xlat34 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat34) + 1.0;
					    u_xlat34 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat34 = u_xlat34 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat37 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat37)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat37 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat33 = u_xlat16_0.w * u_xlat37 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat33) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat33) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat34) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = (-u_xlat0.x) + u_xlat11.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat11.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat34 = max(abs(u_xlat11.y), abs(u_xlat11.x));
					    u_xlat34 = max(abs(u_xlat11.z), u_xlat34);
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.z);
					    u_xlat34 = max(u_xlat34, 9.99999975e-06);
					    u_xlat34 = u_xlat34 * _LightProjectionParams.w;
					    u_xlat34 = _LightProjectionParams.y / u_xlat34;
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat11.xyz,u_xlat34);
					    u_xlat16_11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_35 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_35 = u_xlat16_11 * u_xlat16_35 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_3.x + u_xlat16_35;
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat11.x = texture(_LightTextureB0, vec2(u_xlat33)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.x = u_xlat16_35 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_9.xy = u_xlat16_9.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_10.xyz;
					    u_xlat33 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat33) * u_xlat16_3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat33)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat33 = u_xlat8.x * u_xlat8.x;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat8.x * u_xlat33 + 0.0500000007;
					    u_xlat33 = u_xlat33 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat33 = u_xlat33 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat16_2.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat9.x = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat9.x;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat9.y), abs(u_xlat9.x));
					    u_xlat1.x = max(abs(u_xlat9.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat9.xyz,u_xlat1.x);
					    u_xlat16_9 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat9.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat9.x = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat9.x;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat9.y), abs(u_xlat9.x));
					    u_xlat1.x = max(abs(u_xlat9.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat9.xyz,u_xlat1.x);
					    u_xlat16_9 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat9.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture2D(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat10_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat28) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + (-u_xlat16_5.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_5.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat16_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat28) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					vec3 u_xlat15;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat10_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = texture2D(_LightTexture0, u_xlat10.xx).x;
					    u_xlat16_3.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat1.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat1.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture2D(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					vec3 u_xlat15;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat16_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = texture(_LightTexture0, u_xlat10.xx).x;
					    u_xlat16_3.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat1.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat10.x = u_xlat10.x * u_xlat10.x;
					    u_xlat1.x = u_xlat10.x * u_xlat10.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat1.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat27 = texture(_LightTexture0, vec2(u_xlat27)).x;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					vec2 u_xlat8;
					float u_xlat15;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat22)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat16_2.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15 = u_xlat10_0.w * u_xlat15 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat15) + 1.0;
					    u_xlat1.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat8.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat8.xy = (-u_xlat8.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat15 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat10_0.w * u_xlat15 + _BaseMetallic;
					    u_xlat16_3.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xzw = u_xlat16_0.xyz * (-vec3(u_xlat21)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat21 = u_xlat8.x * u_xlat8.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat8.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat10_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat10_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat10_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat10_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD7;
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					vec2 u_xlat8;
					float u_xlat15;
					float u_xlat21;
					float u_xlat22;
					mediump float u_xlat16_23;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat22 = u_xlat22 + u_xlat22;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat22)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat15 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15 = u_xlat16_0.w * u_xlat15 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat15) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat8.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat8.xy = (-u_xlat8.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat8.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat15 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat16_0.w * u_xlat15 + _BaseMetallic;
					    u_xlat16_3.xyz = vec3(u_xlat21) * u_xlat16_3.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_3.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_0.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
					    u_xlat21 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat21 = u_xlat21 + u_xlat21;
					    u_xlat1.xzw = u_xlat16_0.xyz * (-vec3(u_xlat21)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = u_xlat16_0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat1.xzw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat21 = u_xlat8.x * u_xlat8.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat8.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat21 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat16_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat16_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					float u_xlat8;
					vec2 u_xlat15;
					mediump float u_xlat16_15;
					float u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat22;
					mediump float u_xlat16_23;
					float u_xlat25;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat22 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat22) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat22) * u_xlat4.xyz;
					    u_xlat22 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat22 = max(u_xlat22, 0.00100000005);
					    u_xlat22 = inversesqrt(u_xlat22);
					    u_xlat5.xyz = vec3(u_xlat22) * u_xlat5.xyz;
					    u_xlat22 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat22 = min(max(u_xlat22, 0.0), 1.0);
					#else
					    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat22 * u_xlat22;
					    u_xlat15.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat15.x = u_xlat16_0.w * u_xlat15.x + _BaseSmoothness;
					    u_xlat15.x = (-u_xlat15.x) + 1.0;
					    u_xlat22 = u_xlat15.x * u_xlat15.x;
					    u_xlat15.x = u_xlat15.x * u_xlat15.x + 1.5;
					    u_xlat25 = u_xlat22 * u_xlat22 + -1.0;
					    u_xlat8 = u_xlat8 * u_xlat25 + 1.00001001;
					    u_xlat25 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat25 = max(u_xlat25, 0.319999993);
					    u_xlat15.x = u_xlat15.x * u_xlat25;
					    u_xlat8 = u_xlat8 * u_xlat15.x;
					    u_xlat8 = u_xlat22 / u_xlat8;
					    u_xlat8 = u_xlat8 + -9.99999975e-05;
					    u_xlat8 = max(u_xlat8, 0.0);
					    u_xlat8 = min(u_xlat8, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat15.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat15.xy = (-u_xlat15.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat15.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat22 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat21 = u_xlat16_0.w * u_xlat22 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat21) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_23 = (-u_xlat21) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat8) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_23) + u_xlat4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_2.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_21 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_21 = inversesqrt(u_xlat16_21);
					    u_xlat16_1.xyw = vec3(u_xlat16_21) * u_xlat16_3.xyz;
					    u_xlat16_21 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
					#else
					    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat8 = (-_CoatSmoothness) + 1.0;
					    u_xlat22 = u_xlat8 * u_xlat8 + 1.5;
					    u_xlat8 = u_xlat8 * u_xlat8;
					    u_xlat22 = u_xlat22 * u_xlat25;
					    u_xlat4.x = u_xlat8 * u_xlat8 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat22;
					    u_xlat1.x = u_xlat8 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat1.xxx * _LightColor0.xyz;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_21) + (-u_xlat0.xyz);
					    u_xlat21 = u_xlat15.x * u_xlat15.x;
					    u_xlat21 = u_xlat21 * u_xlat21;
					    u_xlat21 = u_xlat15.x * u_xlat21 + 0.0500000007;
					    u_xlat21 = u_xlat21 * _CoatAmount;
					    u_xlat16_15 = (-vs_COLOR0.x) + 1.0;
					    u_xlat15.x = _BaseOcclusion * u_xlat16_15 + vs_COLOR0.x;
					    u_xlat21 = u_xlat21 * u_xlat15.x;
					    u_xlat0.xyz = vec3(u_xlat21) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat21 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
					#else
					    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat21);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec2 u_xlat10;
					vec3 u_xlat15;
					bool u_xlatb20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat10_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
					    u_xlat10.x = texture2D(_LightTexture0, u_xlat10.xy).w;
					    u_xlatb20 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_32 = (u_xlatb20) ? 1.0 : 0.0;
					    u_xlat16_32 = u_xlat10.x * u_xlat16_32;
					    u_xlat10.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat10.x = texture2D(_LightTextureB0, u_xlat10.xx).x;
					    u_xlat16_32 = u_xlat10.x * u_xlat16_32;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat10.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
					    u_xlat27 = texture2D(_LightTexture0, u_xlat10.xz).w;
					    u_xlatb10 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_2.x = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat10.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat10.xz = u_xlat10.xz + vec2(0.5, 0.5);
					    u_xlat27 = texture2D(_LightTexture0, u_xlat10.xz).w;
					    u_xlatb10 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_2.x = (u_xlatb10) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec2 u_xlat10;
					vec3 u_xlat15;
					bool u_xlatb20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat16_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat1 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat1;
					    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat10.xy = u_xlat1.xy / u_xlat1.ww;
					    u_xlat10.xy = u_xlat10.xy + vec2(0.5, 0.5);
					    u_xlat10.x = texture(_LightTexture0, u_xlat10.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb20 = !!(0.0<u_xlat1.z);
					#else
					    u_xlatb20 = 0.0<u_xlat1.z;
					#endif
					    u_xlat30 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat30 = texture(_LightTextureB0, vec2(u_xlat30)).x;
					    u_xlat16_32 = (u_xlatb20) ? 1.0 : 0.0;
					    u_xlat16_32 = u_xlat10.x * u_xlat16_32;
					    u_xlat16_32 = u_xlat30 * u_xlat16_32;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat31) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = max(u_xlat31, 0.00100000005);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat31 * u_xlat31;
					    u_xlat21.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat21.x = u_xlat16_0.w * u_xlat21.x + _BaseSmoothness;
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat31 = u_xlat21.x * u_xlat21.x;
					    u_xlat21.x = u_xlat21.x * u_xlat21.x + 1.5;
					    u_xlat34 = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat34 + 1.00001001;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = max(u_xlat34, 0.319999993);
					    u_xlat21.x = u_xlat21.x * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat11.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat2 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat11.xz = u_xlat2.xy / u_xlat2.ww;
					    u_xlat11.xz = u_xlat11.xz + vec2(0.5, 0.5);
					    u_xlat30 = texture(_LightTexture0, u_xlat11.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(0.0<u_xlat2.z);
					#else
					    u_xlatb11 = 0.0<u_xlat2.z;
					#endif
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat31 = texture(_LightTextureB0, vec2(u_xlat31)).x;
					    u_xlat16_3.x = (u_xlatb11) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat30 * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat31 * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_30 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_30 = inversesqrt(u_xlat16_30);
					    u_xlat16_1.xyw = vec3(u_xlat16_30) * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat11.x = (-_CoatSmoothness) + 1.0;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat11.x = u_xlat11.x * u_xlat34;
					    u_xlat4.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat30 = u_xlat30 * u_xlat4.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat31 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_3.xyz * vec3(u_xlat30);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_21 = (-vs_COLOR0.x) + 1.0;
					    u_xlat21.x = _BaseOcclusion * u_xlat16_21 + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec4 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat11;
					bool u_xlatb11;
					vec2 u_xlat21;
					mediump float u_xlat16_21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat31) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat5.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = max(u_xlat31, 0.00100000005);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat31 * u_xlat31;
					    u_xlat21.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat21.x = u_xlat16_0.w * u_xlat21.x + _BaseSmoothness;
					    u_xlat21.x = (-u_xlat21.x) + 1.0;
					    u_xlat31 = u_xlat21.x * u_xlat21.x;
					    u_xlat21.x = u_xlat21.x * u_xlat21.x + 1.5;
					    u_xlat34 = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat34 + 1.00001001;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
					#else
					    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
					#endif
					    u_xlat34 = max(u_xlat34, 0.319999993);
					    u_xlat21.x = u_xlat21.x * u_xlat34;
					    u_xlat11.x = u_xlat11.x * u_xlat21.x;
					    u_xlat11.x = u_xlat31 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat21.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat11.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat4.xyz;
					    u_xlat2 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat2;
					    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat11.xz = u_xlat2.xy / u_xlat2.ww;
					    u_xlat11.xz = u_xlat11.xz + vec2(0.5, 0.5);
					    u_xlat30 = texture(_LightTexture0, u_xlat11.xz).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb11 = !!(0.0<u_xlat2.z);
					#else
					    u_xlatb11 = 0.0<u_xlat2.z;
					#endif
					    u_xlat31 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat31 = texture(_LightTextureB0, vec2(u_xlat31)).x;
					    u_xlat16_3.x = (u_xlatb11) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat30 * u_xlat16_3.x;
					    u_xlat16_3.x = u_xlat31 * u_xlat16_3.x;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_30 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_30 = inversesqrt(u_xlat16_30);
					    u_xlat16_1.xyw = vec3(u_xlat16_30) * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat11.x = (-_CoatSmoothness) + 1.0;
					    u_xlat31 = u_xlat11.x * u_xlat11.x;
					    u_xlat11.x = u_xlat11.x * u_xlat11.x + 1.5;
					    u_xlat11.x = u_xlat11.x * u_xlat34;
					    u_xlat4.x = u_xlat31 * u_xlat31 + -1.0;
					    u_xlat30 = u_xlat30 * u_xlat4.x + 1.00001001;
					    u_xlat30 = u_xlat30 * u_xlat11.x;
					    u_xlat30 = u_xlat31 / u_xlat30;
					    u_xlat30 = u_xlat30 + -9.99999975e-05;
					    u_xlat30 = max(u_xlat30, 0.0);
					    u_xlat30 = min(u_xlat30, 100.0);
					    u_xlat4.xyz = u_xlat16_3.xyz * vec3(u_xlat30);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_21 = (-vs_COLOR0.x) + 1.0;
					    u_xlat21.x = _BaseOcclusion * u_xlat16_21 + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat21.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					float u_xlat10;
					vec3 u_xlat15;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat10_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat10 = texture2D(_LightTextureB0, vec2(u_xlat10)).x;
					    u_xlat20 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat10 = u_xlat20 * u_xlat10;
					    u_xlat16_3.xyz = vec3(u_xlat10) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat1.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10 = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat10 = u_xlat10 * u_xlat10;
					    u_xlat1.x = u_xlat10 * u_xlat10;
					    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat1.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat10 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat27 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat27 = texture2D(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat10 = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					vec3 u_xlat15;
					float u_xlat20;
					float u_xlat30;
					float u_xlat31;
					mediump float u_xlat16_32;
					float u_xlat34;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat4.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat4.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat31 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat6.xyz = vec3(u_xlat31) * u_xlat6.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					    u_xlat31 = u_xlat31 * u_xlat31;
					    u_xlat5.x = u_xlat31 * u_xlat31;
					    u_xlat31 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat31 = u_xlat16_0.w * u_xlat31 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat31) + 1.0;
					    u_xlat31 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat31 = u_xlat31 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat5.xy = (-vec2(u_xlat34)) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat5.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat15.xyz = u_xlat5.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat15.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat15.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat34 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat34 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat31) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat1 = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = texture(_LightTexture0, u_xlat10.xyz).w;
					    u_xlat20 = texture(_LightTextureB0, vec2(u_xlat1)).x;
					    u_xlat10.x = u_xlat10.x * u_xlat20;
					    u_xlat16_3.xyz = u_xlat10.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat30 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat4.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat5.x * u_xlat5.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat5.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = texture(_LightTexture0, u_xlat4.xyz).w;
					    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat27 = u_xlat10 * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat4.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat5.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = u_xlat5.xyz * vec3(u_xlat28) + u_xlat4.xyz;
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat4.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat19.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat4.xyz;
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = texture(_LightTexture0, u_xlat4.xyz).w;
					    u_xlat27 = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat27 = u_xlat10 * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat25)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat9 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5.x = u_xlat9 * u_xlat9;
					    u_xlat9 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat9 = u_xlat10_0.w * u_xlat9 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat9) + 1.0;
					    u_xlat9 = texture2D(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat9 = u_xlat9 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat10_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat1.xyw = u_xlat16_0.xyz * (-vec3(u_xlat24)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat9 = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat10_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9 = u_xlat9 * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9 = u_xlat9 * u_xlat17.x;
					    u_xlat9 = u_xlat25 / u_xlat9;
					    u_xlat9 = u_xlat9 + -9.99999975e-05;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = min(u_xlat9, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat10_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat24 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9 * u_xlat9 + 1.5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat9 = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat10_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9 = u_xlat9 * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9 = u_xlat9 * u_xlat17.x;
					    u_xlat9 = u_xlat25 / u_xlat9;
					    u_xlat9 = u_xlat9 + -9.99999975e-05;
					    u_xlat9 = max(u_xlat9, 0.0);
					    u_xlat9 = min(u_xlat9, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat10_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat24 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9 = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9 * u_xlat9 + 1.5;
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9 * u_xlat9 + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9 / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD7;
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					mediump vec3 u_xlat16_6;
					mediump vec3 u_xlat16_7;
					float u_xlat9;
					vec2 u_xlat17;
					float u_xlat24;
					float u_xlat25;
					mediump float u_xlat16_26;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat16_1.xyz);
					    u_xlat25 = u_xlat25 + u_xlat25;
					    u_xlat5.xyz = u_xlat16_1.xyz * (-vec3(u_xlat25)) + u_xlat4.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat9 = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat9 = u_xlat9 * u_xlat9;
					    u_xlat5.x = u_xlat9 * u_xlat9;
					    u_xlat9 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat9 = u_xlat16_0.w * u_xlat9 + _BaseSmoothness;
					    u_xlat5.y = (-u_xlat9) + 1.0;
					    u_xlat9 = texture(unity_NHxRoughness, u_xlat5.xy).x;
					    u_xlat9 = u_xlat9 * 16.0;
					    u_xlat5.x = vs_TEXCOORD1.z;
					    u_xlat5.y = vs_TEXCOORD2.z;
					    u_xlat5.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat5.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat5.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat5.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat5.xyz = u_xlat17.yyy * u_xlat5.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat5.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat5.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat16_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat9) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat16_2.xyz;
					    u_xlat0.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_6.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_6.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_0.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_7.xyz;
					    u_xlat24 = dot(u_xlat4.xyz, u_xlat16_0.xyz);
					    u_xlat24 = u_xlat24 + u_xlat24;
					    u_xlat1.xyw = u_xlat16_0.xyz * (-vec3(u_xlat24)) + u_xlat4.xyz;
					    u_xlat16_0.x = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
					#else
					    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat24 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat16_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9.x = u_xlat9.x * u_xlat17.x;
					    u_xlat9.x = u_xlat25 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat16_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat9.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat9.xz;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat9.xz;
					    u_xlat9.xz = u_xlat9.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat24 = texture(_LightTexture0, u_xlat9.xz).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9.x * u_xlat9.x + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9.x / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					mediump vec3 u_xlat16_7;
					vec3 u_xlat9;
					vec2 u_xlat17;
					mediump float u_xlat16_17;
					float u_xlat24;
					mediump float u_xlat16_24;
					float u_xlat25;
					mediump float u_xlat16_26;
					float u_xlat28;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat25) + _WorldSpaceLightPos0.xyz;
					    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;
					    u_xlat25 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat25 = max(u_xlat25, 0.00100000005);
					    u_xlat25 = inversesqrt(u_xlat25);
					    u_xlat5.xyz = vec3(u_xlat25) * u_xlat5.xyz;
					    u_xlat25 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
					#else
					    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat9.x = u_xlat25 * u_xlat25;
					    u_xlat17.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat17.x = u_xlat16_0.w * u_xlat17.x + _BaseSmoothness;
					    u_xlat17.x = (-u_xlat17.x) + 1.0;
					    u_xlat25 = u_xlat17.x * u_xlat17.x;
					    u_xlat17.x = u_xlat17.x * u_xlat17.x + 1.5;
					    u_xlat28 = u_xlat25 * u_xlat25 + -1.0;
					    u_xlat9.x = u_xlat9.x * u_xlat28 + 1.00001001;
					    u_xlat28 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat28 = max(u_xlat28, 0.319999993);
					    u_xlat17.x = u_xlat17.x * u_xlat28;
					    u_xlat9.x = u_xlat9.x * u_xlat17.x;
					    u_xlat9.x = u_xlat25 / u_xlat9.x;
					    u_xlat9.x = u_xlat9.x + -9.99999975e-05;
					    u_xlat9.x = max(u_xlat9.x, 0.0);
					    u_xlat9.x = min(u_xlat9.x, 100.0);
					    u_xlat6.x = vs_TEXCOORD1.z;
					    u_xlat6.y = vs_TEXCOORD2.z;
					    u_xlat6.z = vs_TEXCOORD3.z;
					    u_xlat17.x = dot(u_xlat6.xyz, u_xlat4.xyz);
					    u_xlat17.xy = (-u_xlat17.xx) + vec2(1.0, 1.04999995);
					    u_xlat4.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat4.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat4.xyz = u_xlat17.yyy * u_xlat4.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat4.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat4.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat25 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat24 = u_xlat16_0.w * u_xlat25 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat24) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_26 = (-u_xlat24) * 0.779083729 + 0.779083729;
					    u_xlat4.xyz = u_xlat9.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_26) + u_xlat4.xyz;
					    u_xlat9.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat9.xz;
					    u_xlat9.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat9.xz;
					    u_xlat9.xz = u_xlat9.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat24 = texture(_LightTexture0, u_xlat9.xz).w;
					    u_xlat16_2.xyz = vec3(u_xlat24) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_7.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_7.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_24 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
					    u_xlat16_24 = inversesqrt(u_xlat16_24);
					    u_xlat16_1.xyw = vec3(u_xlat16_24) * u_xlat16_7.xyz;
					    u_xlat16_24 = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
					#else
					    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat9.x = (-_CoatSmoothness) + 1.0;
					    u_xlat25 = u_xlat9.x * u_xlat9.x + 1.5;
					    u_xlat9.x = u_xlat9.x * u_xlat9.x;
					    u_xlat25 = u_xlat25 * u_xlat28;
					    u_xlat4.x = u_xlat9.x * u_xlat9.x + -1.0;
					    u_xlat1.x = u_xlat1.x * u_xlat4.x + 1.00001001;
					    u_xlat1.x = u_xlat1.x * u_xlat25;
					    u_xlat1.x = u_xlat9.x / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + -9.99999975e-05;
					    u_xlat1.x = max(u_xlat1.x, 0.0);
					    u_xlat1.x = min(u_xlat1.x, 100.0);
					    u_xlat1.xyw = u_xlat16_2.xyz * u_xlat1.xxx;
					    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat16_24) + (-u_xlat0.xyz);
					    u_xlat24 = u_xlat17.x * u_xlat17.x;
					    u_xlat24 = u_xlat24 * u_xlat24;
					    u_xlat24 = u_xlat17.x * u_xlat24 + 0.0500000007;
					    u_xlat24 = u_xlat24 * _CoatAmount;
					    u_xlat16_17 = (-vs_COLOR0.x) + 1.0;
					    u_xlat17.x = _BaseOcclusion * u_xlat16_17 + vs_COLOR0.x;
					    u_xlat24 = u_xlat24 * u_xlat17.x;
					    u_xlat0.xyz = vec3(u_xlat24) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat24 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
					#else
					    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					bool u_xlatb11;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat5.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat34)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
					    u_xlat34 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat6.x = u_xlat34 * u_xlat34;
					    u_xlat34 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat34 = u_xlat10_0.w * u_xlat34 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat34) + 1.0;
					    u_xlat34 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat34 = u_xlat34 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat37 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat37)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat37 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat33 = u_xlat10_0.w * u_xlat37 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat33) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat33) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat34) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = (-u_xlat0.x) + u_xlat11.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat11.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat11.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat11.x = texture2D(_ShadowMapTexture, u_xlat11.xy).x;
					    u_xlatb11 = u_xlat11.x<u_xlat11.z;
					    u_xlat16_35 = (u_xlatb11) ? _LightShadowData.x : 1.0;
					    u_xlat16_3.x = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_3.x + u_xlat16_35;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb11 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_3.x = (u_xlatb11) ? 1.0 : 0.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;
					    u_xlat16_35 = u_xlat16_35 * u_xlat16_3.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_35) * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_9.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_9.xy = u_xlat16_9.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_10.xyz;
					    u_xlat33 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat33) * u_xlat16_3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat33)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat33 = u_xlat8.x * u_xlat8.x;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat8.x * u_xlat33 + 0.0500000007;
					    u_xlat33 = u_xlat33 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat33 = u_xlat33 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat33 = vs_TEXCOORD7;
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					bool u_xlatb2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_10 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_19 = (-u_xlat16_10) + 1.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_19 + u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat10_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_2.xyz = texture2D(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					bool u_xlatb2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					mediump float u_xlat16_19;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_1.x = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat2.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlatb2 = u_xlat2.x<u_xlat2.z;
					    u_xlat16_10 = (u_xlatb2) ? _LightShadowData.x : 1.0;
					    u_xlat16_19 = (-u_xlat16_10) + 1.0;
					    u_xlat16_10 = u_xlat0.x * u_xlat16_19 + u_xlat16_10;
					    u_xlat16_1.x = u_xlat16_10 * u_xlat16_1.x;
					    u_xlat16_1.xyz = u_xlat16_1.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat10_2 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat10_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat10_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_2.xyz = texture2D(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					vec2 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					float u_xlat19;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat28) * u_xlat16_2.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat28 = u_xlat28 + u_xlat28;
					    u_xlat1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat19 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19 = u_xlat16_0.w * u_xlat19 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat19) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat10.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10.xy = (-u_xlat10.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat19 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat19 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat16_0.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat27)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat10.x * u_xlat10.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat10.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat16_0.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat16_0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					bool u_xlatb9;
					vec2 u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat18;
					float u_xlat19;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat9.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_12 = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat28) * u_xlat16_3.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat16_1.xyz);
					    u_xlat28 = u_xlat28 + u_xlat28;
					    u_xlat1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat19 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19 = u_xlat10_0.w * u_xlat19 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat19) + 1.0;
					    u_xlat1.x = texture2D(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat10.x = dot(u_xlat7.xyz, u_xlat2.xyz);
					    u_xlat10.xy = (-u_xlat10.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat19 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat19 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat16_0.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat27)) + u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat10.x * u_xlat10.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat10.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat9.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_12 = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat2.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat29 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat29;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform highp sampler2D _LightTextureB0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					lowp vec4 u_xlat10_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					bool u_xlatb9;
					float u_xlat10;
					mediump float u_xlat16_12;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD6.xyz / vs_TEXCOORD6.www;
					    u_xlat1.xy = u_xlat0.xy + _ShadowOffsets[0].xy;
					    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[1].xy;
					    u_xlat1.y = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat2.xy = u_xlat0.xy + _ShadowOffsets[2].xy;
					    u_xlat1.z = texture2D(_ShadowMapTexture, u_xlat2.xy).x;
					    u_xlat0.xy = u_xlat0.xy + _ShadowOffsets[3].xy;
					    u_xlat1.w = texture2D(_ShadowMapTexture, u_xlat0.xy).x;
					    u_xlatb0 = lessThan(u_xlat1, u_xlat0.zzzz);
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat0.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat2.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					    u_xlat16_3.x = u_xlat9.x * u_xlat16_3.x + u_xlat0.x;
					    u_xlat0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
					    u_xlat0.xy = u_xlat0.xy + vec2(0.5, 0.5);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xy).w;
					    u_xlatb9 = 0.0<vs_TEXCOORD5.z;
					    u_xlat16_12 = (u_xlatb9) ? 1.0 : 0.0;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_12 = u_xlat0.x * u_xlat16_12;
					    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_12;
					    u_xlat16_3.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat2.xyz = vec3(u_xlat28) * u_xlat2.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat2.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat29 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat29;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat2.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat2.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat2.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat2.xyz = u_xlat19.yyy * u_xlat2.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat2.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat2.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat2.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_30) + u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat2.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat2.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					vec2 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					float u_xlat19;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_29;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = vec3(u_xlat28) * u_xlat16_2.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat16_1.xyz);
					    u_xlat28 = u_xlat28 + u_xlat28;
					    u_xlat1.xyz = u_xlat16_1.xyz * (-vec3(u_xlat28)) + u_xlat3.xyz;
					    u_xlat1.x = dot(u_xlat1.xyz, u_xlat6.xyz);
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * u_xlat1.x;
					    u_xlat19 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19 = u_xlat16_0.w * u_xlat19 + _BaseSmoothness;
					    u_xlat1.y = (-u_xlat19) + 1.0;
					    u_xlat1.x = texture(unity_NHxRoughness, u_xlat1.xy).x;
					    u_xlat1.x = u_xlat1.x * 16.0;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat10.x = dot(u_xlat7.xyz, u_xlat3.xyz);
					    u_xlat10.xy = (-u_xlat10.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat7.xyz = u_xlat10.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat7.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat7.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat19 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat19 + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_0.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat16_0.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat27)) + u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_2.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat10.x * u_xlat10.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat10.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD5 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat0.wwww + u_xlat1;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 _ShadowOffsets[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec4 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					bool u_xlatb1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToLight[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToLight[3];
					    u_xlat1.xy = u_xlat0.xy / u_xlat0.ww;
					    u_xlat1.xy = u_xlat1.xy + vec2(0.5, 0.5);
					    u_xlat27 = texture(_LightTexture0, u_xlat1.xy).w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb1 = !!(0.0<u_xlat0.z);
					#else
					    u_xlatb1 = 0.0<u_xlat0.z;
					#endif
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat16_2.x = (u_xlatb1) ? 1.0 : 0.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x;
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat0 = vs_TEXCOORD4.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * vs_TEXCOORD4.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * vs_TEXCOORD4.zzzz + u_xlat0;
					    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_WorldToShadow[3];
					    u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;
					    u_xlat1.xyz = u_xlat0.xyz + _ShadowOffsets[0].xyz;
					    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);
					    u_xlat1.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[1].xyz;
					    vec3 txVec1 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.y = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec1, 0.0);
					    u_xlat3.xyz = u_xlat0.xyz + _ShadowOffsets[2].xyz;
					    u_xlat0.xyz = u_xlat0.xyz + _ShadowOffsets[3].xyz;
					    vec3 txVec2 = vec3(u_xlat0.xy,u_xlat0.z);
					    u_xlat1.w = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec2, 0.0);
					    vec3 txVec3 = vec3(u_xlat3.xy,u_xlat3.z);
					    u_xlat1.z = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec3, 0.0);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_9 = (-_LightShadowData.x) + 1.0;
					    u_xlat0.x = u_xlat0.x * u_xlat16_9 + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat0.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_11 = u_xlat9.x * u_xlat16_11 + u_xlat0.x;
					    u_xlat16_2.x = u_xlat16_11 * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10.x;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10.x = max(u_xlat10.x, _LightShadowData.x);
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_32 + u_xlat10.x;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat0.zzzz + u_xlat1;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat0.wwww + u_xlat1;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat10.xy,u_xlat10.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat16_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_3.x + u_xlat16_32;
					    u_xlat16_3.xyz = vec3(u_xlat16_32) * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
					    gl_Position = u_xlat0;
					    vs_TEXCOORD7 = u_xlat0.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(2) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat16_2.xxx * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					bool u_xlatb10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat10_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat10.x = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10.x;
					    u_xlat10.x = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10.x = max(u_xlat10.x, _LightShadowData.x);
					    u_xlat16_32 = (-u_xlat10.x) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_32 + u_xlat10.x;
					    u_xlat0.x = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat0.x = u_xlat16_32 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat27 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat12;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat2.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat0.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat0;
					    vs_TEXCOORD6 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _ShadowMapTexture;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					varying highp vec2 vs_TEXCOORD0;
					varying highp vec2 vs_TEXCOORD5;
					varying highp vec3 vs_TEXCOORD1;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec4 vs_TEXCOORD6;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					lowp vec4 u_xlat10_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					float u_xlat10;
					bool u_xlatb10;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat10_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat10_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = vec3(u_xlat10) * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10 = sqrt(u_xlat10);
					    u_xlat10 = (-u_xlat27) + u_xlat10;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10 + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat10 = texture2D(_ShadowMapTexture, vs_TEXCOORD6.xy).x;
					    u_xlatb10 = vs_TEXCOORD6.z<u_xlat10;
					    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
					    u_xlat10 = max(u_xlat10, _LightShadowData.x);
					    u_xlat16_2.x = (-u_xlat10) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_2.x + u_xlat10;
					    u_xlat27 = texture2D(_LightTexture0, vs_TEXCOORD5.xy).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyw = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat10_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					mediump vec3 u_xlat16_9;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					float u_xlat11;
					vec2 u_xlat21;
					float u_xlat30;
					mediump float u_xlat16_30;
					float u_xlat31;
					mediump float u_xlat16_32;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat31 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat31 = inversesqrt(u_xlat31);
					    u_xlat5.xyz = vec3(u_xlat31) * u_xlat4.xyz;
					    u_xlat31 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat31 = u_xlat31 + u_xlat31;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat31)) + u_xlat5.xyz;
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat11 = dot(u_xlat6.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat11 = u_xlat11 * u_xlat11;
					    u_xlat6.x = u_xlat11 * u_xlat11;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_0.w * u_xlat11 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat11) + 1.0;
					    u_xlat11 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat11 = u_xlat11 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat21.x = dot(u_xlat7.xyz, u_xlat5.xyz);
					    u_xlat21.xy = (-u_xlat21.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat21.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat31 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat30 = u_xlat16_0.w * u_xlat31 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat30) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_32 = (-u_xlat30) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat11) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_32) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat10.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat10.xyz, u_xlat10.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat0.x) + u_xlat10.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat10.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat10.xyz;
					    u_xlat10.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat10.xyz;
					    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat10.xy,u_xlat10.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_32 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_32 = u_xlat16_10 * u_xlat16_32 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_32) + 1.0;
					    u_xlat16_32 = u_xlat0.x * u_xlat16_3.x + u_xlat16_32;
					    u_xlat0.xy = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat0.xy;
					    u_xlat0.xy = u_xlat0.xy + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xy).w;
					    u_xlat0.x = u_xlat16_32 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat16_8.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_8.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_8.xy = u_xlat16_8.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_9.x = dot(vs_TEXCOORD1.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.y = dot(vs_TEXCOORD2.xyz, u_xlat16_8.xyz);
					    u_xlat16_9.z = dot(vs_TEXCOORD3.xyz, u_xlat16_8.xyz);
					    u_xlat16_0.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_9.xyz;
					    u_xlat16_30 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_30 = min(max(u_xlat16_30, 0.0), 1.0);
					#else
					    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
					    u_xlat30 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat30 = u_xlat30 + u_xlat30;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat30)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat30 = u_xlat21.x * u_xlat21.x;
					    u_xlat30 = u_xlat30 * u_xlat30;
					    u_xlat30 = u_xlat21.x * u_xlat30 + 0.0500000007;
					    u_xlat30 = u_xlat30 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat30 = u_xlat30 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat30 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat30);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat27) + u_xlat10.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat10.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat10.xz;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat10.xz;
					    u_xlat10.xz = u_xlat10.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat27 = texture(_LightTexture0, u_xlat10.xz).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp vec2 vs_TEXCOORD5;
					out highp vec3 vs_TEXCOORD1;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					float u_xlat9;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat0.xy;
					    u_xlat0.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat0.xy;
					    vs_TEXCOORD5.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat0.xy;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
					    u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat1.xyz;
					    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat9 = inversesqrt(u_xlat9);
					    u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.xyz * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.zxy * u_xlat1.yzx + (-u_xlat2.xyz);
					    u_xlat9 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat2.xyz = vec3(u_xlat9) * u_xlat2.xyz;
					    vs_TEXCOORD1.y = u_xlat2.x;
					    vs_TEXCOORD1.x = u_xlat1.z;
					    vs_TEXCOORD1.z = u_xlat0.y;
					    vs_TEXCOORD2.x = u_xlat1.x;
					    vs_TEXCOORD3.x = u_xlat1.y;
					    vs_TEXCOORD2.z = u_xlat0.z;
					    vs_TEXCOORD3.z = u_xlat0.x;
					    vs_TEXCOORD2.y = u_xlat2.y;
					    vs_TEXCOORD3.y = u_xlat2.z;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	mediump vec4 _WorldSpaceLightPos0;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToShadow[16];
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump sampler2D _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp vec3 vs_TEXCOORD1;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat10;
					mediump float u_xlat16_10;
					mediump float u_xlat16_11;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat31;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat28 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = u_xlat4.xyz * vec3(u_xlat28) + _WorldSpaceLightPos0.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat4.xyz;
					    u_xlat28 = dot(u_xlat5.xyz, u_xlat5.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat5.xyz = vec3(u_xlat28) * u_xlat5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyz, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat31 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat31 + 1.00001001;
					    u_xlat31 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
					#else
					    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
					#endif
					    u_xlat31 = max(u_xlat31, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat31;
					    u_xlat10.x = u_xlat10.x * u_xlat19.x;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat7.x = vs_TEXCOORD1.z;
					    u_xlat7.y = vs_TEXCOORD2.z;
					    u_xlat7.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat7.xyz, u_xlat6.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat19.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat27) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat6.xyz = u_xlat10.xxx * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat6.xyz;
					    u_xlat6.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat6.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat6.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat27 = dot(u_xlat4.xyz, u_xlat6.xyz);
					    u_xlat4.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat10.x = sqrt(u_xlat10.x);
					    u_xlat10.x = (-u_xlat27) + u_xlat10.x;
					    u_xlat27 = unity_ShadowFadeCenterAndType.w * u_xlat10.x + u_xlat27;
					    u_xlat27 = u_xlat27 * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat4.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * vs_TEXCOORD4.xxx + u_xlat4.xyz;
					    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * vs_TEXCOORD4.zzz + u_xlat4.xyz;
					    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4unity_WorldToShadow[3].xyz;
					    vec3 txVec0 = vec3(u_xlat4.xy,u_xlat4.z);
					    u_xlat16_10 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec0, 0.0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_10 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat16_2.x = u_xlat27 * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat10.xz = vs_TEXCOORD4.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[0].xy * vs_TEXCOORD4.xx + u_xlat10.xz;
					    u_xlat10.xz = hlslcc_mtx4x4unity_WorldToLight[2].xy * vs_TEXCOORD4.zz + u_xlat10.xz;
					    u_xlat10.xz = u_xlat10.xz + hlslcc_mtx4x4unity_WorldToLight[3].xy;
					    u_xlat27 = texture(_LightTexture0, u_xlat10.xz).w;
					    u_xlat27 = u_xlat16_2.x * u_xlat27;
					    u_xlat16_2.xyz = vec3(u_xlat27) * _LightColor0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_2.xyz;
					    u_xlat0.xyz = u_xlat16_1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_3.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat5.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = dot(u_xlat16_1.xyw, _WorldSpaceLightPos0.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
					#else
					    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10.x = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10.x * u_xlat10.x;
					    u_xlat10.x = u_xlat10.x * u_xlat10.x + 1.5;
					    u_xlat10.x = u_xlat10.x * u_xlat31;
					    u_xlat4.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat4.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10.x;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat4.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat4.xyz * u_xlat16_1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					mediump float u_xlat16_38;
					float u_xlat40;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat5.xyz = vec3(u_xlat37) * u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat37)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat37 = u_xlat37 * u_xlat37;
					    u_xlat6.x = u_xlat37 * u_xlat37;
					    u_xlat37 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat37 = u_xlat10_0.w * u_xlat37 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat37) + 1.0;
					    u_xlat37 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat37 = u_xlat37 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat40 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat40)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat40 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat36 = u_xlat10_0.w * u_xlat40 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat36) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_38 = (-u_xlat36) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat37) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_38) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat12.x = (-u_xlat0.x) + u_xlat12.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat12.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat37 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat10_3 = textureCube(_ShadowMapTexture, u_xlat12.xyz);
					    u_xlat12.x = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat24 = sqrt(u_xlat37);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlatb12 = u_xlat12.x<u_xlat24;
					    u_xlat16_38 = (u_xlatb12) ? _LightShadowData.x : 1.0;
					    u_xlat16_9.x = (-u_xlat16_38) + 1.0;
					    u_xlat16_38 = u_xlat0.x * u_xlat16_9.x + u_xlat16_38;
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_38 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10.xyz = u_xlat0.xxx * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_10.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_10.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.y = dot(vs_TEXCOORD2.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.z = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat36 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat16_9.xyz = vec3(u_xlat36) * u_xlat16_9.xyz;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat36 = u_xlat36 + u_xlat36;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat36)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + (-u_xlat16_2.xyz);
					    u_xlat36 = u_xlat8.x * u_xlat8.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat8.x * u_xlat36 + 0.0500000007;
					    u_xlat36 = u_xlat36 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat36 = u_xlat36 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat36 = vs_TEXCOORD7;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump float u_xlat16_11;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat5.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat34)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
					    u_xlat34 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat6.x = u_xlat34 * u_xlat34;
					    u_xlat34 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat34 = u_xlat16_0.w * u_xlat34 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat34) + 1.0;
					    u_xlat34 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat34 = u_xlat34 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat37 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat37)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat37 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat33 = u_xlat16_0.w * u_xlat37 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat33) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat33) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat34) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = (-u_xlat0.x) + u_xlat11.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat11.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat34 = max(abs(u_xlat11.y), abs(u_xlat11.x));
					    u_xlat34 = max(abs(u_xlat11.z), u_xlat34);
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.z);
					    u_xlat34 = max(u_xlat34, 9.99999975e-06);
					    u_xlat34 = u_xlat34 * _LightProjectionParams.w;
					    u_xlat34 = _LightProjectionParams.y / u_xlat34;
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat11.xyz,u_xlat34);
					    u_xlat16_11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_35 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_35 = u_xlat16_11 * u_xlat16_35 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_3.x + u_xlat16_35;
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_35 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_9.xy = u_xlat16_9.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_10.xyz;
					    u_xlat33 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat33) * u_xlat16_3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat33)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat33 = u_xlat8.x * u_xlat8.x;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat8.x * u_xlat33 + 0.0500000007;
					    u_xlat33 = u_xlat33 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat33 = u_xlat33 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat33 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat16_0 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3.xyz = texture(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat16_2 = texture(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
					#else
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat16_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat16_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat16_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_2.xyz = texture(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					mediump vec3 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec4 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_10;
					vec3 u_xlat11;
					float u_xlat12;
					float u_xlat20;
					float u_xlat21;
					float u_xlat27;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat16_0 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_1.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_1.x = u_xlat16_0 * u_xlat16_1.x + _LightShadowData.x;
					    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat2.x = dot(u_xlat9.xyz, u_xlat2.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat2.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat2.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;
					    u_xlat2.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_1.x * u_xlat0.x;
					    u_xlat16_1.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_3.xyz = texture(_FlakesNormal, u_xlat2.xy).xyz;
					    u_xlat16_2 = texture(_FlakesRGBcolorvariationAmask, u_xlat2.xy);
					    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
					#else
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat16_2.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat2.xyz = u_xlat16_2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = vec3(_FlakeColorVariationAmount) * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat2.xyz = u_xlat2.xyz + (-u_xlat8.xyz);
					    u_xlat2.xyz = u_xlat16_2.www * u_xlat2.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_2.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_28 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat2.xyz * vec3(u_xlat16_28) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_1.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat2.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_2.xyz = texture(_CoatNormal, u_xlat2.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_2.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
					    u_xlat16_2.xyz = u_xlat16_2.xxx * u_xlat16_5.xyz;
					    u_xlat29 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat11.x = u_xlat29 * u_xlat29;
					    u_xlat20 = (-_CoatSmoothness) + 1.0;
					    u_xlat29 = u_xlat20 * u_xlat20;
					    u_xlat20 = u_xlat20 * u_xlat20 + 1.5;
					    u_xlat20 = u_xlat20 * u_xlat30;
					    u_xlat3 = u_xlat29 * u_xlat29 + -1.0;
					    u_xlat11.x = u_xlat11.x * u_xlat3 + 1.00001001;
					    u_xlat11.x = u_xlat11.x * u_xlat20;
					    u_xlat11.x = u_xlat29 / u_xlat11.x;
					    u_xlat11.x = u_xlat11.x + -9.99999975e-05;
					    u_xlat11.x = max(u_xlat11.x, 0.0);
					    u_xlat11.x = min(u_xlat11.x, 100.0);
					    u_xlat11.xyz = u_xlat16_1.xyz * u_xlat11.xxx;
					    u_xlat2.xyz = u_xlat11.xyz * u_xlat2.xxx + (-u_xlat9.xyz);
					    u_xlat29 = u_xlat0.x * u_xlat0.x;
					    u_xlat29 = u_xlat29 * u_xlat29;
					    u_xlat0.x = u_xlat0.x * u_xlat29 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_29 = (-vs_COLOR0.x) + 1.0;
					    u_xlat29 = _BaseOcclusion * u_xlat16_29 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat29;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture2D(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat10_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat28) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + (-u_xlat16_5.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_5.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture2D(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat16_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat28) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTexture0;
					UNITY_LOCATION(1) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(3) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(4) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump vec3 u_xlat16_0;
					lowp vec4 u_xlat10_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec3 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					lowp vec4 u_xlat10_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					mediump vec3 u_xlat16_11;
					vec3 u_xlat12;
					bool u_xlatb12;
					float u_xlat24;
					float u_xlat36;
					float u_xlat37;
					mediump float u_xlat16_38;
					float u_xlat40;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_1.xyz = texture2D(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat10_0 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat37 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat5.xyz = vec3(u_xlat37) * u_xlat4.xyz;
					    u_xlat37 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat37 = u_xlat37 + u_xlat37;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat37)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat37 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat37 = inversesqrt(u_xlat37);
					    u_xlat7.xyz = vec3(u_xlat37) * u_xlat7.xyz;
					    u_xlat37 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat37 = u_xlat37 * u_xlat37;
					    u_xlat6.x = u_xlat37 * u_xlat37;
					    u_xlat37 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat37 = u_xlat10_0.w * u_xlat37 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat37) + 1.0;
					    u_xlat37 = texture2D(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat37 = u_xlat37 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat40 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat40)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat10_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat10_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat40 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat36 = u_xlat10_0.w * u_xlat40 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat36) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_38 = (-u_xlat36) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat37) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_38) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat12.x = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat12.x = sqrt(u_xlat12.x);
					    u_xlat12.x = (-u_xlat0.x) + u_xlat12.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat12.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat12.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat37 = dot(u_xlat12.xyz, u_xlat12.xyz);
					    u_xlat10_3 = textureCube(_ShadowMapTexture, u_xlat12.xyz);
					    u_xlat12.x = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat24 = sqrt(u_xlat37);
					    u_xlat24 = u_xlat24 * _LightPositionRange.w;
					    u_xlat24 = u_xlat24 * _LightProjectionParams.w;
					    u_xlatb12 = u_xlat12.x<u_xlat24;
					    u_xlat16_38 = (u_xlatb12) ? _LightShadowData.x : 1.0;
					    u_xlat16_9.x = (-u_xlat16_38) + 1.0;
					    u_xlat16_38 = u_xlat0.x * u_xlat16_9.x + u_xlat16_38;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat12.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat12.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_38 * u_xlat0.x;
					    u_xlat16_9.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_10.xyz = u_xlat0.xxx * u_xlat16_9.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_10.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_0.xyz = texture2D(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_10.xyz = u_xlat10_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_10.xy = u_xlat16_10.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_11.x = dot(vs_TEXCOORD1.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.y = dot(vs_TEXCOORD2.xyz, u_xlat16_10.xyz);
					    u_xlat16_11.z = dot(vs_TEXCOORD3.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_11.xyz;
					    u_xlat36 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat16_9.xyz = vec3(u_xlat36) * u_xlat16_9.xyz;
					    u_xlat36 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat36 = u_xlat36 + u_xlat36;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat36)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_9.xyz + (-u_xlat16_2.xyz);
					    u_xlat36 = u_xlat8.x * u_xlat8.x;
					    u_xlat36 = u_xlat36 * u_xlat36;
					    u_xlat36 = u_xlat8.x * u_xlat36 + 0.0500000007;
					    u_xlat36 = u_xlat36 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat36 = u_xlat36 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat36 = vs_TEXCOORD7;
					    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat36);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					bool u_xlatb0;
					vec3 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					mediump vec3 u_xlat16_2;
					float u_xlat3;
					mediump vec3 u_xlat16_3;
					lowp vec3 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat12;
					float u_xlat19;
					float u_xlat21;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat10_1 = textureCube(_ShadowMapTexture, u_xlat0.xyz);
					    u_xlat0.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat9.x = sqrt(u_xlat27);
					    u_xlat9.x = u_xlat9.x * _LightPositionRange.w;
					    u_xlat9.x = u_xlat9.x * _LightProjectionParams.w;
					    u_xlatb0 = u_xlat0.x<u_xlat9.x;
					    u_xlat16_2.x = (u_xlatb0) ? _LightShadowData.x : 1.0;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_2.x = u_xlat0.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_2.x * u_xlat0.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_3.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_3.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_3.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat3 = dot(u_xlat16_3.xyz, u_xlat6.xyz);
					    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat12 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat12 = u_xlat10_1.w * u_xlat12 + _BaseSmoothness;
					    u_xlat12 = (-u_xlat12) + 1.0;
					    u_xlat21 = u_xlat12 * u_xlat12;
					    u_xlat12 = u_xlat12 * u_xlat12 + 1.5;
					    u_xlat30 = u_xlat21 * u_xlat21 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat12 = u_xlat12 * u_xlat30;
					    u_xlat27 = u_xlat27 * u_xlat12;
					    u_xlat27 = u_xlat21 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_29) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_2.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = vec3(u_xlat3) * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat30;
					    u_xlat3 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat3 + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_2.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					float u_xlat1;
					mediump vec3 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					vec3 u_xlat4;
					vec3 u_xlat5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					mediump vec3 u_xlat16_9;
					mediump vec3 u_xlat16_10;
					vec3 u_xlat11;
					mediump float u_xlat16_11;
					float u_xlat33;
					float u_xlat34;
					mediump float u_xlat16_35;
					float u_xlat37;
					void main()
					{
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_3.x = dot(vs_TEXCOORD1.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.y = dot(vs_TEXCOORD2.xyz, u_xlat16_2.xyz);
					    u_xlat16_3.z = dot(vs_TEXCOORD3.xyz, u_xlat16_2.xyz);
					    u_xlat16_1.x = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_3.xyz;
					    u_xlat4.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat5.xyz = vec3(u_xlat34) * u_xlat4.xyz;
					    u_xlat34 = dot(u_xlat5.xyz, u_xlat16_1.xyz);
					    u_xlat34 = u_xlat34 + u_xlat34;
					    u_xlat6.xyz = u_xlat16_1.xyz * (-vec3(u_xlat34)) + u_xlat5.xyz;
					    u_xlat7.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat34 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat34 = inversesqrt(u_xlat34);
					    u_xlat7.xyz = vec3(u_xlat34) * u_xlat7.xyz;
					    u_xlat34 = dot(u_xlat6.xyz, u_xlat7.xyz);
					    u_xlat34 = u_xlat34 * u_xlat34;
					    u_xlat6.x = u_xlat34 * u_xlat34;
					    u_xlat34 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat34 = u_xlat16_0.w * u_xlat34 + _BaseSmoothness;
					    u_xlat6.y = (-u_xlat34) + 1.0;
					    u_xlat34 = texture(unity_NHxRoughness, u_xlat6.xy).x;
					    u_xlat34 = u_xlat34 * 16.0;
					    u_xlat6.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat37 = dot(u_xlat8.xyz, u_xlat5.xyz);
					    u_xlat8.xy = (-vec2(u_xlat37)) + vec2(1.0, 1.04999995);
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat6.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat6.xyz = u_xlat8.yyy * u_xlat6.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat6.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat6.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat37 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat33 = u_xlat16_0.w * u_xlat37 + _BaseMetallic;
					    u_xlat16_2.xyz = vec3(u_xlat33) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_35 = (-u_xlat33) * 0.779083729 + 0.779083729;
					    u_xlat16_2.xyz = vec3(u_xlat34) * u_xlat16_2.xyz;
					    u_xlat16_2.xyz = u_xlat0.xyz * vec3(u_xlat16_35) + u_xlat16_2.xyz;
					    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat0.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat0.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat0.x = dot(u_xlat4.xyz, u_xlat0.xyz);
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
					    u_xlat11.x = sqrt(u_xlat11.x);
					    u_xlat11.x = (-u_xlat0.x) + u_xlat11.x;
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat11.x + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat11.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat34 = max(abs(u_xlat11.y), abs(u_xlat11.x));
					    u_xlat34 = max(abs(u_xlat11.z), u_xlat34);
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.z);
					    u_xlat34 = max(u_xlat34, 9.99999975e-06);
					    u_xlat34 = u_xlat34 * _LightProjectionParams.w;
					    u_xlat34 = _LightProjectionParams.y / u_xlat34;
					    u_xlat34 = u_xlat34 + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat11.xyz,u_xlat34);
					    u_xlat16_11 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_35 = (-_LightShadowData.x) + 1.0;
					    u_xlat16_35 = u_xlat16_11 * u_xlat16_35 + _LightShadowData.x;
					    u_xlat16_3.x = (-u_xlat16_35) + 1.0;
					    u_xlat16_35 = u_xlat0.x * u_xlat16_3.x + u_xlat16_35;
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat11.x = texture(_LightTextureB0, vec2(u_xlat33)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat11.x;
					    u_xlat0.x = u_xlat16_35 * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_9.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_0.xyz = texture(_CoatNormal, u_xlat0.xy).xyz;
					    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_9.xy = u_xlat16_9.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_10.x = dot(vs_TEXCOORD1.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.y = dot(vs_TEXCOORD2.xyz, u_xlat16_9.xyz);
					    u_xlat16_10.z = dot(vs_TEXCOORD3.xyz, u_xlat16_9.xyz);
					    u_xlat16_0.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
					    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);
					    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_10.xyz;
					    u_xlat33 = dot(u_xlat16_0.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat33) * u_xlat16_3.xyz;
					    u_xlat33 = dot(u_xlat5.xyz, u_xlat16_0.xyz);
					    u_xlat33 = u_xlat33 + u_xlat33;
					    u_xlat0.xyz = u_xlat16_0.xyz * (-vec3(u_xlat33)) + u_xlat5.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_2.xyz);
					    u_xlat33 = u_xlat8.x * u_xlat8.x;
					    u_xlat33 = u_xlat33 * u_xlat33;
					    u_xlat33 = u_xlat8.x * u_xlat33 + 0.0500000007;
					    u_xlat33 = u_xlat33 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1 = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat33 = u_xlat33 * u_xlat1;
					    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz + u_xlat16_2.xyz;
					    u_xlat33 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
					#else
					    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat33);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat9.x = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat9.x;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat9.y), abs(u_xlat9.x));
					    u_xlat1.x = max(abs(u_xlat9.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat9.xyz,u_xlat1.x);
					    u_xlat16_9 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat9.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump vec4 u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					mediump vec3 u_xlat16_2;
					vec3 u_xlat3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					mediump float u_xlat16_9;
					float u_xlat10;
					mediump float u_xlat16_11;
					float u_xlat18;
					vec2 u_xlat19;
					mediump float u_xlat16_19;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_29;
					float u_xlat30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = texture(_LightTexture0, u_xlat0.xyz).w;
					    u_xlat9.x = texture(_LightTextureB0, vec2(u_xlat27)).x;
					    u_xlat0.x = u_xlat0.x * u_xlat9.x;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat1.x = max(abs(u_xlat9.y), abs(u_xlat9.x));
					    u_xlat1.x = max(abs(u_xlat9.z), u_xlat1.x);
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.z);
					    u_xlat1.x = max(u_xlat1.x, 9.99999975e-06);
					    u_xlat1.x = u_xlat1.x * _LightProjectionParams.w;
					    u_xlat1.x = _LightProjectionParams.y / u_xlat1.x;
					    u_xlat1.x = u_xlat1.x + (-_LightProjectionParams.x);
					    vec4 txVec0 = vec4(u_xlat9.xyz,u_xlat1.x);
					    u_xlat16_9 = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat16_2.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_2.x = u_xlat16_9 * u_xlat16_2.x + _LightShadowData.x;
					    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;
					    u_xlat9.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat9.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat9.x = sqrt(u_xlat9.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat18 = dot(u_xlat3.xyz, u_xlat1.xyz);
					    u_xlat9.x = (-u_xlat18) + u_xlat9.x;
					    u_xlat9.x = unity_ShadowFadeCenterAndType.w * u_xlat9.x + u_xlat18;
					    u_xlat9.x = u_xlat9.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat9.x = min(max(u_xlat9.x, 0.0), 1.0);
					#else
					    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);
					#endif
					    u_xlat16_2.x = u_xlat9.x * u_xlat16_11 + u_xlat16_2.x;
					    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
					    u_xlat16_2.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat0.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_1.xyz = texture(_FlakesNormal, u_xlat0.xy).xyz;
					    u_xlat16_0 = texture(_FlakesRGBcolorvariationAmask, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat28 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat28) + u_xlat3.xyz;
					    u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;
					    u_xlat28 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat28 = max(u_xlat28, 0.00100000005);
					    u_xlat28 = inversesqrt(u_xlat28);
					    u_xlat7.xyz = vec3(u_xlat28) * u_xlat7.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10 = u_xlat28 * u_xlat28;
					    u_xlat19.x = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat19.x = u_xlat16_0.w * u_xlat19.x + _BaseSmoothness;
					    u_xlat19.x = (-u_xlat19.x) + 1.0;
					    u_xlat28 = u_xlat19.x * u_xlat19.x;
					    u_xlat19.x = u_xlat19.x * u_xlat19.x + 1.5;
					    u_xlat30 = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10 = u_xlat10 * u_xlat30 + 1.00001001;
					    u_xlat30 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
					#else
					    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
					#endif
					    u_xlat30 = max(u_xlat30, 0.319999993);
					    u_xlat19.x = u_xlat19.x * u_xlat30;
					    u_xlat10 = u_xlat10 * u_xlat19.x;
					    u_xlat10 = u_xlat28 / u_xlat10;
					    u_xlat10 = u_xlat10 + -9.99999975e-05;
					    u_xlat10 = max(u_xlat10, 0.0);
					    u_xlat10 = min(u_xlat10, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat19.x = dot(u_xlat8.xyz, u_xlat3.xyz);
					    u_xlat19.xy = (-u_xlat19.xx) + vec2(1.0, 1.04999995);
					    u_xlat3.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _FlakesColor1.xyz;
					    u_xlat0.xyz = u_xlat16_0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = vec3(_FlakeColorVariationAmount) * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat3.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat3.xyz = u_xlat19.yyy * u_xlat3.xyz + _BaseColor1.xyz;
					    u_xlat0.xyz = u_xlat0.xyz + (-u_xlat3.xyz);
					    u_xlat0.xyz = u_xlat16_0.www * u_xlat0.xyz + u_xlat3.xyz;
					    u_xlat16_4.xyz = u_xlat0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat28 = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat27 = u_xlat16_0.w * u_xlat28 + _BaseMetallic;
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_29 = (-u_xlat27) * 0.779083729 + 0.779083729;
					    u_xlat3.xyz = vec3(u_xlat10) * u_xlat16_4.xyz;
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat16_29) + u_xlat3.xyz;
					    u_xlat0.xyz = u_xlat16_2.xyz * u_xlat0.xyz;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyw = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_27 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyw = vec3(u_xlat16_27) * u_xlat16_5.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyw, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyw, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat10 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat10 * u_xlat10;
					    u_xlat10 = u_xlat10 * u_xlat10 + 1.5;
					    u_xlat10 = u_xlat10 * u_xlat30;
					    u_xlat3.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat3.x + 1.00001001;
					    u_xlat27 = u_xlat27 * u_xlat10;
					    u_xlat27 = u_xlat28 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat3.xyz = u_xlat16_2.xyz * vec3(u_xlat27);
					    u_xlat1.xyw = u_xlat3.xyz * u_xlat1.xxx + (-u_xlat0.xyz);
					    u_xlat27 = u_xlat19.x * u_xlat19.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat19.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_19 = (-vs_COLOR0.x) + 1.0;
					    u_xlat19.x = _BaseOcclusion * u_xlat16_19 + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat19.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat1.xyw + u_xlat0.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform highp sampler2D unity_NHxRoughness;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat3.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat10_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture2D(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat10_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_6.xyz = vec3(u_xlat28) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_6.xyz = vec3(u_xlat27) * u_xlat16_6.xyz;
					    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat16_6.xyz;
					    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat16_4.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture2D(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + (-u_xlat16_5.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_5.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES
					#ifdef VERTEX
					#version 100
					
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					attribute highp vec4 in_POSITION0;
					attribute highp vec4 in_TANGENT0;
					attribute highp vec3 in_NORMAL0;
					attribute highp vec4 in_TEXCOORD0;
					attribute mediump vec4 in_COLOR0;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					varying highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD4.xyz = u_xlat1.xyz;
					    vs_TEXCOORD6.xyz = u_xlat1.xyz + (-_LightPositionRange.xyz);
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6.w = 0.0;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 100
					#ifdef GL_EXT_shader_texture_lod
					#extension GL_EXT_shader_texture_lod : enable
					#endif
					#if !defined(GL_EXT_shader_texture_lod)
					#define texture1DLodEXT texture1D
					#define texture2DLodEXT texture2D
					#define texture2DProjLodEXT texture2DProj
					#define texture3DLodEXT texture3D
					#define textureCubeLodEXT textureCube
					#endif
					
					#ifdef GL_FRAGMENT_PRECISION_HIGH
					    precision highp float;
					#else
					    precision mediump float;
					#endif
					precision highp int;
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					uniform highp sampler2D _LightTextureB0;
					uniform highp samplerCube _LightTexture0;
					uniform lowp sampler2D _FlakesRGBcolorvariationAmask;
					uniform lowp sampler2D _FlakesNormal;
					uniform lowp sampler2D _CoatNormal;
					uniform lowp samplerCube _ShadowMapTexture;
					varying highp vec2 vs_TEXCOORD0;
					varying highp float vs_TEXCOORD7;
					varying highp vec3 vs_TEXCOORD1;
					varying highp vec3 vs_TEXCOORD2;
					varying highp vec3 vs_TEXCOORD3;
					varying highp vec3 vs_TEXCOORD4;
					varying mediump vec4 vs_COLOR0;
					varying highp vec3 vs_TEXCOORD5;
					#define SV_Target0 gl_FragData[0]
					vec4 u_xlat0;
					mediump float u_xlat16_0;
					bvec4 u_xlatb0;
					vec4 u_xlat1;
					mediump vec3 u_xlat16_1;
					lowp vec4 u_xlat10_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					lowp vec4 u_xlat10_2;
					vec3 u_xlat3;
					lowp vec4 u_xlat10_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					mediump vec3 u_xlat16_6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_13;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_31;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat27 = sqrt(u_xlat27);
					    u_xlat27 = u_xlat27 * _LightPositionRange.w;
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    u_xlat10_1 = textureCubeLodEXT(_ShadowMapTexture, u_xlat1.xyz, 0.0);
					    u_xlat1.x = dot(u_xlat10_1, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.y = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    u_xlat10_3 = textureCubeLodEXT(_ShadowMapTexture, u_xlat0.xyz, 0.0);
					    u_xlat1.w = dot(u_xlat10_3, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlat10_2 = textureCubeLodEXT(_ShadowMapTexture, u_xlat2.xyz, 0.0);
					    u_xlat1.z = dot(u_xlat10_2, vec4(1.0, 0.00392156886, 1.53787005e-05, 6.03086292e-08));
					    u_xlatb0 = lessThan(u_xlat1, vec4(u_xlat27));
					    u_xlat0.x = (u_xlatb0.x) ? _LightShadowData.x : float(1.0);
					    u_xlat0.y = (u_xlatb0.y) ? _LightShadowData.x : float(1.0);
					    u_xlat0.z = (u_xlatb0.z) ? _LightShadowData.x : float(1.0);
					    u_xlat0.w = (u_xlatb0.w) ? _LightShadowData.x : float(1.0);
					    u_xlat16_4.x = dot(u_xlat0, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat16_4.x = u_xlat0.x * u_xlat16_13 + u_xlat16_4.x;
					    u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);
					    u_xlat0.x = texture2D(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat1.x = textureCube(_LightTexture0, vs_TEXCOORD5.xyz).w;
					    u_xlat0.x = u_xlat0.x * u_xlat1.x;
					    u_xlat0.x = u_xlat16_4.x * u_xlat0.x;
					    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat10_2.xyz = texture2D(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat10_1 = texture2D(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_6.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat3.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat3.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat3.xyz = vec3(u_xlat27) * u_xlat3.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat10_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat3.xyz, u_xlat7.xyz);
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat10_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat10_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_5.xyz = u_xlat9.xxx * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_31 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_31) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_4.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat10_1.xyz = texture2D(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_6.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_6.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat3.xyz);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_4.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform highp sampler2D unity_NHxRoughness;
					UNITY_LOCATION(5) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(6) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					mediump vec3 u_xlat16_8;
					vec3 u_xlat9;
					vec3 u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat27;
					mediump float u_xlat16_27;
					float u_xlat28;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat6.xyz = u_xlat0.xxx * u_xlat6.xyz;
					    u_xlat0.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_3.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_2.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat2.xyz = u_xlat16_2.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat27 = dot(u_xlat2.xyz, u_xlat6.xyz);
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat2.x = u_xlat27 * u_xlat27;
					    u_xlat27 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat27 = u_xlat16_1.w * u_xlat27 + _BaseSmoothness;
					    u_xlat2.y = (-u_xlat27) + 1.0;
					    u_xlat27 = texture(unity_NHxRoughness, u_xlat2.xy).x;
					    u_xlat27 = u_xlat27 * 16.0;
					    u_xlat2.x = vs_TEXCOORD1.z;
					    u_xlat2.y = vs_TEXCOORD2.z;
					    u_xlat2.z = vs_TEXCOORD3.z;
					    u_xlat2.x = dot(u_xlat2.xyz, u_xlat0.xyz);
					    u_xlat2.xy = (-u_xlat2.xx) + vec2(1.0, 1.04999995);
					    u_xlat7.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat7.xyz = u_xlat2.yyy * u_xlat7.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat7.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat7.xyz;
					    u_xlat7.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat11.xyz = u_xlat2.yyy * u_xlat7.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat11.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat11.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat11.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat28 = u_xlat16_1.w * u_xlat11.x + _BaseMetallic;
					    u_xlat16_5.xyz = vec3(u_xlat28) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat28) * 0.779083729 + 0.779083729;
					    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;
					    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;
					    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_5.xy = u_xlat16_5.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_8.x = dot(vs_TEXCOORD1.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.y = dot(vs_TEXCOORD2.xyz, u_xlat16_5.xyz);
					    u_xlat16_8.z = dot(vs_TEXCOORD3.xyz, u_xlat16_5.xyz);
					    u_xlat16_27 = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);
					    u_xlat16_27 = inversesqrt(u_xlat16_27);
					    u_xlat16_1.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz;
					    u_xlat27 = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat16_3.xyz = vec3(u_xlat27) * u_xlat16_3.xyz;
					    u_xlat27 = dot(u_xlat0.xyz, u_xlat16_1.xyz);
					    u_xlat27 = u_xlat27 + u_xlat27;
					    u_xlat0.xyz = u_xlat16_1.xyz * (-vec3(u_xlat27)) + u_xlat0.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat6.xyz);
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x;
					    u_xlat0.y = (-_CoatSmoothness) + 1.0;
					    u_xlat0.x = texture(unity_NHxRoughness, u_xlat0.xy).x;
					    u_xlat0.x = u_xlat0.x * 16.0;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + (-u_xlat16_4.xyz);
					    u_xlat27 = u_xlat2.x * u_xlat2.x;
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat27 = u_xlat2.x * u_xlat27 + 0.0500000007;
					    u_xlat27 = u_xlat27 * _CoatAmount;
					    u_xlat16_1.x = (-vs_COLOR0.x) + 1.0;
					    u_xlat1.x = _BaseOcclusion * u_xlat16_1.x + vs_COLOR0.x;
					    u_xlat27 = u_xlat27 * u_xlat1.x;
					    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz + u_xlat16_4.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					uniform 	vec4 unity_FogParams;
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	vec4 _texcoord_ST;
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in mediump vec4 in_COLOR0;
					out highp vec2 vs_TEXCOORD0;
					out highp float vs_TEXCOORD7;
					out highp vec3 vs_TEXCOORD1;
					out highp vec3 vs_TEXCOORD2;
					out highp vec3 vs_TEXCOORD3;
					out highp vec3 vs_TEXCOORD4;
					out mediump vec4 vs_COLOR0;
					out highp vec3 vs_TEXCOORD5;
					out highp vec4 vs_TEXCOORD6;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec3 u_xlat3;
					float u_xlat13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
					    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
					    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
					    gl_Position = u_xlat1;
					    vs_TEXCOORD7 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _texcoord_ST.xy + _texcoord_ST.zw;
					    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat2.xyz;
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat2.xyz;
					    u_xlat3.xyz = u_xlat1.zxy * u_xlat2.yzx + (-u_xlat3.xyz);
					    u_xlat13 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat3.xyz = vec3(u_xlat13) * u_xlat3.xyz;
					    vs_TEXCOORD1.y = u_xlat3.x;
					    vs_TEXCOORD1.x = u_xlat2.z;
					    vs_TEXCOORD1.z = u_xlat1.y;
					    vs_TEXCOORD2.x = u_xlat2.x;
					    vs_TEXCOORD3.x = u_xlat2.y;
					    vs_TEXCOORD2.z = u_xlat1.z;
					    vs_TEXCOORD3.z = u_xlat1.x;
					    vs_TEXCOORD2.y = u_xlat3.y;
					    vs_TEXCOORD3.y = u_xlat3.z;
					    vs_TEXCOORD4.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    vs_COLOR0 = in_COLOR0;
					    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
					    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;
					    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec3 _WorldSpaceCameraPos;
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 _LightPositionRange;
					uniform 	vec4 _LightProjectionParams;
					uniform 	mediump vec4 _LightShadowData;
					uniform 	vec4 unity_ShadowFadeCenterAndType;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToLight[4];
					uniform 	mediump vec4 _LightColor0;
					uniform 	vec4 _BaseColor1;
					uniform 	vec4 _BaseColor2;
					uniform 	vec4 _FlakesColor1;
					uniform 	vec4 _FlakesColor2;
					uniform 	vec4 _FlakesRGBcolorvariationAmask_ST;
					uniform 	float _FlakeColorVariationAmount;
					uniform 	float _FlakesBump;
					uniform 	float _BaseMetallic;
					uniform 	float _FlakesMetallic;
					uniform 	float _BaseSmoothness;
					uniform 	float _FlakesSmoothness;
					uniform 	float _BaseOcclusion;
					uniform 	float _CoatBump;
					uniform 	vec4 _CoatNormal_ST;
					uniform 	float _CoatSmoothness;
					uniform 	float _CoatAmount;
					UNITY_LOCATION(0) uniform highp sampler2D _LightTextureB0;
					UNITY_LOCATION(1) uniform highp samplerCube _LightTexture0;
					UNITY_LOCATION(2) uniform mediump sampler2D _FlakesRGBcolorvariationAmask;
					UNITY_LOCATION(3) uniform mediump sampler2D _FlakesNormal;
					UNITY_LOCATION(4) uniform mediump sampler2D _CoatNormal;
					UNITY_LOCATION(5) uniform mediump samplerCubeShadow hlslcc_zcmp_ShadowMapTexture;
					uniform mediump samplerCube _ShadowMapTexture;
					in highp vec2 vs_TEXCOORD0;
					in highp float vs_TEXCOORD7;
					in highp vec3 vs_TEXCOORD1;
					in highp vec3 vs_TEXCOORD2;
					in highp vec3 vs_TEXCOORD3;
					in highp vec3 vs_TEXCOORD4;
					in mediump vec4 vs_COLOR0;
					layout(location = 0) out mediump vec4 SV_Target0;
					vec3 u_xlat0;
					mediump float u_xlat16_0;
					vec4 u_xlat1;
					mediump vec4 u_xlat16_1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_2;
					mediump vec3 u_xlat16_3;
					mediump vec3 u_xlat16_4;
					mediump vec3 u_xlat16_5;
					vec3 u_xlat6;
					vec3 u_xlat7;
					vec3 u_xlat8;
					vec3 u_xlat9;
					vec3 u_xlat10;
					float u_xlat11;
					mediump float u_xlat16_12;
					float u_xlat19;
					float u_xlat20;
					float u_xlat27;
					float u_xlat28;
					mediump float u_xlat16_28;
					float u_xlat29;
					mediump float u_xlat16_30;
					void main()
					{
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-_LightPositionRange.xyz);
					    u_xlat27 = max(abs(u_xlat0.y), abs(u_xlat0.x));
					    u_xlat27 = max(abs(u_xlat0.z), u_xlat27);
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.z);
					    u_xlat27 = max(u_xlat27, 9.99999975e-06);
					    u_xlat27 = u_xlat27 * _LightProjectionParams.w;
					    u_xlat27 = _LightProjectionParams.y / u_xlat27;
					    u_xlat27 = u_xlat27 + (-_LightProjectionParams.x);
					    u_xlat1.xyz = u_xlat0.xyz + vec3(0.0078125, 0.0078125, 0.0078125);
					    vec4 txVec0 = vec4(u_xlat1.xyz,u_xlat27);
					    u_xlat1.x = texture(hlslcc_zcmp_ShadowMapTexture, txVec0);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, -0.0078125, 0.0078125);
					    vec4 txVec1 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.y = texture(hlslcc_zcmp_ShadowMapTexture, txVec1);
					    u_xlat2.xyz = u_xlat0.xyz + vec3(-0.0078125, 0.0078125, -0.0078125);
					    u_xlat0.xyz = u_xlat0.xyz + vec3(0.0078125, -0.0078125, -0.0078125);
					    vec4 txVec2 = vec4(u_xlat0.xyz,u_xlat27);
					    u_xlat1.w = texture(hlslcc_zcmp_ShadowMapTexture, txVec2);
					    vec4 txVec3 = vec4(u_xlat2.xyz,u_xlat27);
					    u_xlat1.z = texture(hlslcc_zcmp_ShadowMapTexture, txVec3);
					    u_xlat0.x = dot(u_xlat1, vec4(0.25, 0.25, 0.25, 0.25));
					    u_xlat16_3.x = (-_LightShadowData.x) + 1.0;
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x + _LightShadowData.x;
					    u_xlat16_12 = (-u_xlat16_3.x) + 1.0;
					    u_xlat0.xyz = vs_TEXCOORD4.xyz + (-unity_ShadowFadeCenterAndType.xyz);
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
					    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
					    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
					    u_xlat9.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat1.x = dot(u_xlat9.xyz, u_xlat1.xyz);
					    u_xlat0.x = u_xlat0.x + (-u_xlat1.x);
					    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat0.x + u_xlat1.x;
					    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
					#else
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					#endif
					    u_xlat16_3.x = u_xlat0.x * u_xlat16_12 + u_xlat16_3.x;
					    u_xlat1.xyz = vs_TEXCOORD4.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD4.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD4.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;
					    u_xlat0.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat1.x = texture(_LightTexture0, u_xlat1.xyz).w;
					    u_xlat0.x = texture(_LightTextureB0, u_xlat0.xx).x;
					    u_xlat0.x = u_xlat1.x * u_xlat0.x;
					    u_xlat0.x = u_xlat16_3.x * u_xlat0.x;
					    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _FlakesRGBcolorvariationAmask_ST.xy + _FlakesRGBcolorvariationAmask_ST.zw;
					    u_xlat16_2.xyz = texture(_FlakesNormal, u_xlat1.xy).xyz;
					    u_xlat16_1 = texture(_FlakesRGBcolorvariationAmask, u_xlat1.xy);
					    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_FlakesBump, _FlakesBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_0 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_0 = inversesqrt(u_xlat16_0);
					    u_xlat16_2.xyz = vec3(u_xlat16_0) * u_xlat16_5.xyz;
					    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);
					    u_xlat0.x = inversesqrt(u_xlat0.x);
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;
					    u_xlat6.xyz = (-vs_TEXCOORD4.xyz) + _WorldSpaceLightPos0.xyz;
					    u_xlat27 = dot(u_xlat6.xyz, u_xlat6.xyz);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;
					    u_xlat6.xyz = vec3(u_xlat27) * u_xlat6.xyz;
					    u_xlat27 = dot(u_xlat7.xyz, u_xlat7.xyz);
					    u_xlat27 = max(u_xlat27, 0.00100000005);
					    u_xlat27 = inversesqrt(u_xlat27);
					    u_xlat7.xyz = vec3(u_xlat27) * u_xlat7.xyz;
					    u_xlat27 = dot(u_xlat16_2.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat2.x = dot(u_xlat16_2.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
					#else
					    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
					#endif
					    u_xlat27 = u_xlat27 * u_xlat27;
					    u_xlat11 = (-_BaseSmoothness) + _FlakesSmoothness;
					    u_xlat11 = u_xlat16_1.w * u_xlat11 + _BaseSmoothness;
					    u_xlat11 = (-u_xlat11) + 1.0;
					    u_xlat20 = u_xlat11 * u_xlat11;
					    u_xlat11 = u_xlat11 * u_xlat11 + 1.5;
					    u_xlat29 = u_xlat20 * u_xlat20 + -1.0;
					    u_xlat27 = u_xlat27 * u_xlat29 + 1.00001001;
					    u_xlat29 = dot(u_xlat6.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat29 = min(max(u_xlat29, 0.0), 1.0);
					#else
					    u_xlat29 = clamp(u_xlat29, 0.0, 1.0);
					#endif
					    u_xlat29 = max(u_xlat29, 0.319999993);
					    u_xlat11 = u_xlat11 * u_xlat29;
					    u_xlat27 = u_xlat27 * u_xlat11;
					    u_xlat27 = u_xlat20 / u_xlat27;
					    u_xlat27 = u_xlat27 + -9.99999975e-05;
					    u_xlat27 = max(u_xlat27, 0.0);
					    u_xlat27 = min(u_xlat27, 100.0);
					    u_xlat8.x = vs_TEXCOORD1.z;
					    u_xlat8.y = vs_TEXCOORD2.z;
					    u_xlat8.z = vs_TEXCOORD3.z;
					    u_xlat0.x = dot(u_xlat8.xyz, u_xlat0.xyz);
					    u_xlat0.xy = (-u_xlat0.xx) + vec2(1.0, 1.04999995);
					    u_xlat8.xyz = (-_FlakesColor1.xyz) + _FlakesColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _FlakesColor1.xyz;
					    u_xlat1.xyz = u_xlat16_1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = vec3(_FlakeColorVariationAmount) * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat8.xyz = (-_BaseColor1.xyz) + _BaseColor2.xyz;
					    u_xlat8.xyz = u_xlat0.yyy * u_xlat8.xyz + _BaseColor1.xyz;
					    u_xlat1.xyz = u_xlat1.xyz + (-u_xlat8.xyz);
					    u_xlat1.xyz = u_xlat16_1.www * u_xlat1.xyz + u_xlat8.xyz;
					    u_xlat16_4.xyz = u_xlat1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);
					    u_xlat9.x = (-_BaseMetallic) + _FlakesMetallic;
					    u_xlat9.x = u_xlat16_1.w * u_xlat9.x + _BaseMetallic;
					    u_xlat16_4.xyz = u_xlat9.xxx * u_xlat16_4.xyz + vec3(0.220916301, 0.220916301, 0.220916301);
					    u_xlat16_30 = (-u_xlat9.x) * 0.779083729 + 0.779083729;
					    u_xlat9.xyz = vec3(u_xlat27) * u_xlat16_4.xyz;
					    u_xlat9.xyz = u_xlat1.xyz * vec3(u_xlat16_30) + u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat16_3.xyz * u_xlat9.xyz;
					    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
					    u_xlat1.xy = vs_TEXCOORD0.xy * _CoatNormal_ST.xy + _CoatNormal_ST.zw;
					    u_xlat16_1.xyz = texture(_CoatNormal, u_xlat1.xy).xyz;
					    u_xlat16_4.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
					    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_CoatBump, _CoatBump));
					    u_xlat16_5.x = dot(vs_TEXCOORD1.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.y = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
					    u_xlat16_5.z = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
					    u_xlat16_1.x = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
					    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);
					    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_5.xyz;
					    u_xlat28 = dot(u_xlat16_1.xyz, u_xlat7.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
					#else
					    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
					#endif
					    u_xlat1.x = dot(u_xlat16_1.xyz, u_xlat6.xyz);
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat10.x = u_xlat28 * u_xlat28;
					    u_xlat19 = (-_CoatSmoothness) + 1.0;
					    u_xlat28 = u_xlat19 * u_xlat19;
					    u_xlat19 = u_xlat19 * u_xlat19 + 1.5;
					    u_xlat19 = u_xlat19 * u_xlat29;
					    u_xlat2.x = u_xlat28 * u_xlat28 + -1.0;
					    u_xlat10.x = u_xlat10.x * u_xlat2.x + 1.00001001;
					    u_xlat10.x = u_xlat10.x * u_xlat19;
					    u_xlat10.x = u_xlat28 / u_xlat10.x;
					    u_xlat10.x = u_xlat10.x + -9.99999975e-05;
					    u_xlat10.x = max(u_xlat10.x, 0.0);
					    u_xlat10.x = min(u_xlat10.x, 100.0);
					    u_xlat10.xyz = u_xlat16_3.xyz * u_xlat10.xxx;
					    u_xlat1.xyz = u_xlat10.xyz * u_xlat1.xxx + (-u_xlat9.xyz);
					    u_xlat28 = u_xlat0.x * u_xlat0.x;
					    u_xlat28 = u_xlat28 * u_xlat28;
					    u_xlat0.x = u_xlat0.x * u_xlat28 + 0.0500000007;
					    u_xlat0.x = u_xlat0.x * _CoatAmount;
					    u_xlat16_28 = (-vs_COLOR0.x) + 1.0;
					    u_xlat28 = _BaseOcclusion * u_xlat16_28 + vs_COLOR0.x;
					    u_xlat0.x = u_xlat0.x * u_xlat28;
					    u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat9.xyz;
					    u_xlat27 = vs_TEXCOORD7;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
					#else
					    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
					#endif
					    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat27);
					    SV_Target0.xyz = u_xlat0.xyz;
					    SV_Target0.w = 1.0;
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SPOT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "SHADOWS_SCREEN" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "FOG_LINEAR" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
					"!!GLES3"
				}
			}
		}
		Pass {
			Name "ShadowCaster"
			Tags { "IsEmissive" = "true" "LIGHTMODE" = "SHADOWCASTER" "QUEUE" = "Geometry+0" "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
			GpuProgramID 221596
			Program "vp" {
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb13 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat2.zxy;
					    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat0.yzx + (-u_xlat16_3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    vs_TEXCOORD1.y = u_xlat16_3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.z;
					    vs_TEXCOORD2.x = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat16_3.y;
					    vs_TEXCOORD3.y = u_xlat16_3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = in_TEXCOORD1.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb13 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat2.zxy;
					    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat0.yzx + (-u_xlat16_3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    vs_TEXCOORD1.y = u_xlat16_3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.z;
					    vs_TEXCOORD2.x = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat16_3.y;
					    vs_TEXCOORD3.y = u_xlat16_3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = in_TEXCOORD1.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat8;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb13 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = unity_LightShadowBias.x / u_xlat0.w;
					#ifdef UNITY_ADRENO_ES3
					    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
					#else
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					#endif
					    u_xlat8 = u_xlat0.z + u_xlat1.x;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat8);
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.x = (-u_xlat8) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat0.x + u_xlat8;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat2.zxy;
					    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat0.yzx + (-u_xlat16_3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    vs_TEXCOORD1.y = u_xlat16_3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.z;
					    vs_TEXCOORD2.x = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat16_3.y;
					    vs_TEXCOORD3.y = u_xlat16_3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = in_TEXCOORD1.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb13 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat2.zxy;
					    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat0.yzx + (-u_xlat16_3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    vs_TEXCOORD1.y = u_xlat16_3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.z;
					    vs_TEXCOORD2.x = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat16_3.y;
					    vs_TEXCOORD3.y = u_xlat16_3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = in_TEXCOORD1.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb13 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat2.zxy;
					    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat0.yzx + (-u_xlat16_3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    vs_TEXCOORD1.y = u_xlat16_3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.z;
					    vs_TEXCOORD2.x = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat16_3.y;
					    vs_TEXCOORD3.y = u_xlat16_3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = in_TEXCOORD1.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3
					#ifdef VERTEX
					#version 300 es
					
					#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
					#if HLSLCC_ENABLE_UNIFORM_BUFFERS
					#define UNITY_UNIFORM
					#else
					#define UNITY_UNIFORM uniform
					#endif
					#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
					#if UNITY_SUPPORTS_UNIFORM_LOCATION
					#define UNITY_LOCATION(x) layout(location = x)
					#define UNITY_BINDING(x) layout(binding = x, std140)
					#else
					#define UNITY_LOCATION(x)
					#define UNITY_BINDING(x) layout(std140)
					#endif
					uniform 	vec4 _WorldSpaceLightPos0;
					uniform 	vec4 unity_LightShadowBias;
					uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
					uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
					uniform 	vec4 unity_WorldTransformParams;
					uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
					in highp vec4 in_POSITION0;
					in highp vec4 in_TANGENT0;
					in highp vec3 in_NORMAL0;
					in highp vec4 in_TEXCOORD0;
					in highp vec4 in_TEXCOORD1;
					out highp vec4 vs_TEXCOORD1;
					out highp vec4 vs_TEXCOORD2;
					out highp vec4 vs_TEXCOORD3;
					out highp vec4 vs_TEXCOORD4;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					mediump vec3 u_xlat16_3;
					float u_xlat12;
					float u_xlat13;
					bool u_xlatb13;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
					    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
					    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat1.xyz = vec3(u_xlat13) * u_xlat1.xyz;
					    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
					    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
					    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
					    u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat13 = inversesqrt(u_xlat13);
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
					    u_xlat1.x = dot(u_xlat2.xyz, u_xlat1.xyz);
					    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
					    u_xlat1.x = sqrt(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * unity_LightShadowBias.z;
					    u_xlat1.xyz = (-u_xlat2.xyz) * u_xlat1.xxx + u_xlat0.xyz;
					#ifdef UNITY_ADRENO_ES3
					    u_xlatb13 = !!(unity_LightShadowBias.z!=0.0);
					#else
					    u_xlatb13 = unity_LightShadowBias.z!=0.0;
					#endif
					    u_xlat0.xyz = (bool(u_xlatb13)) ? u_xlat1.xyz : u_xlat0.xyz;
					    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
					    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
					    u_xlat1.x = max((-u_xlat0.w), u_xlat0.z);
					    u_xlat1.x = (-u_xlat0.z) + u_xlat1.x;
					    gl_Position.z = unity_LightShadowBias.y * u_xlat1.x + u_xlat0.z;
					    gl_Position.xyw = u_xlat0.xyw;
					    u_xlat0.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat0.xyz;
					    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;
					    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat2.zxy;
					    u_xlat16_3.xyz = u_xlat2.yzx * u_xlat0.yzx + (-u_xlat16_3.xyz);
					    u_xlat12 = in_TANGENT0.w * unity_WorldTransformParams.w;
					    u_xlat16_3.xyz = vec3(u_xlat12) * u_xlat16_3.xyz;
					    vs_TEXCOORD1.y = u_xlat16_3.x;
					    vs_TEXCOORD1.z = u_xlat2.x;
					    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
					    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
					    vs_TEXCOORD1.w = u_xlat1.x;
					    vs_TEXCOORD1.x = u_xlat0.z;
					    vs_TEXCOORD2.x = u_xlat0.x;
					    vs_TEXCOORD3.x = u_xlat0.y;
					    vs_TEXCOORD2.z = u_xlat2.y;
					    vs_TEXCOORD3.z = u_xlat2.z;
					    vs_TEXCOORD2.w = u_xlat1.y;
					    vs_TEXCOORD3.w = u_xlat1.z;
					    vs_TEXCOORD2.y = u_xlat16_3.y;
					    vs_TEXCOORD3.y = u_xlat16_3.z;
					    vs_TEXCOORD4.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD4.zw = in_TEXCOORD1.xy;
					    return;
					}
					
					#endif
					#ifdef FRAGMENT
					#version 300 es
					
					precision highp float;
					precision highp int;
					layout(location = 0) out mediump vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
					    return;
					}
					
					#endif"
				}
			}
			Program "fp" {
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_DEPTH" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3"
				}
				SubProgram "gles hw_tier00 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES"
				}
				SubProgram "gles hw_tier01 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES"
				}
				SubProgram "gles hw_tier02 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES"
				}
				SubProgram "gles3 hw_tier00 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier01 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3"
				}
				SubProgram "gles3 hw_tier02 " {
					Keywords { "SHADOWS_CUBE" "UNITY_PASS_SHADOWCASTER" }
					"!!GLES3"
				}
			}
		}
	}
	Fallback "Diffuse"
	CustomEditor "ASEMaterialInspector"
}